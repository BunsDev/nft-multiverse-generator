{"id":"865968a364dbc96eb8d9b5aa481b8783","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IFunctionsRouter} from \"./interfaces/IFunctionsRouter.sol\";\nimport {IFunctionsClient} from \"./interfaces/IFunctionsClient.sol\";\n\nimport {FunctionsRequest} from \"./libraries/FunctionsRequest.sol\";\n\n/// @title The Chainlink Functions client contract\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\nabstract contract FunctionsClient is IFunctionsClient {\n  using FunctionsRequest for FunctionsRequest.Request;\n\n  IFunctionsRouter internal immutable i_router;\n\n  event RequestSent(bytes32 indexed id);\n  event RequestFulfilled(bytes32 indexed id);\n\n  error OnlyRouterCanFulfill();\n\n  constructor(address router) {\n    i_router = IFunctionsRouter(router);\n  }\n\n  /// @notice Sends a Chainlink Functions request\n  /// @param data The CBOR encoded bytes data for a Functions request\n  /// @param subscriptionId The subscription ID that will be charged to service the request\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\n  /// @return requestId The generated request ID for this request\n  function _sendRequest(\n    bytes memory data,\n    uint64 subscriptionId,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) internal returns (bytes32) {\n    bytes32 requestId = i_router.sendRequest(\n      subscriptionId,\n      data,\n      FunctionsRequest.REQUEST_DATA_VERSION,\n      callbackGasLimit,\n      donId\n    );\n    emit RequestSent(requestId);\n    return requestId;\n  }\n\n  /// @notice User defined function to handle a response from the DON\n  /// @param requestId The request ID, returned by sendRequest()\n  /// @param response Aggregated response from the execution of the user's source code\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\n  /// @dev Either response or error parameter will be set, but never both\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\n\n  /// @inheritdoc IFunctionsClient\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\n    if (msg.sender != address(i_router)) {\n      revert OnlyRouterCanFulfill();\n    }\n    fulfillRequest(requestId, response, err);\n    emit RequestFulfilled(requestId);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title Chainlink Functions client interface.\ninterface IFunctionsClient {\n  /// @notice Chainlink Functions response handler called by the Functions Router\n  /// during fullilment from the designated transmitter node in an OCR round.\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\n  /// @param response Aggregated response from the request's source code.\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\n  /// @dev Either response or error parameter will be set, but never both.\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\n}\n"},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {FunctionsResponse} from \"../libraries/FunctionsResponse.sol\";\n\n/// @title Chainlink Functions Router interface.\ninterface IFunctionsRouter {\n  /// @notice The identifier of the route to retrieve the address of the access control contract\n  /// The access control contract controls which accounts can manage subscriptions\n  /// @return id - bytes32 id that can be passed to the \"getContractById\" of the Router\n  function getAllowListId() external view returns (bytes32);\n\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\n  /// The access control contract controls which accounts can manage subscriptions\n  function setAllowListId(bytes32 allowListId) external;\n\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\n  /// @return adminFee\n  function getAdminFee() external view returns (uint72 adminFee);\n\n  /// @notice Sends a request using the provided subscriptionId\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\n  /// a client can make requests from different contracts referencing the same subscription\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n  /// @param dataVersion - Gas limit for the fulfillment callback\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\n  /// @param donId - An identifier used to determine which route to send the request along\n  /// @return requestId - A unique request identifier\n  function sendRequest(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint16 dataVersion,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) external returns (bytes32);\n\n  /// @notice Sends a request to the proposed contracts\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\n  /// a client can make requests from different contracts referencing the same subscription\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n  /// @param dataVersion - Gas limit for the fulfillment callback\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\n  /// @param donId - An identifier used to determine which route to send the request along\n  /// @return requestId - A unique request identifier\n  function sendRequestToProposed(\n    uint64 subscriptionId,\n    bytes calldata data,\n    uint16 dataVersion,\n    uint32 callbackGasLimit,\n    bytes32 donId\n  ) external returns (bytes32);\n\n  /// @notice Fulfill the request by:\n  /// - calling back the data that the Oracle returned to the client contract\n  /// - pay the DON for processing the request\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\n  /// @param response response data from DON consensus\n  /// @param err error from DON consensus\n  /// @param juelsPerGas - current rate of juels/gas\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\n  /// @param transmitter - The Node that transmitted the OCR report\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\n  /// @return fulfillResult -\n  /// @return callbackGasCostJuels -\n  function fulfill(\n    bytes memory response,\n    bytes memory err,\n    uint96 juelsPerGas,\n    uint96 costWithoutFulfillment,\n    address transmitter,\n    FunctionsResponse.Commitment memory commitment\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\n\n  /// @notice Validate requested gas limit is below the subscription max.\n  /// @param subscriptionId subscription ID\n  /// @param callbackGasLimit desired callback gas limit\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\n\n  /// @notice Get the current contract given an ID\n  /// @param id A bytes32 identifier for the route\n  /// @return contract The current contract address\n  function getContractById(bytes32 id) external view returns (address);\n\n  /// @notice Get the proposed next contract given an ID\n  /// @param id A bytes32 identifier for the route\n  /// @return contract The current or proposed contract address\n  function getProposedContractById(bytes32 id) external view returns (address);\n\n  /// @notice Return the latest proprosal set\n  /// @return ids The identifiers of the contracts to update\n  /// @return to The addresses of the contracts that will be updated to\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\n\n  /// @notice Proposes one or more updates to the contract routes\n  /// @dev Only callable by owner\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\n\n  /// @notice Updates the current contract routes to the proposed contracts\n  /// @dev Only callable by owner\n  function updateContracts() external;\n\n  /// @dev Puts the system into an emergency stopped state.\n  /// @dev Only callable by owner\n  function pause() external;\n\n  /// @dev Takes the system out of an emergency stopped state.\n  /// @dev Only callable by owner\n  function unpause() external;\n}\n"},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {CBOR} from \"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\";\n\n/// @title Library for encoding the input data of a Functions request into CBOR\nlibrary FunctionsRequest {\n  using CBOR for CBOR.CBORBuffer;\n\n  uint16 public constant REQUEST_DATA_VERSION = 1;\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\n\n  enum Location {\n    Inline, // Provided within the Request\n    Remote, // Hosted through remote location that can be accessed through a provided URL\n    DONHosted // Hosted on the DON's storage\n  }\n\n  enum CodeLanguage {\n    JavaScript\n    // In future version we may add other languages\n  }\n\n  struct Request {\n    Location codeLocation; // ════════════╸ The location of the source code that will be executed on each node in the DON\n    Location secretsLocation; // ═════════╸ The location of secrets that will be passed into the source code. *Only Remote secrets are supported\n    CodeLanguage language; // ════════════╸ The coding language that the source code is written in\n    string source; // ════════════════════╸ Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\n    bytes encryptedSecretsReference; // ══╸ Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\n    string[] args; // ════════════════════╸ String arguments that will be passed into the source code\n    bytes[] bytesArgs; // ════════════════╸ Bytes arguments that will be passed into the source code\n  }\n\n  error EmptySource();\n  error EmptySecrets();\n  error EmptyArgs();\n  error NoInlineSecrets();\n\n  /// @notice Encodes a Request to CBOR encoded bytes\n  /// @param self The request to encode\n  /// @return CBOR encoded bytes\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\n\n    buffer.writeString(\"codeLocation\");\n    buffer.writeUInt256(uint256(self.codeLocation));\n\n    buffer.writeString(\"language\");\n    buffer.writeUInt256(uint256(self.language));\n\n    buffer.writeString(\"source\");\n    buffer.writeString(self.source);\n\n    if (self.args.length > 0) {\n      buffer.writeString(\"args\");\n      buffer.startArray();\n      for (uint256 i = 0; i < self.args.length; ++i) {\n        buffer.writeString(self.args[i]);\n      }\n      buffer.endSequence();\n    }\n\n    if (self.encryptedSecretsReference.length > 0) {\n      if (self.secretsLocation == Location.Inline) {\n        revert NoInlineSecrets();\n      }\n      buffer.writeString(\"secretsLocation\");\n      buffer.writeUInt256(uint256(self.secretsLocation));\n      buffer.writeString(\"secrets\");\n      buffer.writeBytes(self.encryptedSecretsReference);\n    }\n\n    if (self.bytesArgs.length > 0) {\n      buffer.writeString(\"bytesArgs\");\n      buffer.startArray();\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\n        buffer.writeBytes(self.bytesArgs[i]);\n      }\n      buffer.endSequence();\n    }\n\n    return buffer.buf.buf;\n  }\n\n  /// @notice Initializes a Chainlink Functions Request\n  /// @dev Sets the codeLocation and code on the request\n  /// @param self The uninitialized request\n  /// @param codeLocation The user provided source code location\n  /// @param language The programming language of the user code\n  /// @param source The user provided source code or a url\n  function initializeRequest(\n    Request memory self,\n    Location codeLocation,\n    CodeLanguage language,\n    string memory source\n  ) internal pure {\n    if (bytes(source).length == 0) revert EmptySource();\n\n    self.codeLocation = codeLocation;\n    self.language = language;\n    self.source = source;\n  }\n\n  /// @notice Initializes a Chainlink Functions Request\n  /// @dev Simplified version of initializeRequest for PoC\n  /// @param self The uninitialized request\n  /// @param javaScriptSource The user provided JS code (must not be empty)\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\n  }\n\n  /// @notice Adds Remote user encrypted secrets to a Request\n  /// @param self The initialized request\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\n\n    self.secretsLocation = Location.Remote;\n    self.encryptedSecretsReference = encryptedSecretsReference;\n  }\n\n  /// @notice Adds DON-hosted secrets reference to a Request\n  /// @param self The initialized request\n  /// @param slotID Slot ID of the user's secrets hosted on DON\n  /// @param version User data version (for the slotID)\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\n\n    buffer.writeString(\"slotID\");\n    buffer.writeUInt64(slotID);\n    buffer.writeString(\"version\");\n    buffer.writeUInt64(version);\n\n    self.secretsLocation = Location.DONHosted;\n    self.encryptedSecretsReference = buffer.buf.buf;\n  }\n\n  /// @notice Sets args for the user run function\n  /// @param self The initialized request\n  /// @param args The array of string args (must not be empty)\n  function setArgs(Request memory self, string[] memory args) internal pure {\n    if (args.length == 0) revert EmptyArgs();\n\n    self.args = args;\n  }\n\n  /// @notice Sets bytes args for the user run function\n  /// @param self The initialized request\n  /// @param args The array of bytes args (must not be empty)\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\n    if (args.length == 0) revert EmptyArgs();\n\n    self.bytesArgs = args;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/// @title Library of types that are used for fulfillment of a Functions request\nlibrary FunctionsResponse {\n  // Used to send request information from the Router to the Coordinator\n  struct RequestMeta {\n    bytes data; // ══════════════════╸ CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\n    bytes32 flags; // ═══════════════╸ Per-subscription flags\n    address requestingContract; // ══╗ The client contract that is sending the request\n    uint96 availableBalance; // ═════╝ Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\n    uint72 adminFee; // ═════════════╗ Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\n    uint64 subscriptionId; //        ║ Identifier of the billing subscription that will be charged for the request\n    uint64 initiatedRequests; //     ║ The number of requests that have been started\n    uint32 callbackGasLimit; //      ║ The amount of gas that the callback to the consuming contract will be given\n    uint16 dataVersion; // ══════════╝ The version of the structure of the CBOR encoded request data\n    uint64 completedRequests; // ════╗ The number of requests that have successfully completed or timed out\n    address subscriptionOwner; // ═══╝ The owner of the billing subscription\n  }\n\n  enum FulfillResult {\n    FULFILLED, // 0\n    USER_CALLBACK_ERROR, // 1\n    INVALID_REQUEST_ID, // 2\n    COST_EXCEEDS_COMMITMENT, // 3\n    INSUFFICIENT_GAS_PROVIDED, // 4\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\n    INVALID_COMMITMENT // 6\n  }\n\n  struct Commitment {\n    bytes32 requestId; // ═════════════════╸ A unique identifier for a Chainlink Functions request\n    address coordinator; // ═══════════════╗ The Coordinator contract that manages the DON that is servicing a request\n    uint96 estimatedTotalCostJuels; // ════╝ The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\n    address client; // ════════════════════╗ The client contract that sent the request\n    uint64 subscriptionId; //              ║ Identifier of the billing subscription that will be charged for the request\n    uint32 callbackGasLimit; // ═══════════╝ The amount of gas that the callback to the consuming contract will be given\n    uint72 adminFee; // ═══════════════════╗ Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\n    uint72 donFee; //                      ║ Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\n    uint40 gasOverheadBeforeCallback; //   ║ Represents the average gas execution cost before the fulfillment callback.\n    uint40 gasOverheadAfterCallback; //    ║ Represents the average gas execution cost after the fulfillment callback.\n    uint32 timeoutTimestamp; // ═══════════╝ The timestamp at which a request will be eligible to be timed out\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"content":"// SPDX-License-Identifier: BSD-2-Clause\npragma solidity ^0.8.4;\n\n/**\n* @dev A library for working with mutable byte buffers in Solidity.\n*\n* Byte buffers are mutable and expandable, and provide a variety of primitives\n* for appending to them. At any time you can fetch a bytes object containing the\n* current contents of the buffer. The bytes object should not be stored between\n* operations, as it may change due to resizing of the buffer.\n*/\nlibrary Buffer {\n    /**\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n    *      a capacity. The capacity may be longer than the current value, in\n    *      which case it can be extended without the need to allocate more memory.\n    */\n    struct buffer {\n        bytes buf;\n        uint capacity;\n    }\n\n    /**\n    * @dev Initializes a buffer with an initial capacity.\n    * @param buf The buffer to initialize.\n    * @param capacity The number of bytes of space to allocate the buffer.\n    * @return The buffer, for chaining.\n    */\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\n        if (capacity % 32 != 0) {\n            capacity += 32 - (capacity % 32);\n        }\n        // Allocate space for the buffer data\n        buf.capacity = capacity;\n        assembly {\n            let ptr := mload(0x40)\n            mstore(buf, ptr)\n            mstore(ptr, 0)\n            let fpm := add(32, add(ptr, capacity))\n            if lt(fpm, ptr) {\n                revert(0, 0)\n            }\n            mstore(0x40, fpm)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Initializes a new buffer from an existing bytes object.\n    *      Changes to the buffer may mutate the original value.\n    * @param b The bytes object to initialize the buffer with.\n    * @return A new buffer.\n    */\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\n        buffer memory buf;\n        buf.buf = b;\n        buf.capacity = b.length;\n        return buf;\n    }\n\n    function resize(buffer memory buf, uint capacity) private pure {\n        bytes memory oldbuf = buf.buf;\n        init(buf, capacity);\n        append(buf, oldbuf);\n    }\n\n    /**\n    * @dev Sets buffer length to 0.\n    * @param buf The buffer to truncate.\n    * @return The original buffer, for chaining..\n    */\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\n        assembly {\n            let bufptr := mload(buf)\n            mstore(bufptr, 0)\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to copy.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\n        require(len <= data.length);\n\n        uint off = buf.buf.length;\n        uint newCapacity = off + len;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint dest;\n        uint src;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Length of existing buffer data\n            let buflen := mload(bufptr)\n            // Start address = buffer address + offset + sizeof(buffer length)\n            dest := add(add(bufptr, 32), off)\n            // Update buffer length if we're extending it\n            if gt(newCapacity, buflen) {\n                mstore(bufptr, newCapacity)\n            }\n            src := add(data, 32)\n        }\n\n        // Copy word-length chunks while possible\n        for (; len >= 32; len -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        unchecked {\n            uint mask = (256 ** (32 - len)) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask))\n                let destpart := and(mload(dest), mask)\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n        return append(buf, data, data.length);\n    }\n\n    /**\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n    *      capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint offPlusOne = off + 1;\n        if (off >= buf.capacity) {\n            resize(buf, offPlusOne * 2);\n        }\n\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + off\n            let dest := add(add(bufptr, off), 32)\n            mstore8(dest, data)\n            // Update buffer length if we extended it\n            if gt(offPlusOne, mload(bufptr)) {\n                mstore(bufptr, offPlusOne)\n            }\n        }\n\n        return buf;\n    }\n\n    /**\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n    *      exceed the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @param len The number of bytes to write (left-aligned).\n    * @return The original buffer, for chaining.\n    */\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        unchecked {\n            uint mask = (256 ** len) - 1;\n            // Right-align data\n            data = data >> (8 * (32 - len));\n            assembly {\n                // Memory address of the buffer data\n                let bufptr := mload(buf)\n                // Address = buffer address + sizeof(buffer length) + newCapacity\n                let dest := add(bufptr, newCapacity)\n                mstore(dest, or(and(mload(dest), not(mask)), data))\n                // Update buffer length if we extended it\n                if gt(newCapacity, mload(bufptr)) {\n                    mstore(bufptr, newCapacity)\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chhaining.\n    */\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n        return append(buf, bytes32(data), 20);\n    }\n\n    /**\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n    *      the capacity of the buffer.\n    * @param buf The buffer to append to.\n    * @param data The data to append.\n    * @return The original buffer, for chaining.\n    */\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n        return append(buf, data, 32);\n    }\n\n    /**\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n     *      exceed the capacity of the buffer.\n     * @param buf The buffer to append to.\n     * @param data The data to append.\n     * @param len The number of bytes to write (right-aligned).\n     * @return The original buffer.\n     */\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\n        uint off = buf.buf.length;\n        uint newCapacity = len + off;\n        if (newCapacity > buf.capacity) {\n            resize(buf, newCapacity * 2);\n        }\n\n        uint mask = (256 ** len) - 1;\n        assembly {\n            // Memory address of the buffer data\n            let bufptr := mload(buf)\n            // Address = buffer address + sizeof(buffer length) + newCapacity\n            let dest := add(bufptr, newCapacity)\n            mstore(dest, or(and(mload(dest), not(mask)), data))\n            // Update buffer length if we extended it\n            if gt(newCapacity, mload(bufptr)) {\n                mstore(bufptr, newCapacity)\n            }\n        }\n        return buf;\n    }\n}"},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../../@ensdomains/buffer/v0.1.0/Buffer.sol\";\n\n/**\n* @dev A library for populating CBOR encoded payload in Solidity.\n*\n* https://datatracker.ietf.org/doc/html/rfc7049\n*\n* The library offers various write* and start* methods to encode values of different types.\n* The resulted buffer can be obtained with data() method.\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\n* in an invalid CBOR if start/write/end flow is violated.\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\n* except for nested start/end pairs.\n*/\n\nlibrary CBOR {\n    using Buffer for Buffer.buffer;\n\n    struct CBORBuffer {\n        Buffer.buffer buf;\n        uint256 depth;\n    }\n\n    uint8 private constant MAJOR_TYPE_INT = 0;\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\n    uint8 private constant MAJOR_TYPE_STRING = 3;\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\n    uint8 private constant MAJOR_TYPE_MAP = 5;\n    uint8 private constant MAJOR_TYPE_TAG = 6;\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n    uint8 private constant CBOR_FALSE = 20;\n    uint8 private constant CBOR_TRUE = 21;\n    uint8 private constant CBOR_NULL = 22;\n    uint8 private constant CBOR_UNDEFINED = 23;\n\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\n        Buffer.init(cbor.buf, capacity);\n        cbor.depth = 0;\n        return cbor;\n    }\n\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\n        require(buf.depth == 0, \"Invalid CBOR\");\n        return buf.buf.buf;\n    }\n\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n        writeBytes(buf, abi.encode(value));\n    }\n\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\n        if (value < 0) {\n            buf.buf.appendUint8(\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\n            );\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\n        } else {\n            writeUInt256(buf, uint256(value));\n        }\n    }\n\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\n    }\n\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\n        if(value >= 0) {\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n        } else{\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\n        }\n    }\n\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n        buf.buf.append(value);\n    }\n\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n        buf.buf.append(bytes(value));\n    }\n\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\n    }\n\n    function writeNull(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_NULL);\n    }\n\n    function writeUndefined(CBORBuffer memory buf) internal pure {\n        writeContentFree(buf, CBOR_UNDEFINED);\n    }\n\n    function startArray(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n        buf.depth += 1;\n    }\n\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\n    }\n\n    function startMap(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n        buf.depth += 1;\n    }\n\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\n    }\n\n    function endSequence(CBORBuffer memory buf) internal pure {\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n        buf.depth -= 1;\n    }\n\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\n        writeString(buf, key);\n        writeString(buf, value);\n    }\n\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\n        writeString(buf, key);\n        writeBytes(buf, value);\n    }\n\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\n        writeString(buf, key);\n        writeUInt256(buf, value);\n    }\n\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\n        writeString(buf, key);\n        writeInt256(buf, value);\n    }\n\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\n        writeString(buf, key);\n        writeUInt64(buf, value);\n    }\n\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\n        writeString(buf, key);\n        writeInt64(buf, value);\n    }\n\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\n        writeString(buf, key);\n        writeBool(buf, value);\n    }\n\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeNull(buf);\n    }\n\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        writeUndefined(buf);\n    }\n\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startMap(buf);\n    }\n\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\n        writeString(buf, key);\n        startArray(buf);\n    }\n\n    function writeFixedNumeric(\n        CBORBuffer memory buf,\n        uint8 major,\n        uint64 value\n    ) private pure {\n        if (value <= 23) {\n            buf.buf.appendUint8(uint8((major << 5) | value));\n        } else if (value <= 0xFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 24));\n            buf.buf.appendInt(value, 1);\n        } else if (value <= 0xFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 25));\n            buf.buf.appendInt(value, 2);\n        } else if (value <= 0xFFFFFFFF) {\n            buf.buf.appendUint8(uint8((major << 5) | 26));\n            buf.buf.appendInt(value, 4);\n        } else {\n            buf.buf.appendUint8(uint8((major << 5) | 27));\n            buf.buf.appendInt(value, 8);\n        }\n    }\n\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\n        private\n        pure\n    {\n        buf.buf.appendUint8(uint8((major << 5) | 31));\n    }\n\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\n        private\n        pure\n    {\n        writeFixedNumeric(buf, major, length);\n    }\n\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\n    }\n}"},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VRFV2PlusClient} from \"../libraries/VRFV2PlusClient.sol\";\nimport {IVRFSubscriptionV2Plus} from \"./IVRFSubscriptionV2Plus.sol\";\n\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\n  /**\n   * @notice Request a set of random words.\n   * @param req - a struct containing following fields for randomness request:\n   * keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * requestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * extraArgs - abi-encoded extra args\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\n/// @notice method required to be implemented by all V2Plus consumers.\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\ninterface IVRFMigratableConsumerV2Plus {\n  event CoordinatorSet(address vrfCoordinator);\n\n  /// @notice Sets the VRF Coordinator address\n  /// @notice This method should only be callable by the coordinator or contract owner\n  function setCoordinator(address vrfCoordinator) external;\n}\n"},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\n/// @notice related methods implemented by the V2Plus coordinator.\ninterface IVRFSubscriptionV2Plus {\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint256 subId, address to) external;\n\n  /**\n   * @notice Accept subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n   * @dev  to send Native with the call, for example:\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\n   */\n  function createSubscription() external returns (uint256 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return nativeBalance - native balance of the subscription in wei.\n   * @return reqCount - Requests count of subscription.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint256 subId\n  )\n    external\n    view\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint256 subId) external view returns (bool);\n\n  /**\n   * @notice Paginate through all active VRF subscriptions.\n   * @param startIndex index of the subscription to start from\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\n   */\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\n\n  /**\n   * @notice Fund a subscription with native.\n   * @param subId - ID of the subscription\n   * @notice This method expects msg.value to be greater than or equal to 0.\n   */\n  function fundSubscriptionWithNative(uint256 subId) external payable;\n}\n"},"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// End consumer library.\nlibrary VRFV2PlusClient {\n  // extraArgs will evolve to support new features\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\"VRF ExtraArgsV1\"));\n  struct ExtraArgsV1 {\n    bool nativePayment;\n  }\n\n  struct RandomWordsRequest {\n    bytes32 keyHash;\n    uint256 subId;\n    uint16 requestConfirmations;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    bytes extraArgs;\n  }\n\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IVRFCoordinatorV2Plus} from \"./interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {IVRFMigratableConsumerV2Plus} from \"./interfaces/IVRFMigratableConsumerV2Plus.sol\";\nimport {ConfirmedOwner} from \"../../shared/access/ConfirmedOwner.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords, extraArgs),\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n *\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\n  error ZeroAddress();\n\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\n  // so that coordinator reference is updated after migration\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\n    if (msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n\n  /**\n   * @inheritdoc IVRFMigratableConsumerV2Plus\n   */\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n\n    emit CoordinatorSet(_vrfCoordinator);\n  }\n\n  modifier onlyOwnerOrCoordinator() {\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\n    }\n    _;\n  }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/EnterTheChainlinkNFTMultiverse.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {FunctionsClient} from \"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\";\nimport {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\nimport {FunctionsRequest} from \"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\";\n\nimport {VRFConsumerBaseV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\";\nimport {VRFV2PlusClient} from \"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract EnterTheChainlinkNFTMultiverse is\n    ERC721,\n    FunctionsClient,\n    VRFConsumerBaseV2Plus\n{\n    using FunctionsRequest for FunctionsRequest.Request;\n\n    /** STRUCTS */\n\n    struct VRFRequestStatus {\n        bool fulfilled;\n        bool exists;\n        uint256 tokenId;\n        address userWallet;\n        uint256[] randomWords;\n    }\n\n    struct FunctionsRequestInfo {\n        uint256 tokenId;\n        address userWallet;\n        bool isPending;\n    }\n\n    /** NFT VARIABLES */\n\n    bool public isPaused;\n\n    uint256 public tokenIdCounter;\n\n    string[] public multiverseApiSources;\n\n    string public lastFunctionCallbackStringResult;\n\n    mapping(uint256 => string) public tokenIdToNFTData;\n\n    /** CHAINLINK FUNCTIONS VARIABLES */\n\n    // Chainlink Functions subscription id, needed for the FunctionsClient\n    uint64 functionsSubscriptionId = 67;\n\n    // Mapping to track the request id for the Chainlink Functions node along with the user wallet and tokenId\n    mapping(bytes32 => FunctionsRequestInfo)\n        public chainlinkFunctionsRequestIdTracker;\n\n    // Arbitrum sepolia router, needed for the FunctionsClient\n    address public router = 0x234a5fb5Bd614a7AA2FfAB244D603abFA0Ac5C5C;\n\n    // Arbitrum Sepolia DON id, needed for the FunctionsClient\n    bytes32 donId =\n        0x66756e2d617262697472756d2d7365706f6c69612d3100000000000000000000;\n\n    // Function config, needed for the FunctionsClient\n    bytes32 public functionCallbackLastRequestId;\n    bytes public functionCallbackLastResponse;\n    bytes public functionCallbackLastError;\n    uint32 public functionGasLimit = 300000;\n\n    /** CHAINLINK VRF VARIABLES */\n\n    // Chainlink VRF subscription id, needed for the VRFConsumerBaseV2Plus\n    uint256 public vrfSubscriptionId =\n        40196134761291745625553019149610031040241889441326525117128810163757352880767;\n\n    // Mapping to track the request id for the Chainlink VRF node along with the tokenId and user wallet\n    mapping(uint256 => VRFRequestStatus) public chainlinkVRFRequestIdTracker;\n\n    // Arbitrum Sepolia key hash, needed for the VRFConsumerBaseV2Plus\n    bytes32 public arbitrumSepoliaKeyHash =\n        0x027f94ff1465b3525f9fc03e9ff7d6d2c0953482246dd6ae07570c45d6631414;\n\n    // VRF config, needed for the VRFConsumerBaseV2Plus\n    uint16 public vrfRequestConfirmations = 1;\n    uint32 public vrfNumWords = 1;\n    uint256[] public vrfRequestIds;\n    uint256 public vrfLastRequestId;\n    uint32 public vrfCallbackGasLimit = 100000;\n\n    // The VRF Coordinator address for the Arbitrum Sepolia network, needed for the VRFConsumerBaseV2Plus\n    address public vrfCoordinator = 0x5CE8D5A2BC84beb22a398CCA51996F7930313D61;\n\n    /** CHAINLINK FUNCTIONS EVENTS */\n\n    /** CHAINLINK VRF EVENTS */\n\n    event RequestSent(uint256 requestId, uint32 numWords);\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n\n    /** ERRORS */\n\n    error UnexpectedRequestID(bytes32 requestId);\n\n    /** API Sources , hardcoded but can be updated through helpers */\n\n    string public gameOfThronesSource =\n        \"const gotURL = `https://thronesapi.com/api/v2/Characters`;const rand = Math.floor(Math.random() * 50);const gotRequest = Functions.makeHttpRequest({url: gotURL,method: `GET`,});const gotResponse = await gotRequest;const gotData = gotResponse.data;const myData = {name: gotData[rand].fullName,image: gotData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\";\n    string public pokeSource =\n        \"const pokiURL = `https://pokeapi.co/api/v2/pokemon`;const rand = Math.floor(Math.random() * 1000);const pokemonCharacter = rand;const pokiRequest = Functions.makeHttpRequest({url: `${pokiURL}/${pokemonCharacter}`,method: `GET`,});const pokiResponse = await pokiRequest;const reqData = pokiResponse.data;const myData = {name: reqData.species.name,image: reqData.sprites.other.home.front_default,};return Functions.encodeString(JSON.stringify(myData));\";\n    string public disneySource =\n        \"const disneyURL = `https://api.disneyapi.dev/character`;const rand = Math.floor(Math.random() * 50);const disneyRequest = Functions.makeHttpRequest({url: disneyURL,method: `GET`,});const disneyResponse = await disneyRequest;const disneyData = disneyResponse.data.data;const myData = {name: disneyData[rand].name,image: disneyData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\";\n    string public hpSource =\n        \"const hpURL = `https://hp-api.onrender.com/api/characters`;const rand = Math.floor(Math.random() * 20);const hpRequest = Functions.makeHttpRequest({url: hpURL,method: `GET`,});const hpResponse = await hpRequest;const hpData = hpResponse.data;const myData = {name: hpData[rand].name,image: hpData[rand].image,};return Functions.encodeString(JSON.stringify(myData));\";\n\n    /** CONSTRUCTOR */\n\n    // Constructor inherits from the ERC721, FunctionsClient, and VRFConsumerBaseV2Plus contracts\n    constructor()\n        ERC721(\"ChainlinkMultiverse\", \"CLM\")\n        FunctionsClient(router)\n        VRFConsumerBaseV2Plus(vrfCoordinator)\n    {\n        // Fill the multiverseApiSources array with the API sources\n        multiverseApiSources.push(gameOfThronesSource);\n        multiverseApiSources.push(pokeSource);\n        multiverseApiSources.push(disneySource);\n        multiverseApiSources.push(hpSource);\n    }\n\n    /** EXTERNAL */\n\n    /**\n     * @notice Entry point for the user to mint an NFT, will kick off the VRF request\n     */\n    function mintRandomNFTRequest(address userWallet) external {\n        require(!isPaused, \"Contract is paused\");\n        // Increment the tokenId, this is the NFT id that will be minted to the user\n        tokenIdCounter++;\n        // Make request to the Chainlink node for a random number\n        uint256 requestId = s_vrfCoordinator.requestRandomWords(\n            VRFV2PlusClient.RandomWordsRequest({\n                keyHash: arbitrumSepoliaKeyHash,\n                subId: vrfSubscriptionId,\n                requestConfirmations: vrfRequestConfirmations,\n                callbackGasLimit: vrfCallbackGasLimit,\n                numWords: vrfNumWords,\n                extraArgs: VRFV2PlusClient._argsToBytes(\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\n                )\n            })\n        );\n        // Store the request id and the request status\n        chainlinkVRFRequestIdTracker[requestId] = VRFRequestStatus({\n            randomWords: new uint256[](0),\n            exists: true,\n            tokenId: tokenIdCounter,\n            userWallet: userWallet,\n            fulfilled: false\n        });\n        vrfRequestIds.push(requestId);\n        vrfLastRequestId = requestId;\n        emit RequestSent(requestId, vrfNumWords);\n    }\n\n    /** CHAINLINK SERVICES CALLBACK FUNCS */\n\n    /**\n     * @notice Callback function used by VRF Coordinator\n     * @dev Use the RandomWordsRequest response to select a random api source\n     */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] calldata randomWords\n    ) internal override {\n        // Update the VRF request status\n        VRFRequestStatus storage request = chainlinkVRFRequestIdTracker[\n            requestId\n        ];\n        request.randomWords = randomWords;\n        request.fulfilled = true;\n        // Pull the VRF random number from the response array\n        uint256 randomNumber = randomWords[0] % multiverseApiSources.length;\n        // Use the random number to select a random api source\n        string memory randomApiSource = multiverseApiSources[randomNumber];\n        // Use the random api source to make a request to the Chainlink node\n        // Build and initialize the request\n        FunctionsRequest.Request memory req;\n        req.initializeRequestForInlineJavaScript(randomApiSource);\n        // Send request to the Chainlink node\n        functionCallbackLastRequestId = _sendRequest(\n            req.encodeCBOR(),\n            functionsSubscriptionId,\n            functionGasLimit,\n            donId\n        );\n        // Track the request id for the Chainlink Function request\n        chainlinkFunctionsRequestIdTracker[\n            functionCallbackLastRequestId\n        ] = FunctionsRequestInfo({\n            tokenId: request.tokenId,\n            userWallet: request.userWallet,\n            isPending: true\n        });\n        // Emit the RequestFulfilled event\n        emit RequestFulfilled(requestId, randomWords);\n    }\n\n    /**\n     * @notice Callback function used by Chainlink Functions node\n     * @dev Use the response to get the metadata for an NFT and execute the mint of that NFT\n     */\n    function fulfillRequest(\n        bytes32 requestId,\n        bytes memory response,\n        bytes memory err\n    ) internal override {\n        require(\n            chainlinkFunctionsRequestIdTracker[requestId].isPending == true,\n            \"Invalid request id\"\n        );\n        // Store the callback response and error\n        functionCallbackLastError = err;\n        functionCallbackLastResponse = response;\n        // Store the last response as a string\n        lastFunctionCallbackStringResult = string(response);\n        // Set the request as not pending anymore\n        chainlinkFunctionsRequestIdTracker[requestId].isPending = false;\n        // Set the metadata string for the NFT\n        tokenIdToNFTData[\n            chainlinkFunctionsRequestIdTracker[requestId].tokenId\n        ] = lastFunctionCallbackStringResult;\n        // Mint the NFT\n        _safeMint(\n            chainlinkFunctionsRequestIdTracker[requestId].userWallet,\n            chainlinkFunctionsRequestIdTracker[requestId].tokenId\n        );\n    }\n\n    /** HELPERS */\n\n    /**\n     * @notice Pause the contract\n     */\n    function pause() external onlyOwner {\n        isPaused = true;\n    }\n\n    /**\n     * @notice Unpause the contract\n     */\n    function unpause() external onlyOwner {\n        isPaused = false;\n    }\n\n    /**\n     * @notice Add an API source to the multiverseApiSources array\n     */\n    function appendApiSource(string memory apiSource) external onlyOwner {\n        multiverseApiSources.push(apiSource);\n    }\n\n    /**\n     * @notice Remove an API source at a specific index\n     */\n    function removeApiSource(uint256 index) external onlyOwner {\n        require(index < multiverseApiSources.length, \"Index out of bounds\");\n        multiverseApiSources[index] = multiverseApiSources[\n            multiverseApiSources.length - 1\n        ];\n        multiverseApiSources.pop();\n    }\n\n    /**\n     * @notice Update an API source at a specific index\n     */\n    function updateApiSource(\n        uint256 index,\n        string memory apiSource\n    ) external onlyOwner {\n        require(index < multiverseApiSources.length, \"Index out of bounds\");\n        multiverseApiSources[index] = apiSource;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout","devdoc","userdoc","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol","exportedSymbols":{"FunctionsClient":[117],"FunctionsRequest":[728],"IFunctionsClient":[131],"IFunctionsRouter":[265]},"id":118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol","file":"./interfaces/IFunctionsRouter.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":118,"sourceUnit":266,"src":"58:67:0","symbolAliases":[{"foreign":{"id":2,"name":"IFunctionsRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"66:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol","file":"./interfaces/IFunctionsClient.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":118,"sourceUnit":132,"src":"126:67:0","symbolAliases":[{"foreign":{"id":4,"name":"IFunctionsClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"134:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol","file":"./libraries/FunctionsRequest.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":118,"sourceUnit":729,"src":"195:66:0","symbolAliases":[{"foreign":{"id":6,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"203:16:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"IFunctionsClient","nameLocations":["455:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"455:16:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"455:16:0"}],"canonicalName":"FunctionsClient","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"263:155:0","text":"@title The Chainlink Functions client contract\n @notice Contract developers can inherit this contract in order to make Chainlink Functions requests"},"fullyImplemented":false,"id":117,"linearizedBaseContracts":[117,131],"name":"FunctionsClient","nameLocation":"436:15:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":14,"libraryName":{"id":11,"name":"FunctionsRequest","nameLocations":["482:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":728,"src":"482:16:0"},"nodeType":"UsingForDirective","src":"476:52:0","typeName":{"id":13,"nodeType":"UserDefinedTypeName","pathNode":{"id":12,"name":"FunctionsRequest.Request","nameLocations":["503:16:0","520:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"503:24:0"},"referencedDeclaration":306,"src":"503:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}}},{"constant":false,"id":17,"mutability":"immutable","name":"i_router","nameLocation":"568:8:0","nodeType":"VariableDeclaration","scope":117,"src":"532:44:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"},"typeName":{"id":16,"nodeType":"UserDefinedTypeName","pathNode":{"id":15,"name":"IFunctionsRouter","nameLocations":["532:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":265,"src":"532:16:0"},"referencedDeclaration":265,"src":"532:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8","id":21,"name":"RequestSent","nameLocation":"587:11:0","nodeType":"EventDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"615:2:0","nodeType":"VariableDeclaration","scope":21,"src":"599:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":18,"name":"bytes32","nodeType":"ElementaryTypeName","src":"599:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"598:20:0"},"src":"581:38:0"},{"anonymous":false,"eventSelector":"85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6","id":25,"name":"RequestFulfilled","nameLocation":"628:16:0","nodeType":"EventDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":23,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"661:2:0","nodeType":"VariableDeclaration","scope":25,"src":"645:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":22,"name":"bytes32","nodeType":"ElementaryTypeName","src":"645:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"644:20:0"},"src":"622:43:0"},{"errorSelector":"c6829f83","id":27,"name":"OnlyRouterCanFulfill","nameLocation":"675:20:0","nodeType":"ErrorDefinition","parameters":{"id":26,"nodeType":"ParameterList","parameters":[],"src":"695:2:0"},"src":"669:29:0"},{"body":{"id":38,"nodeType":"Block","src":"730:46:0","statements":[{"expression":{"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":32,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"736:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":34,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"764:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":33,"name":"IFunctionsRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":265,"src":"747:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFunctionsRouter_$265_$","typeString":"type(contract IFunctionsRouter)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}},"src":"736:35:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}},"id":37,"nodeType":"ExpressionStatement","src":"736:35:0"}]},"id":39,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"router","nameLocation":"722:6:0","nodeType":"VariableDeclaration","scope":39,"src":"714:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"713:16:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[],"src":"730:0:0"},"scope":117,"src":"702:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":71,"nodeType":"Block","src":"1309:228:0","statements":[{"assignments":[54],"declarations":[{"constant":false,"id":54,"mutability":"mutable","name":"requestId","nameLocation":"1323:9:0","nodeType":"VariableDeclaration","scope":71,"src":"1315:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":53,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1315:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":64,"initialValue":{"arguments":[{"id":57,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"1363:14:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":58,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1385:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":59,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"1397:16:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FunctionsRequest_$728_$","typeString":"type(library FunctionsRequest)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1414:20:0","memberName":"REQUEST_DATA_VERSION","nodeType":"MemberAccess","referencedDeclaration":277,"src":"1397:37:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":61,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"1442:16:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":62,"name":"donId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"1466:5:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":55,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"1335:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1344:11:0","memberName":"sendRequest","nodeType":"MemberAccess","referencedDeclaration":170,"src":"1335:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint64_$_t_bytes_memory_ptr_$_t_uint16_$_t_uint32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (uint64,bytes memory,uint16,uint32,bytes32) external returns (bytes32)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1335:142:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1315:162:0"},{"eventCall":{"arguments":[{"id":66,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1500:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":65,"name":"RequestSent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"1488:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1488:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":68,"nodeType":"EmitStatement","src":"1483:27:0"},{"expression":{"id":69,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1523:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":52,"id":70,"nodeType":"Return","src":"1516:16:0"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"780:375:0","text":"@notice Sends a Chainlink Functions request\n @param data The CBOR encoded bytes data for a Functions request\n @param subscriptionId The subscription ID that will be charged to service the request\n @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\n @return requestId The generated request ID for this request"},"id":72,"implemented":true,"kind":"function","modifiers":[],"name":"_sendRequest","nameLocation":"1167:12:0","nodeType":"FunctionDefinition","parameters":{"id":49,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"data","nameLocation":"1198:4:0","nodeType":"VariableDeclaration","scope":72,"src":"1185:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":41,"name":"bytes","nodeType":"ElementaryTypeName","src":"1185:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"subscriptionId","nameLocation":"1215:14:0","nodeType":"VariableDeclaration","scope":72,"src":"1208:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":43,"name":"uint64","nodeType":"ElementaryTypeName","src":"1208:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":46,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1242:16:0","nodeType":"VariableDeclaration","scope":72,"src":"1235:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":45,"name":"uint32","nodeType":"ElementaryTypeName","src":"1235:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":48,"mutability":"mutable","name":"donId","nameLocation":"1272:5:0","nodeType":"VariableDeclaration","scope":72,"src":"1264:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":47,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1264:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1179:102:0"},"returnParameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":72,"src":"1300:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":50,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1300:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1299:9:0"},"scope":117,"src":"1158:379:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":73,"nodeType":"StructuredDocumentation","src":"1541:394:0","text":"@notice User defined function to handle a response from the DON\n @param requestId The request ID, returned by sendRequest()\n @param response Aggregated response from the execution of the user's source code\n @param err Aggregated error from the execution of the user code or from the execution pipeline\n @dev Either response or error parameter will be set, but never both"},"id":82,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"1947:14:0","nodeType":"FunctionDefinition","parameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":75,"mutability":"mutable","name":"requestId","nameLocation":"1970:9:0","nodeType":"VariableDeclaration","scope":82,"src":"1962:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":74,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1962:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"response","nameLocation":"1994:8:0","nodeType":"VariableDeclaration","scope":82,"src":"1981:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":76,"name":"bytes","nodeType":"ElementaryTypeName","src":"1981:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"err","nameLocation":"2017:3:0","nodeType":"VariableDeclaration","scope":82,"src":"2004:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":78,"name":"bytes","nodeType":"ElementaryTypeName","src":"2004:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1961:60:0"},"returnParameters":{"id":81,"nodeType":"ParameterList","parameters":[],"src":"2038:0:0"},"scope":117,"src":"1938:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[130],"body":{"id":115,"nodeType":"Block","src":"2189:175:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":93,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"2199:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2203:6:0","memberName":"sender","nodeType":"MemberAccess","src":"2199:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":97,"name":"i_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17,"src":"2221:8:0","typeDescriptions":{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IFunctionsRouter_$265","typeString":"contract IFunctionsRouter"}],"id":96,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2213:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":95,"name":"address","nodeType":"ElementaryTypeName","src":"2213:7:0","typeDescriptions":{}}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2213:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2199:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":104,"nodeType":"IfStatement","src":"2195:81:0","trueBody":{"id":103,"nodeType":"Block","src":"2232:44:0","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":100,"name":"OnlyRouterCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2247:20:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":102,"nodeType":"RevertStatement","src":"2240:29:0"}]}},{"expression":{"arguments":[{"id":106,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2296:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":107,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"2307:8:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":108,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"2317:3:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":105,"name":"fulfillRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2281:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes32,bytes memory,bytes memory)"}},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":110,"nodeType":"ExpressionStatement","src":"2281:40:0"},{"eventCall":{"arguments":[{"id":112,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2349:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":111,"name":"RequestFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"2332:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2332:27:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":114,"nodeType":"EmitStatement","src":"2327:32:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2043:32:0","text":"@inheritdoc IFunctionsClient"},"functionSelector":"0ca76175","id":116,"implemented":true,"kind":"function","modifiers":[],"name":"handleOracleFulfillment","nameLocation":"2087:23:0","nodeType":"FunctionDefinition","overrides":{"id":91,"nodeType":"OverrideSpecifier","overrides":[],"src":"2180:8:0"},"parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"requestId","nameLocation":"2119:9:0","nodeType":"VariableDeclaration","scope":116,"src":"2111:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":84,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":87,"mutability":"mutable","name":"response","nameLocation":"2143:8:0","nodeType":"VariableDeclaration","scope":116,"src":"2130:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":86,"name":"bytes","nodeType":"ElementaryTypeName","src":"2130:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":89,"mutability":"mutable","name":"err","nameLocation":"2166:3:0","nodeType":"VariableDeclaration","scope":116,"src":"2153:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":88,"name":"bytes","nodeType":"ElementaryTypeName","src":"2153:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2110:60:0"},"returnParameters":{"id":92,"nodeType":"ParameterList","parameters":[],"src":"2189:0:0"},"scope":117,"src":"2078:286:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":118,"src":"418:1948:0","usedErrors":[27],"usedEvents":[21,25]}],"src":"32:2335:0"},"id":0},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol","exportedSymbols":{"IFunctionsClient":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":119,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IFunctionsClient","contractDependencies":[],"contractKind":"interface","documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"58:49:1","text":"@title Chainlink Functions client interface."},"fullyImplemented":false,"id":131,"linearizedBaseContracts":[131],"name":"IFunctionsClient","nameLocation":"117:16:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"138:490:1","text":"@notice Chainlink Functions response handler called by the Functions Router\n during fullilment from the designated transmitter node in an OCR round.\n @param requestId The requestId returned by FunctionsClient.sendRequest().\n @param response Aggregated response from the request's source code.\n @param err Aggregated error either from the request's source code or from the execution pipeline.\n @dev Either response or error parameter will be set, but never both."},"functionSelector":"0ca76175","id":130,"implemented":false,"kind":"function","modifiers":[],"name":"handleOracleFulfillment","nameLocation":"640:23:1","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"requestId","nameLocation":"672:9:1","nodeType":"VariableDeclaration","scope":130,"src":"664:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"664:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":125,"mutability":"mutable","name":"response","nameLocation":"696:8:1","nodeType":"VariableDeclaration","scope":130,"src":"683:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":124,"name":"bytes","nodeType":"ElementaryTypeName","src":"683:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"err","nameLocation":"719:3:1","nodeType":"VariableDeclaration","scope":130,"src":"706:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":126,"name":"bytes","nodeType":"ElementaryTypeName","src":"706:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"663:60:1"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[],"src":"732:0:1"},"scope":131,"src":"631:102:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":132,"src":"107:628:1","usedErrors":[],"usedEvents":[]}],"src":"32:704:1"},"id":1},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol","exportedSymbols":{"FunctionsResponse":[786],"IFunctionsRouter":[265]},"id":266,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol","file":"../libraries/FunctionsResponse.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":266,"sourceUnit":787,"src":"58:69:2","symbolAliases":[{"foreign":{"id":134,"name":"FunctionsResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"66:17:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IFunctionsRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":136,"nodeType":"StructuredDocumentation","src":"129:49:2","text":"@title Chainlink Functions Router interface."},"fullyImplemented":false,"id":265,"linearizedBaseContracts":[265],"name":"IFunctionsRouter","nameLocation":"188:16:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"209:265:2","text":"@notice The identifier of the route to retrieve the address of the access control contract\n The access control contract controls which accounts can manage subscriptions\n @return id - bytes32 id that can be passed to the \"getContractById\" of the Router"},"functionSelector":"aab396bd","id":142,"implemented":false,"kind":"function","modifiers":[],"name":"getAllowListId","nameLocation":"486:14:2","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[],"src":"500:2:2"},"returnParameters":{"id":141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":142,"src":"526:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"526:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"525:9:2"},"scope":265,"src":"477:58:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"539:181:2","text":"@notice Set the identifier of the route to retrieve the address of the access control contract\n The access control contract controls which accounts can manage subscriptions"},"functionSelector":"ea320e0b","id":148,"implemented":false,"kind":"function","modifiers":[],"name":"setAllowListId","nameLocation":"732:14:2","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"allowListId","nameLocation":"755:11:2","nodeType":"VariableDeclaration","scope":148,"src":"747:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"747:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"746:21:2"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"776:0:2"},"scope":265,"src":"723:54:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"781:137:2","text":"@notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\n @return adminFee"},"functionSelector":"2a905ccc","id":154,"implemented":false,"kind":"function","modifiers":[],"name":"getAdminFee","nameLocation":"930:11:2","nodeType":"FunctionDefinition","parameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"941:2:2"},"returnParameters":{"id":153,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"adminFee","nameLocation":"974:8:2","nodeType":"VariableDeclaration","scope":154,"src":"967:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":151,"name":"uint72","nodeType":"ElementaryTypeName","src":"967:6:2","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"}],"src":"966:17:2"},"scope":265,"src":"921:63:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"988:630:2","text":"@notice Sends a request using the provided subscriptionId\n @param subscriptionId - A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param dataVersion - Gas limit for the fulfillment callback\n @param callbackGasLimit - Gas limit for the fulfillment callback\n @param donId - An identifier used to determine which route to send the request along\n @return requestId - A unique request identifier"},"functionSelector":"461d2762","id":170,"implemented":false,"kind":"function","modifiers":[],"name":"sendRequest","nameLocation":"1630:11:2","nodeType":"FunctionDefinition","parameters":{"id":166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"subscriptionId","nameLocation":"1654:14:2","nodeType":"VariableDeclaration","scope":170,"src":"1647:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":156,"name":"uint64","nodeType":"ElementaryTypeName","src":"1647:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"data","nameLocation":"1689:4:2","nodeType":"VariableDeclaration","scope":170,"src":"1674:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":158,"name":"bytes","nodeType":"ElementaryTypeName","src":"1674:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"dataVersion","nameLocation":"1706:11:2","nodeType":"VariableDeclaration","scope":170,"src":"1699:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":160,"name":"uint16","nodeType":"ElementaryTypeName","src":"1699:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1730:16:2","nodeType":"VariableDeclaration","scope":170,"src":"1723:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":162,"name":"uint32","nodeType":"ElementaryTypeName","src":"1723:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":165,"mutability":"mutable","name":"donId","nameLocation":"1760:5:2","nodeType":"VariableDeclaration","scope":170,"src":"1752:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1641:128:2"},"returnParameters":{"id":169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":170,"src":"1788:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":167,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1788:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1787:9:2"},"scope":265,"src":"1621:176:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":171,"nodeType":"StructuredDocumentation","src":"1801:622:2","text":"@notice Sends a request to the proposed contracts\n @param subscriptionId - A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param dataVersion - Gas limit for the fulfillment callback\n @param callbackGasLimit - Gas limit for the fulfillment callback\n @param donId - An identifier used to determine which route to send the request along\n @return requestId - A unique request identifier"},"functionSelector":"41db4ca3","id":186,"implemented":false,"kind":"function","modifiers":[],"name":"sendRequestToProposed","nameLocation":"2435:21:2","nodeType":"FunctionDefinition","parameters":{"id":182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":173,"mutability":"mutable","name":"subscriptionId","nameLocation":"2469:14:2","nodeType":"VariableDeclaration","scope":186,"src":"2462:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":172,"name":"uint64","nodeType":"ElementaryTypeName","src":"2462:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"data","nameLocation":"2504:4:2","nodeType":"VariableDeclaration","scope":186,"src":"2489:19:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":174,"name":"bytes","nodeType":"ElementaryTypeName","src":"2489:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":177,"mutability":"mutable","name":"dataVersion","nameLocation":"2521:11:2","nodeType":"VariableDeclaration","scope":186,"src":"2514:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":176,"name":"uint16","nodeType":"ElementaryTypeName","src":"2514:6:2","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":179,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2545:16:2","nodeType":"VariableDeclaration","scope":186,"src":"2538:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":178,"name":"uint32","nodeType":"ElementaryTypeName","src":"2538:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"donId","nameLocation":"2575:5:2","nodeType":"VariableDeclaration","scope":186,"src":"2567:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2567:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2456:128:2"},"returnParameters":{"id":185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":186,"src":"2603:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2603:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2602:9:2"},"scope":265,"src":"2426:186:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"2616:763:2","text":"@notice Fulfill the request by:\n - calling back the data that the Oracle returned to the client contract\n - pay the DON for processing the request\n @dev Only callable by the Coordinator contract that is saved in the commitment\n @param response response data from DON consensus\n @param err error from DON consensus\n @param juelsPerGas - current rate of juels/gas\n @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\n @param transmitter - The Node that transmitted the OCR report\n @param commitment - The parameters of the request that must be held consistent between request and response time\n @return fulfillResult -\n @return callbackGasCostJuels -"},"functionSelector":"33060529","id":208,"implemented":false,"kind":"function","modifiers":[],"name":"fulfill","nameLocation":"3391:7:2","nodeType":"FunctionDefinition","parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"response","nameLocation":"3417:8:2","nodeType":"VariableDeclaration","scope":208,"src":"3404:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":188,"name":"bytes","nodeType":"ElementaryTypeName","src":"3404:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"err","nameLocation":"3444:3:2","nodeType":"VariableDeclaration","scope":208,"src":"3431:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":190,"name":"bytes","nodeType":"ElementaryTypeName","src":"3431:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":193,"mutability":"mutable","name":"juelsPerGas","nameLocation":"3460:11:2","nodeType":"VariableDeclaration","scope":208,"src":"3453:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":192,"name":"uint96","nodeType":"ElementaryTypeName","src":"3453:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"costWithoutFulfillment","nameLocation":"3484:22:2","nodeType":"VariableDeclaration","scope":208,"src":"3477:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":194,"name":"uint96","nodeType":"ElementaryTypeName","src":"3477:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"transmitter","nameLocation":"3520:11:2","nodeType":"VariableDeclaration","scope":208,"src":"3512:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"3512:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":200,"mutability":"mutable","name":"commitment","nameLocation":"3573:10:2","nodeType":"VariableDeclaration","scope":208,"src":"3537:46:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Commitment_$785_memory_ptr","typeString":"struct FunctionsResponse.Commitment"},"typeName":{"id":199,"nodeType":"UserDefinedTypeName","pathNode":{"id":198,"name":"FunctionsResponse.Commitment","nameLocations":["3537:17:2","3555:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":785,"src":"3537:28:2"},"referencedDeclaration":785,"src":"3537:28:2","typeDescriptions":{"typeIdentifier":"t_struct$_Commitment_$785_storage_ptr","typeString":"struct FunctionsResponse.Commitment"}},"visibility":"internal"}],"src":"3398:189:2"},"returnParameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":208,"src":"3606:31:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FulfillResult_$762","typeString":"enum FunctionsResponse.FulfillResult"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"FunctionsResponse.FulfillResult","nameLocations":["3606:17:2","3624:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":762,"src":"3606:31:2"},"referencedDeclaration":762,"src":"3606:31:2","typeDescriptions":{"typeIdentifier":"t_enum$_FulfillResult_$762","typeString":"enum FunctionsResponse.FulfillResult"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":208,"src":"3639:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":205,"name":"uint96","nodeType":"ElementaryTypeName","src":"3639:6:2","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"3605:41:2"},"scope":265,"src":"3382:265:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"3651:172:2","text":"@notice Validate requested gas limit is below the subscription max.\n @param subscriptionId subscription ID\n @param callbackGasLimit desired callback gas limit"},"functionSelector":"10fc49c1","id":216,"implemented":false,"kind":"function","modifiers":[],"name":"isValidCallbackGasLimit","nameLocation":"3835:23:2","nodeType":"FunctionDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"subscriptionId","nameLocation":"3866:14:2","nodeType":"VariableDeclaration","scope":216,"src":"3859:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":210,"name":"uint64","nodeType":"ElementaryTypeName","src":"3859:6:2","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":213,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"3889:16:2","nodeType":"VariableDeclaration","scope":216,"src":"3882:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":212,"name":"uint32","nodeType":"ElementaryTypeName","src":"3882:6:2","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3858:48:2"},"returnParameters":{"id":215,"nodeType":"ParameterList","parameters":[],"src":"3920:0:2"},"scope":265,"src":"3826:95:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"3925:151:2","text":"@notice Get the current contract given an ID\n @param id A bytes32 identifier for the route\n @return contract The current contract address"},"functionSelector":"a9c9a918","id":224,"implemented":false,"kind":"function","modifiers":[],"name":"getContractById","nameLocation":"4088:15:2","nodeType":"FunctionDefinition","parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"id","nameLocation":"4112:2:2","nodeType":"VariableDeclaration","scope":224,"src":"4104:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":218,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4104:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4103:12:2"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":224,"src":"4139:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4138:9:2"},"scope":265,"src":"4079:69:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":225,"nodeType":"StructuredDocumentation","src":"4152:169:2","text":"@notice Get the proposed next contract given an ID\n @param id A bytes32 identifier for the route\n @return contract The current or proposed contract address"},"functionSelector":"6a2215de","id":232,"implemented":false,"kind":"function","modifiers":[],"name":"getProposedContractById","nameLocation":"4333:23:2","nodeType":"FunctionDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"id","nameLocation":"4365:2:2","nodeType":"VariableDeclaration","scope":232,"src":"4357:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4357:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4356:12:2"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":230,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":232,"src":"4392:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":229,"name":"address","nodeType":"ElementaryTypeName","src":"4392:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4391:9:2"},"scope":265,"src":"4324:77:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":233,"nodeType":"StructuredDocumentation","src":"4405:176:2","text":"@notice Return the latest proprosal set\n @return ids The identifiers of the contracts to update\n @return to The addresses of the contracts that will be updated to"},"functionSelector":"badc3eb6","id":242,"implemented":false,"kind":"function","modifiers":[],"name":"getProposedContractSet","nameLocation":"4593:22:2","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[],"src":"4615:2:2"},"returnParameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":242,"src":"4641:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4641:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":236,"nodeType":"ArrayTypeName","src":"4641:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":242,"src":"4659:16:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"4659:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":239,"nodeType":"ArrayTypeName","src":"4659:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4640:36:2"},"scope":265,"src":"4584:93:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":243,"nodeType":"StructuredDocumentation","src":"4681:97:2","text":"@notice Proposes one or more updates to the contract routes\n @dev Only callable by owner"},"functionSelector":"3e871e4d","id":252,"implemented":false,"kind":"function","modifiers":[],"name":"proposeContractsUpdate","nameLocation":"4790:22:2","nodeType":"FunctionDefinition","parameters":{"id":250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"mutability":"mutable","name":"proposalSetIds","nameLocation":"4830:14:2","nodeType":"VariableDeclaration","scope":252,"src":"4813:31:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4813:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":245,"nodeType":"ArrayTypeName","src":"4813:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":249,"mutability":"mutable","name":"proposalSetAddresses","nameLocation":"4863:20:2","nodeType":"VariableDeclaration","scope":252,"src":"4846:37:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"4846:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":248,"nodeType":"ArrayTypeName","src":"4846:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"4812:72:2"},"returnParameters":{"id":251,"nodeType":"ParameterList","parameters":[],"src":"4893:0:2"},"scope":265,"src":"4781:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"4898:107:2","text":"@notice Updates the current contract routes to the proposed contracts\n @dev Only callable by owner"},"functionSelector":"b734c0f4","id":256,"implemented":false,"kind":"function","modifiers":[],"name":"updateContracts","nameLocation":"5017:15:2","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"5032:2:2"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"5043:0:2"},"scope":265,"src":"5008:36:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"5048:91:2","text":"@dev Puts the system into an emergency stopped state.\n @dev Only callable by owner"},"functionSelector":"8456cb59","id":260,"implemented":false,"kind":"function","modifiers":[],"name":"pause","nameLocation":"5151:5:2","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"5156:2:2"},"returnParameters":{"id":259,"nodeType":"ParameterList","parameters":[],"src":"5167:0:2"},"scope":265,"src":"5142:26:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"5172:94:2","text":"@dev Takes the system out of an emergency stopped state.\n @dev Only callable by owner"},"functionSelector":"3f4ba83a","id":264,"implemented":false,"kind":"function","modifiers":[],"name":"unpause","nameLocation":"5278:7:2","nodeType":"FunctionDefinition","parameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"5285:2:2"},"returnParameters":{"id":263,"nodeType":"ParameterList","parameters":[],"src":"5296:0:2"},"scope":265,"src":"5269:28:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":266,"src":"178:5121:2","usedErrors":[],"usedEvents":[]}],"src":"32:5268:2"},"id":2},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol","exportedSymbols":{"CBOR":[2267],"FunctionsRequest":[728]},"id":729,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":267,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol","file":"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol","id":269,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":729,"sourceUnit":2268,"src":"58:72:3","symbolAliases":[{"foreign":{"id":268,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"66:4:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FunctionsRequest","contractDependencies":[],"contractKind":"library","documentation":{"id":270,"nodeType":"StructuredDocumentation","src":"132:80:3","text":"@title Library for encoding the input data of a Functions request into CBOR"},"fullyImplemented":true,"id":728,"linearizedBaseContracts":[728],"name":"FunctionsRequest","nameLocation":"220:16:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":274,"libraryName":{"id":271,"name":"CBOR","nameLocations":["247:4:3"],"nodeType":"IdentifierPath","referencedDeclaration":2267,"src":"247:4:3"},"nodeType":"UsingForDirective","src":"241:31:3","typeName":{"id":273,"nodeType":"UserDefinedTypeName","pathNode":{"id":272,"name":"CBOR.CBORBuffer","nameLocations":["256:4:3","261:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"256:15:3"},"referencedDeclaration":1422,"src":"256:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}}},{"constant":true,"functionSelector":"5d641dfc","id":277,"mutability":"constant","name":"REQUEST_DATA_VERSION","nameLocation":"299:20:3","nodeType":"VariableDeclaration","scope":728,"src":"276:47:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":275,"name":"uint16","nodeType":"ElementaryTypeName","src":"276:6:3","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"322:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"id":280,"mutability":"constant","name":"DEFAULT_BUFFER_SIZE","nameLocation":"353:19:3","nodeType":"VariableDeclaration","scope":728,"src":"327:51:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":278,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323536","id":279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:3:3","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"visibility":"internal"},{"canonicalName":"FunctionsRequest.Location","id":284,"members":[{"id":281,"name":"Inline","nameLocation":"403:6:3","nodeType":"EnumValue","src":"403:6:3"},{"id":282,"name":"Remote","nameLocation":"446:6:3","nodeType":"EnumValue","src":"446:6:3"},{"id":283,"name":"DONHosted","nameLocation":"536:9:3","nodeType":"EnumValue","src":"536:9:3"}],"name":"Location","nameLocation":"388:8:3","nodeType":"EnumDefinition","src":"383:197:3"},{"canonicalName":"FunctionsRequest.CodeLanguage","id":286,"members":[{"id":285,"name":"JavaScript","nameLocation":"608:10:3","nodeType":"EnumValue","src":"608:10:3"}],"name":"CodeLanguage","nameLocation":"589:12:3","nodeType":"EnumDefinition","src":"584:90:3"},{"canonicalName":"FunctionsRequest.Request","id":306,"members":[{"constant":false,"id":289,"mutability":"mutable","name":"codeLocation","nameLocation":"708:12:3","nodeType":"VariableDeclaration","scope":306,"src":"699:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":288,"nodeType":"UserDefinedTypeName","pathNode":{"id":287,"name":"Location","nameLocations":["699:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"699:8:3"},"referencedDeclaration":284,"src":"699:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":292,"mutability":"mutable","name":"secretsLocation","nameLocation":"856:15:3","nodeType":"VariableDeclaration","scope":306,"src":"847:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":291,"nodeType":"UserDefinedTypeName","pathNode":{"id":290,"name":"Location","nameLocations":["847:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"847:8:3"},"referencedDeclaration":284,"src":"847:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"language","nameLocation":"1025:8:3","nodeType":"VariableDeclaration","scope":306,"src":"1012:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"CodeLanguage","nameLocations":["1012:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":286,"src":"1012:12:3"},"referencedDeclaration":286,"src":"1012:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":297,"mutability":"mutable","name":"source","nameLocation":"1144:6:3","nodeType":"VariableDeclaration","scope":306,"src":"1137:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":296,"name":"string","nodeType":"ElementaryTypeName","src":"1137:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":299,"mutability":"mutable","name":"encryptedSecretsReference","nameLocation":"1409:25:3","nodeType":"VariableDeclaration","scope":306,"src":"1403:31:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":298,"name":"bytes","nodeType":"ElementaryTypeName","src":"1403:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":302,"mutability":"mutable","name":"args","nameLocation":"1662:4:3","nodeType":"VariableDeclaration","scope":306,"src":"1653:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":300,"name":"string","nodeType":"ElementaryTypeName","src":"1653:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":301,"nodeType":"ArrayTypeName","src":"1653:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"bytesArgs","nameLocation":"1805:9:3","nodeType":"VariableDeclaration","scope":306,"src":"1797:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":303,"name":"bytes","nodeType":"ElementaryTypeName","src":"1797:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":304,"nodeType":"ArrayTypeName","src":"1797:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"name":"Request","nameLocation":"685:7:3","nodeType":"StructDefinition","scope":728,"src":"678:1253:3","visibility":"public"},{"errorSelector":"22ce3edd","id":308,"name":"EmptySource","nameLocation":"1941:11:3","nodeType":"ErrorDefinition","parameters":{"id":307,"nodeType":"ParameterList","parameters":[],"src":"1952:2:3"},"src":"1935:20:3"},{"errorSelector":"e889636f","id":310,"name":"EmptySecrets","nameLocation":"1964:12:3","nodeType":"ErrorDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[],"src":"1976:2:3"},"src":"1958:21:3"},{"errorSelector":"fe936cb7","id":312,"name":"EmptyArgs","nameLocation":"1988:9:3","nodeType":"ErrorDefinition","parameters":{"id":311,"nodeType":"ParameterList","parameters":[],"src":"1997:2:3"},"src":"1982:18:3"},{"errorSelector":"a80d31f7","id":314,"name":"NoInlineSecrets","nameLocation":"2009:15:3","nodeType":"ErrorDefinition","parameters":{"id":313,"nodeType":"ParameterList","parameters":[],"src":"2024:2:3"},"src":"2003:24:3"},{"body":{"id":520,"nodeType":"Block","src":"2236:1192:3","statements":[{"assignments":[327],"declarations":[{"constant":false,"id":327,"mutability":"mutable","name":"buffer","nameLocation":"2265:6:3","nodeType":"VariableDeclaration","scope":520,"src":"2242:29:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":326,"nodeType":"UserDefinedTypeName","pathNode":{"id":325,"name":"CBOR.CBORBuffer","nameLocations":["2242:4:3","2247:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"2242:15:3"},"referencedDeclaration":1422,"src":"2242:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"id":332,"initialValue":{"arguments":[{"id":330,"name":"DEFAULT_BUFFER_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"2286:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":328,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"2274:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CBOR_$2267_$","typeString":"type(library CBOR)"}},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2279:6:3","memberName":"create","nodeType":"MemberAccess","referencedDeclaration":1489,"src":"2274:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (uint256) pure returns (struct CBOR.CBORBuffer memory)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"nodeType":"VariableDeclarationStatement","src":"2242:64:3"},{"expression":{"arguments":[{"hexValue":"636f64654c6f636174696f6e","id":336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2332:14:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""},"value":"codeLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_82e791741c7274b123c7599c398a59441cc81a8ed229387daff72172292ba931","typeString":"literal_string \"codeLocation\""}],"expression":{"id":333,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2313:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2320:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2313:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2313:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":338,"nodeType":"ExpressionStatement","src":"2313:34:3"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":344,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2381:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2386:12:3","memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":289,"src":"2381:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}],"id":343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2373:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":342,"name":"uint256","nodeType":"ElementaryTypeName","src":"2373:7:3","typeDescriptions":{}}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2373:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":339,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2353:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":341,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2360:12:3","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1543,"src":"2353:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2353:47:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"2353:47:3"},{"expression":{"arguments":[{"hexValue":"6c616e6775616765","id":352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:10:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""},"value":"language"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_829231cb167e02f32beea96e7533af0ebdf9e1f7ccf9a7270e717c48fe6f0e8e","typeString":"literal_string \"language\""}],"expression":{"id":349,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2407:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2414:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2407:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":354,"nodeType":"ExpressionStatement","src":"2407:30:3"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":360,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2471:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":361,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2476:8:3","memberName":"language","nodeType":"MemberAccess","referencedDeclaration":295,"src":"2471:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}],"id":359,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2463:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"2463:7:3","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2463:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":355,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2443:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2450:12:3","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1543,"src":"2443:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2443:43:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":364,"nodeType":"ExpressionStatement","src":"2443:43:3"},{"expression":{"arguments":[{"hexValue":"736f75726365","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2512:8:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""},"value":"source"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_f7e3126f87228afb82c9b18537eed25aaeb8171a78814781c26ed2cfeff27e69","typeString":"literal_string \"source\""}],"expression":{"id":365,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2493:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":367,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2500:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2493:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":370,"nodeType":"ExpressionStatement","src":"2493:28:3"},{"expression":{"arguments":[{"expression":{"id":374,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2546:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":375,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2551:6:3","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":297,"src":"2546:11:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":371,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2527:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2534:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2527:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2527:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":377,"nodeType":"ExpressionStatement","src":"2527:31:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":378,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2569:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2574:4:3","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":302,"src":"2569:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:6:3","memberName":"length","nodeType":"MemberAccess","src":"2569:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2588:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2569:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":423,"nodeType":"IfStatement","src":"2565:227:3","trueBody":{"id":422,"nodeType":"Block","src":"2591:201:3","statements":[{"expression":{"arguments":[{"hexValue":"61726773","id":386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2618:6:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""},"value":"args"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e5edaa566e23eea054bbd292b7924839b5627321873e67e30cd0052468eaf099","typeString":"literal_string \"args\""}],"expression":{"id":383,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2599:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2606:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2599:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2599:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":388,"nodeType":"ExpressionStatement","src":"2599:26:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":389,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2633:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2640:10:3","memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":1766,"src":"2633:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2633:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":393,"nodeType":"ExpressionStatement","src":"2633:19:3"},{"body":{"id":415,"nodeType":"Block","src":"2707:51:3","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":409,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2736:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2741:4:3","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":302,"src":"2736:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":412,"indexExpression":{"id":411,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2746:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2736:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":406,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2717:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2724:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2717:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":414,"nodeType":"ExpressionStatement","src":"2717:32:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2680:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":399,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2684:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2689:4:3","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":302,"src":"2684:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2694:6:3","memberName":"length","nodeType":"MemberAccess","src":"2684:16:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2680:20:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":416,"initializationExpression":{"assignments":[395],"declarations":[{"constant":false,"id":395,"mutability":"mutable","name":"i","nameLocation":"2673:1:3","nodeType":"VariableDeclaration","scope":416,"src":"2665:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"2665:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":397,"initialValue":{"hexValue":"30","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2677:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2665:13:3"},"loopExpression":{"expression":{"id":404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2702:3:3","subExpression":{"id":403,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":395,"src":"2704:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":405,"nodeType":"ExpressionStatement","src":"2702:3:3"},"nodeType":"ForStatement","src":"2660:98:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":417,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2765:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":419,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2772:11:3","memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":1832,"src":"2765:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"ExpressionStatement","src":"2765:20:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":424,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2802:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":425,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2807:25:3","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":299,"src":"2802:30:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2833:6:3","memberName":"length","nodeType":"MemberAccess","src":"2802:37:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2842:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2802:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":469,"nodeType":"IfStatement","src":"2798:346:3","trueBody":{"id":468,"nodeType":"Block","src":"2845:299:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"},"id":433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":429,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"2857:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2862:15:3","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":292,"src":"2857:20:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":431,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"2881:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$284_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2890:6:3","memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":281,"src":"2881:15:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"src":"2857:39:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":438,"nodeType":"IfStatement","src":"2853:88:3","trueBody":{"id":437,"nodeType":"Block","src":"2898:43:3","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":434,"name":"NoInlineSecrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"2915:15:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2915:17:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":436,"nodeType":"RevertStatement","src":"2908:24:3"}]}},{"expression":{"arguments":[{"hexValue":"736563726574734c6f636174696f6e","id":442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2967:17:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""},"value":"secretsLocation"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_fc4236fa30b862c671ead413b1a0f61e653ce5b99e29091ee0dc6fc114ee9cc8","typeString":"literal_string \"secretsLocation\""}],"expression":{"id":439,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2948:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2955:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2948:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2948:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":444,"nodeType":"ExpressionStatement","src":"2948:37:3"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":450,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3021:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3026:15:3","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":292,"src":"3021:20:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}],"id":449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3013:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":448,"name":"uint256","nodeType":"ElementaryTypeName","src":"3013:7:3","typeDescriptions":{}}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3013:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":445,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"2993:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3000:12:3","memberName":"writeUInt256","nodeType":"MemberAccess","referencedDeclaration":1543,"src":"2993:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint256_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2993:50:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":454,"nodeType":"ExpressionStatement","src":"2993:50:3"},{"expression":{"arguments":[{"hexValue":"73656372657473","id":458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3070:9:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""},"value":"secrets"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_d66480a2fe9622f21e4ac7cf8871545e676a686cade1079d79e2fb1df6a4f3ac","typeString":"literal_string \"secrets\""}],"expression":{"id":455,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3051:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":457,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3058:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"3051:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3051:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":460,"nodeType":"ExpressionStatement","src":"3051:29:3"},{"expression":{"arguments":[{"expression":{"id":464,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3106:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3111:25:3","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":299,"src":"3106:30:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":461,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3088:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":463,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3095:10:3","memberName":"writeBytes","nodeType":"MemberAccess","referencedDeclaration":1674,"src":"3088:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3088:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":467,"nodeType":"ExpressionStatement","src":"3088:49:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":470,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3154:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":471,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3159:9:3","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":305,"src":"3154:14:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3169:6:3","memberName":"length","nodeType":"MemberAccess","src":"3154:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3178:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3154:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":515,"nodeType":"IfStatement","src":"3150:246:3","trueBody":{"id":514,"nodeType":"Block","src":"3181:215:3","statements":[{"expression":{"arguments":[{"hexValue":"627974657341726773","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3208:11:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3549a38a23cb1774056dbdf96dbc8ece30f733b8dd04641913d46a279936ce0b","typeString":"literal_string \"bytesArgs\""},"value":"bytesArgs"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3549a38a23cb1774056dbdf96dbc8ece30f733b8dd04641913d46a279936ce0b","typeString":"literal_string \"bytesArgs\""}],"expression":{"id":475,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3189:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":477,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3196:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"3189:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3189:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":480,"nodeType":"ExpressionStatement","src":"3189:31:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":481,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3228:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":483,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3235:10:3","memberName":"startArray","nodeType":"MemberAccess","referencedDeclaration":1766,"src":"3228:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3228:19:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"3228:19:3"},{"body":{"id":507,"nodeType":"Block","src":"3307:55:3","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":501,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3335:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3340:9:3","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":305,"src":"3335:14:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":504,"indexExpression":{"id":503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"3350:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3335:17:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":498,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3317:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3324:10:3","memberName":"writeBytes","nodeType":"MemberAccess","referencedDeclaration":1674,"src":"3317:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bytes_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3317:36:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":506,"nodeType":"ExpressionStatement","src":"3317:36:3"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"3275:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"expression":{"id":491,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"3279:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3284:9:3","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":305,"src":"3279:14:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3294:6:3","memberName":"length","nodeType":"MemberAccess","src":"3279:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3275:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":508,"initializationExpression":{"assignments":[487],"declarations":[{"constant":false,"id":487,"mutability":"mutable","name":"i","nameLocation":"3268:1:3","nodeType":"VariableDeclaration","scope":508,"src":"3260:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint256","nodeType":"ElementaryTypeName","src":"3260:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":489,"initialValue":{"hexValue":"30","id":488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3272:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3260:13:3"},"loopExpression":{"expression":{"id":496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3302:3:3","subExpression":{"id":495,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"3304:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":497,"nodeType":"ExpressionStatement","src":"3302:3:3"},"nodeType":"ForStatement","src":"3255:107:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":509,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3369:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3376:11:3","memberName":"endSequence","nodeType":"MemberAccess","referencedDeclaration":1832,"src":"3369:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3369:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":513,"nodeType":"ExpressionStatement","src":"3369:20:3"}]}},{"expression":{"expression":{"expression":{"id":516,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"3409:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3416:3:3","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"3409:10:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3420:3:3","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"3409:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":322,"id":519,"nodeType":"Return","src":"3402:21:3"}]},"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"2031:124:3","text":"@notice Encodes a Request to CBOR encoded bytes\n @param self The request to encode\n @return CBOR encoded bytes"},"id":521,"implemented":true,"kind":"function","modifiers":[],"name":"encodeCBOR","nameLocation":"2167:10:3","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":318,"mutability":"mutable","name":"self","nameLocation":"2193:4:3","nodeType":"VariableDeclaration","scope":521,"src":"2178:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":317,"nodeType":"UserDefinedTypeName","pathNode":{"id":316,"name":"Request","nameLocations":["2178:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"2178:7:3"},"referencedDeclaration":306,"src":"2178:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"}],"src":"2177:21:3"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":521,"src":"2222:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":320,"name":"bytes","nodeType":"ElementaryTypeName","src":"2222:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2221:14:3"},"scope":728,"src":"2158:1270:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":565,"nodeType":"Block","src":"3927:157:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":538,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"3943:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3937:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":536,"name":"bytes","nodeType":"ElementaryTypeName","src":"3937:5:3","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3937:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3951:6:3","memberName":"length","nodeType":"MemberAccess","src":"3937:20:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3961:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3937:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":546,"nodeType":"IfStatement","src":"3933:51:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":543,"name":"EmptySource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"3971:11:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3971:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":545,"nodeType":"RevertStatement","src":"3964:20:3"}},{"expression":{"id":551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":547,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"3991:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":549,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3996:12:3","memberName":"codeLocation","nodeType":"MemberAccess","referencedDeclaration":289,"src":"3991:17:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":550,"name":"codeLocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"4011:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"src":"3991:32:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"id":552,"nodeType":"ExpressionStatement","src":"3991:32:3"},{"expression":{"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":553,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4029:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4034:8:3","memberName":"language","nodeType":"MemberAccess","referencedDeclaration":295,"src":"4029:13:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":556,"name":"language","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"4045:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},"src":"4029:24:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},"id":558,"nodeType":"ExpressionStatement","src":"4029:24:3"},{"expression":{"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":559,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"4059:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4064:6:3","memberName":"source","nodeType":"MemberAccess","referencedDeclaration":297,"src":"4059:11:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":562,"name":"source","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"4073:6:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"4059:20:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":564,"nodeType":"ExpressionStatement","src":"4059:20:3"}]},"documentation":{"id":522,"nodeType":"StructuredDocumentation","src":"3432:342:3","text":"@notice Initializes a Chainlink Functions Request\n @dev Sets the codeLocation and code on the request\n @param self The uninitialized request\n @param codeLocation The user provided source code location\n @param language The programming language of the user code\n @param source The user provided source code or a url"},"id":566,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequest","nameLocation":"3786:17:3","nodeType":"FunctionDefinition","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"self","nameLocation":"3824:4:3","nodeType":"VariableDeclaration","scope":566,"src":"3809:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":524,"nodeType":"UserDefinedTypeName","pathNode":{"id":523,"name":"Request","nameLocations":["3809:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"3809:7:3"},"referencedDeclaration":306,"src":"3809:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"codeLocation","nameLocation":"3843:12:3","nodeType":"VariableDeclaration","scope":566,"src":"3834:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"},"typeName":{"id":527,"nodeType":"UserDefinedTypeName","pathNode":{"id":526,"name":"Location","nameLocations":["3834:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":284,"src":"3834:8:3"},"referencedDeclaration":284,"src":"3834:8:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"language","nameLocation":"3874:8:3","nodeType":"VariableDeclaration","scope":566,"src":"3861:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"},"typeName":{"id":530,"nodeType":"UserDefinedTypeName","pathNode":{"id":529,"name":"CodeLanguage","nameLocations":["3861:12:3"],"nodeType":"IdentifierPath","referencedDeclaration":286,"src":"3861:12:3"},"referencedDeclaration":286,"src":"3861:12:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},"visibility":"internal"},{"constant":false,"id":533,"mutability":"mutable","name":"source","nameLocation":"3902:6:3","nodeType":"VariableDeclaration","scope":566,"src":"3888:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":532,"name":"string","nodeType":"ElementaryTypeName","src":"3888:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3803:109:3"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[],"src":"3927:0:3"},"scope":728,"src":"3777:307:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":584,"nodeType":"Block","src":"4436:94:3","statements":[{"expression":{"arguments":[{"id":576,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"4460:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},{"expression":{"id":577,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"4466:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$284_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4475:6:3","memberName":"Inline","nodeType":"MemberAccess","referencedDeclaration":281,"src":"4466:15:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},{"expression":{"id":579,"name":"CodeLanguage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"4483:12:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CodeLanguage_$286_$","typeString":"type(enum FunctionsRequest.CodeLanguage)"}},"id":580,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4496:10:3","memberName":"JavaScript","nodeType":"MemberAccess","referencedDeclaration":285,"src":"4483:23:3","typeDescriptions":{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"}},{"id":581,"name":"javaScriptSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"4508:16:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"},{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"},{"typeIdentifier":"t_enum$_CodeLanguage_$286","typeString":"enum FunctionsRequest.CodeLanguage"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":575,"name":"initializeRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"4442:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$306_memory_ptr_$_t_enum$_Location_$284_$_t_enum$_CodeLanguage_$286_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct FunctionsRequest.Request memory,enum FunctionsRequest.Location,enum FunctionsRequest.CodeLanguage,string memory) pure"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4442:83:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":583,"nodeType":"ExpressionStatement","src":"4442:83:3"}]},"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"4088:232:3","text":"@notice Initializes a Chainlink Functions Request\n @dev Simplified version of initializeRequest for PoC\n @param self The uninitialized request\n @param javaScriptSource The user provided JS code (must not be empty)"},"id":585,"implemented":true,"kind":"function","modifiers":[],"name":"initializeRequestForInlineJavaScript","nameLocation":"4332:36:3","nodeType":"FunctionDefinition","parameters":{"id":573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"self","nameLocation":"4384:4:3","nodeType":"VariableDeclaration","scope":585,"src":"4369:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":569,"nodeType":"UserDefinedTypeName","pathNode":{"id":568,"name":"Request","nameLocations":["4369:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"4369:7:3"},"referencedDeclaration":306,"src":"4369:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":572,"mutability":"mutable","name":"javaScriptSource","nameLocation":"4404:16:3","nodeType":"VariableDeclaration","scope":585,"src":"4390:30:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":571,"name":"string","nodeType":"ElementaryTypeName","src":"4390:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4368:53:3"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"4436:0:3"},"scope":728,"src":"4323:207:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":615,"nodeType":"Block","src":"4852:184:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":594,"name":"encryptedSecretsReference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"4862:25:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4888:6:3","memberName":"length","nodeType":"MemberAccess","src":"4862:32:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4898:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4862:37:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":601,"nodeType":"IfStatement","src":"4858:64:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":598,"name":"EmptySecrets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":310,"src":"4908:12:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4908:14:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":600,"nodeType":"RevertStatement","src":"4901:21:3"}},{"expression":{"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":602,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"4929:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4934:15:3","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":292,"src":"4929:20:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":605,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"4952:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$284_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4961:6:3","memberName":"Remote","nodeType":"MemberAccess","referencedDeclaration":282,"src":"4952:15:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"src":"4929:38:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"id":608,"nodeType":"ExpressionStatement","src":"4929:38:3"},{"expression":{"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":609,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"4973:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4978:25:3","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":299,"src":"4973:30:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":612,"name":"encryptedSecretsReference","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"5006:25:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"4973:58:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":614,"nodeType":"ExpressionStatement","src":"4973:58:3"}]},"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"4534:211:3","text":"@notice Adds Remote user encrypted secrets to a Request\n @param self The initialized request\n @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets"},"id":616,"implemented":true,"kind":"function","modifiers":[],"name":"addSecretsReference","nameLocation":"4757:19:3","nodeType":"FunctionDefinition","parameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"self","nameLocation":"4792:4:3","nodeType":"VariableDeclaration","scope":616,"src":"4777:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":588,"nodeType":"UserDefinedTypeName","pathNode":{"id":587,"name":"Request","nameLocations":["4777:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"4777:7:3"},"referencedDeclaration":306,"src":"4777:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":591,"mutability":"mutable","name":"encryptedSecretsReference","nameLocation":"4811:25:3","nodeType":"VariableDeclaration","scope":616,"src":"4798:38:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":590,"name":"bytes","nodeType":"ElementaryTypeName","src":"4798:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4776:61:3"},"returnParameters":{"id":593,"nodeType":"ParameterList","parameters":[],"src":"4852:0:3"},"scope":728,"src":"4748:288:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":676,"nodeType":"Block","src":"5357:311:3","statements":[{"assignments":[631],"declarations":[{"constant":false,"id":631,"mutability":"mutable","name":"buffer","nameLocation":"5386:6:3","nodeType":"VariableDeclaration","scope":676,"src":"5363:29:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":630,"nodeType":"UserDefinedTypeName","pathNode":{"id":629,"name":"CBOR.CBORBuffer","nameLocations":["5363:4:3","5368:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5363:15:3"},"referencedDeclaration":1422,"src":"5363:15:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"id":636,"initialValue":{"arguments":[{"id":634,"name":"DEFAULT_BUFFER_SIZE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"5407:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":632,"name":"CBOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"5395:4:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_CBOR_$2267_$","typeString":"type(library CBOR)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5400:6:3","memberName":"create","nodeType":"MemberAccess","referencedDeclaration":1489,"src":"5395:11:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (uint256) pure returns (struct CBOR.CBORBuffer memory)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5395:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"nodeType":"VariableDeclarationStatement","src":"5363:64:3"},{"expression":{"arguments":[{"hexValue":"736c6f744944","id":640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5453:8:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5aaf47ebef83f4d962805dda4c452b2732f648f22dd85d8c0d1bc70bede536f","typeString":"literal_string \"slotID\""},"value":"slotID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5aaf47ebef83f4d962805dda4c452b2732f648f22dd85d8c0d1bc70bede536f","typeString":"literal_string \"slotID\""}],"expression":{"id":637,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5434:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":639,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5441:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"5434:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5434:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"ExpressionStatement","src":"5434:28:3"},{"expression":{"arguments":[{"id":646,"name":"slotID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":622,"src":"5487:6:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"id":643,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5468:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5475:11:3","memberName":"writeUInt64","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"5468:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint64_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5468:26:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":648,"nodeType":"ExpressionStatement","src":"5468:26:3"},{"expression":{"arguments":[{"hexValue":"76657273696f6e","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5519:9:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba1b4dd49a85c82b73f138b112d5135149203ed36c1ec80c46f8c572daa7c5ec","typeString":"literal_string \"version\""},"value":"version"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ba1b4dd49a85c82b73f138b112d5135149203ed36c1ec80c46f8c572daa7c5ec","typeString":"literal_string \"version\""}],"expression":{"id":649,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5500:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5507:11:3","memberName":"writeString","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"5500:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5500:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":654,"nodeType":"ExpressionStatement","src":"5500:29:3"},{"expression":{"arguments":[{"id":658,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"5554:7:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"expression":{"id":655,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5535:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":657,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5542:11:3","memberName":"writeUInt64","nodeType":"MemberAccess","referencedDeclaration":1611,"src":"5535:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint64_$returns$__$attached_to$_t_struct$_CBORBuffer_$1422_memory_ptr_$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":660,"nodeType":"ExpressionStatement","src":"5535:27:3"},{"expression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":661,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"5569:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":663,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5574:15:3","memberName":"secretsLocation","nodeType":"MemberAccess","referencedDeclaration":292,"src":"5569:20:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":664,"name":"Location","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5592:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Location_$284_$","typeString":"type(enum FunctionsRequest.Location)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5601:9:3","memberName":"DONHosted","nodeType":"MemberAccess","referencedDeclaration":283,"src":"5592:18:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"src":"5569:41:3","typeDescriptions":{"typeIdentifier":"t_enum$_Location_$284","typeString":"enum FunctionsRequest.Location"}},"id":667,"nodeType":"ExpressionStatement","src":"5569:41:3"},{"expression":{"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":668,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"5616:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5621:25:3","memberName":"encryptedSecretsReference","nodeType":"MemberAccess","referencedDeclaration":299,"src":"5616:30:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":671,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"5649:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5656:3:3","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"5649:10:3","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5660:3:3","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"5649:14:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"5616:47:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":675,"nodeType":"ExpressionStatement","src":"5616:47:3"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"5040:220:3","text":"@notice Adds DON-hosted secrets reference to a Request\n @param self The initialized request\n @param slotID Slot ID of the user's secrets hosted on DON\n @param version User data version (for the slotID)"},"id":677,"implemented":true,"kind":"function","modifiers":[],"name":"addDONHostedSecrets","nameLocation":"5272:19:3","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"self","nameLocation":"5307:4:3","nodeType":"VariableDeclaration","scope":677,"src":"5292:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":619,"nodeType":"UserDefinedTypeName","pathNode":{"id":618,"name":"Request","nameLocations":["5292:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"5292:7:3"},"referencedDeclaration":306,"src":"5292:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":622,"mutability":"mutable","name":"slotID","nameLocation":"5319:6:3","nodeType":"VariableDeclaration","scope":677,"src":"5313:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":621,"name":"uint8","nodeType":"ElementaryTypeName","src":"5313:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":624,"mutability":"mutable","name":"version","nameLocation":"5334:7:3","nodeType":"VariableDeclaration","scope":677,"src":"5327:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":623,"name":"uint64","nodeType":"ElementaryTypeName","src":"5327:6:3","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5291:51:3"},"returnParameters":{"id":626,"nodeType":"ParameterList","parameters":[],"src":"5357:0:3"},"scope":728,"src":"5263:405:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":701,"nodeType":"Block","src":"5901:74:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":687,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5911:4:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5916:6:3","memberName":"length","nodeType":"MemberAccess","src":"5911:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5926:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5911:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":694,"nodeType":"IfStatement","src":"5907:40:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":691,"name":"EmptyArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"5936:9:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5936:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"RevertStatement","src":"5929:18:3"}},{"expression":{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":695,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"5954:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":697,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5959:4:3","memberName":"args","nodeType":"MemberAccess","referencedDeclaration":302,"src":"5954:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":698,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"5966:4:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"src":"5954:16:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":700,"nodeType":"ExpressionStatement","src":"5954:16:3"}]},"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"5672:152:3","text":"@notice Sets args for the user run function\n @param self The initialized request\n @param args The array of string args (must not be empty)"},"id":702,"implemented":true,"kind":"function","modifiers":[],"name":"setArgs","nameLocation":"5836:7:3","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"self","nameLocation":"5859:4:3","nodeType":"VariableDeclaration","scope":702,"src":"5844:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":680,"nodeType":"UserDefinedTypeName","pathNode":{"id":679,"name":"Request","nameLocations":["5844:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"5844:7:3"},"referencedDeclaration":306,"src":"5844:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"args","nameLocation":"5881:4:3","nodeType":"VariableDeclaration","scope":702,"src":"5865:20:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":682,"name":"string","nodeType":"ElementaryTypeName","src":"5865:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":683,"nodeType":"ArrayTypeName","src":"5865:8:3","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"5843:43:3"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"5901:0:3"},"scope":728,"src":"5827:148:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":726,"nodeType":"Block","src":"6217:79:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":712,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"6227:4:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6232:6:3","memberName":"length","nodeType":"MemberAccess","src":"6227:11:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":714,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6242:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6227:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":719,"nodeType":"IfStatement","src":"6223:40:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":716,"name":"EmptyArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":312,"src":"6252:9:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6252:11:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":718,"nodeType":"RevertStatement","src":"6245:18:3"}},{"expression":{"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":720,"name":"self","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"6270:4:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6275:9:3","memberName":"bytesArgs","nodeType":"MemberAccess","referencedDeclaration":305,"src":"6270:14:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":723,"name":"args","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"6287:4:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"src":"6270:21:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes memory[] memory"}},"id":725,"nodeType":"ExpressionStatement","src":"6270:21:3"}]},"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"5979:157:3","text":"@notice Sets bytes args for the user run function\n @param self The initialized request\n @param args The array of bytes args (must not be empty)"},"id":727,"implemented":true,"kind":"function","modifiers":[],"name":"setBytesArgs","nameLocation":"6148:12:3","nodeType":"FunctionDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"self","nameLocation":"6176:4:3","nodeType":"VariableDeclaration","scope":727,"src":"6161:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":705,"nodeType":"UserDefinedTypeName","pathNode":{"id":704,"name":"Request","nameLocations":["6161:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"6161:7:3"},"referencedDeclaration":306,"src":"6161:7:3","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"},{"constant":false,"id":709,"mutability":"mutable","name":"args","nameLocation":"6197:4:3","nodeType":"VariableDeclaration","scope":727,"src":"6182:19:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":707,"name":"bytes","nodeType":"ElementaryTypeName","src":"6182:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":708,"nodeType":"ArrayTypeName","src":"6182:7:3","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6160:42:3"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[],"src":"6217:0:3"},"scope":728,"src":"6139:157:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":729,"src":"212:6086:3","usedErrors":[308,310,312,314],"usedEvents":[]}],"src":"32:6267:3"},"id":3},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol","exportedSymbols":{"FunctionsResponse":[786]},"id":787,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":730,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"FunctionsResponse","contractDependencies":[],"contractKind":"library","documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"58:81:4","text":"@title Library of types that are used for fulfillment of a Functions request"},"fullyImplemented":true,"id":786,"linearizedBaseContracts":[786],"name":"FunctionsResponse","nameLocation":"147:17:4","nodeType":"ContractDefinition","nodes":[{"canonicalName":"FunctionsResponse.RequestMeta","id":754,"members":[{"constant":false,"id":733,"mutability":"mutable","name":"data","nameLocation":"273:4:4","nodeType":"VariableDeclaration","scope":754,"src":"267:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":732,"name":"bytes","nodeType":"ElementaryTypeName","src":"267:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"flags","nameLocation":"448:5:4","nodeType":"VariableDeclaration","scope":754,"src":"440:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"440:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"requestingContract","nameLocation":"542:18:4","nodeType":"VariableDeclaration","scope":754,"src":"534:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"534:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"availableBalance","nameLocation":"634:16:4","nodeType":"VariableDeclaration","scope":754,"src":"627:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":738,"name":"uint96","nodeType":"ElementaryTypeName","src":"627:6:4","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"adminFee","nameLocation":"796:8:4","nodeType":"VariableDeclaration","scope":754,"src":"789:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":740,"name":"uint72","nodeType":"ElementaryTypeName","src":"789:6:4","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"subscriptionId","nameLocation":"958:14:4","nodeType":"VariableDeclaration","scope":754,"src":"951:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":742,"name":"uint64","nodeType":"ElementaryTypeName","src":"951:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"initiatedRequests","nameLocation":"1075:17:4","nodeType":"VariableDeclaration","scope":754,"src":"1068:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":744,"name":"uint64","nodeType":"ElementaryTypeName","src":"1068:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1162:16:4","nodeType":"VariableDeclaration","scope":754,"src":"1155:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":746,"name":"uint32","nodeType":"ElementaryTypeName","src":"1155:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"dataVersion","nameLocation":"1279:11:4","nodeType":"VariableDeclaration","scope":754,"src":"1272:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":748,"name":"uint16","nodeType":"ElementaryTypeName","src":"1272:6:4","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":751,"mutability":"mutable","name":"completedRequests","nameLocation":"1402:17:4","nodeType":"VariableDeclaration","scope":754,"src":"1395:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":750,"name":"uint64","nodeType":"ElementaryTypeName","src":"1395:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":753,"mutability":"mutable","name":"subscriptionOwner","nameLocation":"1521:17:4","nodeType":"VariableDeclaration","scope":754,"src":"1513:25:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":752,"name":"address","nodeType":"ElementaryTypeName","src":"1513:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"RequestMeta","nameLocation":"249:11:4","nodeType":"StructDefinition","scope":786,"src":"242:1355:4","visibility":"public"},{"canonicalName":"FunctionsResponse.FulfillResult","id":762,"members":[{"id":755,"name":"FULFILLED","nameLocation":"1626:9:4","nodeType":"EnumValue","src":"1626:9:4"},{"id":756,"name":"USER_CALLBACK_ERROR","nameLocation":"1646:19:4","nodeType":"EnumValue","src":"1646:19:4"},{"id":757,"name":"INVALID_REQUEST_ID","nameLocation":"1676:18:4","nodeType":"EnumValue","src":"1676:18:4"},{"id":758,"name":"COST_EXCEEDS_COMMITMENT","nameLocation":"1705:23:4","nodeType":"EnumValue","src":"1705:23:4"},{"id":759,"name":"INSUFFICIENT_GAS_PROVIDED","nameLocation":"1739:25:4","nodeType":"EnumValue","src":"1739:25:4"},{"id":760,"name":"SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION","nameLocation":"1775:40:4","nodeType":"EnumValue","src":"1775:40:4"},{"id":761,"name":"INVALID_COMMITMENT","nameLocation":"1826:18:4","nodeType":"EnumValue","src":"1826:18:4"}],"name":"FulfillResult","nameLocation":"1606:13:4","nodeType":"EnumDefinition","src":"1601:252:4"},{"canonicalName":"FunctionsResponse.Commitment","id":785,"members":[{"constant":false,"id":764,"mutability":"mutable","name":"requestId","nameLocation":"1889:9:4","nodeType":"VariableDeclaration","scope":785,"src":"1881:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":763,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1881:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"coordinator","nameLocation":"2024:11:4","nodeType":"VariableDeclaration","scope":785,"src":"2016:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"2016:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":768,"mutability":"mutable","name":"estimatedTotalCostJuels","nameLocation":"2174:23:4","nodeType":"VariableDeclaration","scope":785,"src":"2167:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":767,"name":"uint96","nodeType":"ElementaryTypeName","src":"2167:6:4","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":770,"mutability":"mutable","name":"client","nameLocation":"2313:6:4","nodeType":"VariableDeclaration","scope":785,"src":"2305:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"2305:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":772,"mutability":"mutable","name":"subscriptionId","nameLocation":"2441:14:4","nodeType":"VariableDeclaration","scope":785,"src":"2434:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":771,"name":"uint64","nodeType":"ElementaryTypeName","src":"2434:6:4","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2564:16:4","nodeType":"VariableDeclaration","scope":785,"src":"2557:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":773,"name":"uint32","nodeType":"ElementaryTypeName","src":"2557:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"adminFee","nameLocation":"2709:8:4","nodeType":"VariableDeclaration","scope":785,"src":"2702:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":775,"name":"uint72","nodeType":"ElementaryTypeName","src":"2702:6:4","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":778,"mutability":"mutable","name":"donFee","nameLocation":"2889:6:4","nodeType":"VariableDeclaration","scope":785,"src":"2882:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"},"typeName":{"id":777,"name":"uint72","nodeType":"ElementaryTypeName","src":"2882:6:4","typeDescriptions":{"typeIdentifier":"t_uint72","typeString":"uint72"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"gasOverheadBeforeCallback","nameLocation":"3025:25:4","nodeType":"VariableDeclaration","scope":785,"src":"3018:32:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":779,"name":"uint40","nodeType":"ElementaryTypeName","src":"3018:6:4","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":782,"mutability":"mutable","name":"gasOverheadAfterCallback","nameLocation":"3147:24:4","nodeType":"VariableDeclaration","scope":785,"src":"3140:31:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"},"typeName":{"id":781,"name":"uint40","nodeType":"ElementaryTypeName","src":"3140:6:4","typeDescriptions":{"typeIdentifier":"t_uint40","typeString":"uint40"}},"visibility":"internal"},{"constant":false,"id":784,"mutability":"mutable","name":"timeoutTimestamp","nameLocation":"3268:16:4","nodeType":"VariableDeclaration","scope":785,"src":"3261:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":783,"name":"uint32","nodeType":"ElementaryTypeName","src":"3261:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Commitment","nameLocation":"1864:10:4","nodeType":"StructDefinition","scope":786,"src":"1857:1538:4","visibility":"public"}],"scope":787,"src":"139:3258:4","usedErrors":[],"usedEvents":[]}],"src":"32:3366:4"},"id":4},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[807],"ConfirmedOwnerWithProposal":[970]},"id":808,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":788,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":790,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":808,"sourceUnit":971,"src":"57:76:5","symbolAliases":[{"foreign":{"id":789,"name":"ConfirmedOwnerWithProposal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"65:26:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":792,"name":"ConfirmedOwnerWithProposal","nameLocations":["267:26:5"],"nodeType":"IdentifierPath","referencedDeclaration":970,"src":"267:26:5"},"id":793,"nodeType":"InheritanceSpecifier","src":"267:26:5"}],"canonicalName":"ConfirmedOwner","contractDependencies":[],"contractKind":"contract","documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"135:105:5","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":807,"linearizedBaseContracts":[807,970,986],"name":"ConfirmedOwner","nameLocation":"249:14:5","nodeType":"ContractDefinition","nodes":[{"body":{"id":805,"nodeType":"Block","src":"377:2:5","statements":[]},"id":806,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":798,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"355:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"373:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":799,"name":"address","nodeType":"ElementaryTypeName","src":"365:7:5","typeDescriptions":{}}},"id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":803,"kind":"baseConstructorSpecifier","modifierName":{"id":797,"name":"ConfirmedOwnerWithProposal","nameLocations":["328:26:5"],"nodeType":"IdentifierPath","referencedDeclaration":970,"src":"328:26:5"},"nodeType":"ModifierInvocation","src":"328:48:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"newOwner","nameLocation":"318:8:5","nodeType":"VariableDeclaration","scope":806,"src":"310:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":794,"name":"address","nodeType":"ElementaryTypeName","src":"310:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"309:18:5"},"returnParameters":{"id":804,"nodeType":"ParameterList","parameters":[],"src":"377:0:5"},"scope":807,"src":"298:81:5","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":808,"src":"240:141:5","usedErrors":[],"usedEvents":[824,830]}],"src":"32:350:5"},"id":5},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[970],"IOwnable":[986]},"id":971,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":809,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","file":"../interfaces/IOwnable.sol","id":811,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":987,"src":"57:52:6","symbolAliases":[{"foreign":{"id":810,"name":"IOwnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"65:8:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":813,"name":"IOwnable","nameLocations":["255:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":986,"src":"255:8:6"},"id":814,"nodeType":"InheritanceSpecifier","src":"255:8:6"}],"canonicalName":"ConfirmedOwnerWithProposal","contractDependencies":[],"contractKind":"contract","documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"111:105:6","text":"@title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":970,"linearizedBaseContracts":[970,986],"name":"ConfirmedOwnerWithProposal","nameLocation":"225:26:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":816,"mutability":"mutable","name":"s_owner","nameLocation":"284:7:6","nodeType":"VariableDeclaration","scope":970,"src":"268:23:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":815,"name":"address","nodeType":"ElementaryTypeName","src":"268:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":818,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"311:14:6","nodeType":"VariableDeclaration","scope":970,"src":"295:30:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":817,"name":"address","nodeType":"ElementaryTypeName","src":"295:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278","id":824,"name":"OwnershipTransferRequested","nameLocation":"336:26:6","nodeType":"EventDefinition","parameters":{"id":823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"379:4:6","nodeType":"VariableDeclaration","scope":824,"src":"363:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":819,"name":"address","nodeType":"ElementaryTypeName","src":"363:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":822,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"401:2:6","nodeType":"VariableDeclaration","scope":824,"src":"385:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"385:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"362:42:6"},"src":"330:75:6"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":830,"name":"OwnershipTransferred","nameLocation":"414:20:6","nodeType":"EventDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"451:4:6","nodeType":"VariableDeclaration","scope":830,"src":"435:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":828,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"473:2:6","nodeType":"VariableDeclaration","scope":830,"src":"457:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":827,"name":"address","nodeType":"ElementaryTypeName","src":"457:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"434:42:6"},"src":"408:69:6"},{"body":{"id":863,"nodeType":"Block","src":"533:230:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":838,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"598:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"610:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":839,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:6","typeDescriptions":{}}},"id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"610:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"598:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"622:26:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":837,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"590:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"590:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"ExpressionStatement","src":"590:59:6"},{"expression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":847,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"656:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":848,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"666:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"656:18:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":850,"nodeType":"ExpressionStatement","src":"656:18:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":851,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"684:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"708:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":853,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"700:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"700:7:6","typeDescriptions":{}}},"id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"700:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"684:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":862,"nodeType":"IfStatement","src":"680:79:6","trueBody":{"id":861,"nodeType":"Block","src":"712:47:6","statements":[{"expression":{"arguments":[{"id":858,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"739:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":857,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"720:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"720:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":860,"nodeType":"ExpressionStatement","src":"720:32:6"}]}}]},"id":864,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"newOwner","nameLocation":"501:8:6","nodeType":"VariableDeclaration","scope":864,"src":"493:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":831,"name":"address","nodeType":"ElementaryTypeName","src":"493:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"pendingOwner","nameLocation":"519:12:6","nodeType":"VariableDeclaration","scope":864,"src":"511:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"492:40:6"},"returnParameters":{"id":836,"nodeType":"ParameterList","parameters":[],"src":"533:0:6"},"scope":970,"src":"481:282:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[982],"body":{"id":877,"nodeType":"Block","src":"912:33:6","statements":[{"expression":{"arguments":[{"id":874,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"937:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":873,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"918:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:22:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":876,"nodeType":"ExpressionStatement","src":"918:22:6"}]},"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"767:77:6","text":"@notice Allows an owner to begin transferring ownership to a new address."},"functionSelector":"f2fde38b","id":878,"implemented":true,"kind":"function","modifiers":[{"id":871,"kind":"modifierInvocation","modifierName":{"id":870,"name":"onlyOwner","nameLocations":["902:9:6"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"902:9:6"},"nodeType":"ModifierInvocation","src":"902:9:6"}],"name":"transferOwnership","nameLocation":"856:17:6","nodeType":"FunctionDefinition","overrides":{"id":869,"nodeType":"OverrideSpecifier","overrides":[],"src":"893:8:6"},"parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"to","nameLocation":"882:2:6","nodeType":"VariableDeclaration","scope":878,"src":"874:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"874:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"873:12:6"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"912:0:6"},"scope":970,"src":"847:98:6","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[985],"body":{"id":913,"nodeType":"Block","src":"1071:271:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":884,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1136:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1140:6:6","memberName":"sender","nodeType":"MemberAccess","src":"1136:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":886,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"1150:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1136:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":888,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1166:24:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":883,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1128:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:63:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":890,"nodeType":"ExpressionStatement","src":"1128:63:6"},{"assignments":[892],"declarations":[{"constant":false,"id":892,"mutability":"mutable","name":"oldOwner","nameLocation":"1206:8:6","nodeType":"VariableDeclaration","scope":913,"src":"1198:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":891,"name":"address","nodeType":"ElementaryTypeName","src":"1198:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":894,"initialValue":{"id":893,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1217:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1198:26:6"},{"expression":{"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":895,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1230:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":896,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1240:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1244:6:6","memberName":"sender","nodeType":"MemberAccess","src":"1240:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1230:20:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":899,"nodeType":"ExpressionStatement","src":"1230:20:6"},{"expression":{"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":900,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"1256:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1281:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1273:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"1273:7:6","typeDescriptions":{}}},"id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1273:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1256:27:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":906,"nodeType":"ExpressionStatement","src":"1256:27:6"},{"eventCall":{"arguments":[{"id":908,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":892,"src":"1316:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":909,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1326:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1330:6:6","memberName":"sender","nodeType":"MemberAccess","src":"1326:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":907,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"1295:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1295:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":912,"nodeType":"EmitStatement","src":"1290:47:6"}]},"documentation":{"id":879,"nodeType":"StructuredDocumentation","src":"949:74:6","text":"@notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":914,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1035:15:6","nodeType":"FunctionDefinition","overrides":{"id":881,"nodeType":"OverrideSpecifier","overrides":[],"src":"1062:8:6"},"parameters":{"id":880,"nodeType":"ParameterList","parameters":[],"src":"1050:2:6"},"returnParameters":{"id":882,"nodeType":"ParameterList","parameters":[],"src":"1071:0:6"},"scope":970,"src":"1026:316:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[977],"body":{"id":923,"nodeType":"Block","src":"1438:25:6","statements":[{"expression":{"id":921,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1451:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":920,"id":922,"nodeType":"Return","src":"1444:14:6"}]},"documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"1346:33:6","text":"@notice Get the current owner"},"functionSelector":"8da5cb5b","id":924,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1391:5:6","nodeType":"FunctionDefinition","overrides":{"id":917,"nodeType":"OverrideSpecifier","overrides":[],"src":"1411:8:6"},"parameters":{"id":916,"nodeType":"ParameterList","parameters":[],"src":"1396:2:6"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":924,"src":"1429:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":918,"name":"address","nodeType":"ElementaryTypeName","src":"1429:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1428:9:6"},"scope":970,"src":"1382:81:6","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":947,"nodeType":"Block","src":"1584:191:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":931,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"1649:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":932,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1655:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1659:6:6","memberName":"sender","nodeType":"MemberAccess","src":"1655:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1667:25:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":930,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1641:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1641:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":937,"nodeType":"ExpressionStatement","src":"1641:52:6"},{"expression":{"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":938,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"1700:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":939,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"1717:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1700:19:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":941,"nodeType":"ExpressionStatement","src":"1700:19:6"},{"eventCall":{"arguments":[{"id":943,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1758:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"1767:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":942,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"1731:26:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1731:39:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":946,"nodeType":"EmitStatement","src":"1726:44:6"}]},"documentation":{"id":925,"nodeType":"StructuredDocumentation","src":"1467:66:6","text":"@notice validate, transfer ownership, and emit relevant events"},"id":948,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1545:18:6","nodeType":"FunctionDefinition","parameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"to","nameLocation":"1572:2:6","nodeType":"VariableDeclaration","scope":948,"src":"1564:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"1564:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1563:12:6"},"returnParameters":{"id":929,"nodeType":"ParameterList","parameters":[],"src":"1584:0:6"},"scope":970,"src":"1536:239:6","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":960,"nodeType":"Block","src":"1853:118:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":953,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"1918:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1922:6:6","memberName":"sender","nodeType":"MemberAccess","src":"1918:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":955,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":816,"src":"1932:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1918:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1941:24:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":952,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1910:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"1910:56:6"}]},"documentation":{"id":949,"nodeType":"StructuredDocumentation","src":"1779:27:6","text":"@notice validate access"},"id":961,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1818:18:6","nodeType":"FunctionDefinition","parameters":{"id":950,"nodeType":"ParameterList","parameters":[],"src":"1836:2:6"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[],"src":"1853:0:6"},"scope":970,"src":"1809:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":968,"nodeType":"Block","src":"2069:38:6","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":964,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"2075:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2075:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":966,"nodeType":"ExpressionStatement","src":"2075:20:6"},{"id":967,"nodeType":"PlaceholderStatement","src":"2101:1:6"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"1975:70:6","text":"@notice Reverts if called by anyone other than the contract owner."},"id":969,"name":"onlyOwner","nameLocation":"2057:9:6","nodeType":"ModifierDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[],"src":"2066:2:6"},"src":"2048:59:6","virtual":false,"visibility":"internal"}],"scope":971,"src":"216:1893:6","usedErrors":[],"usedEvents":[824,830]}],"src":"32:2078:6"},"id":6},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","exportedSymbols":{"IOwnable":[986]},"id":987,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":972,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IOwnable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":986,"linearizedBaseContracts":[986],"name":"IOwnable","nameLocation":"67:8:7","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":977,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"89:5:7","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[],"src":"94:2:7"},"returnParameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":977,"src":"115:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":974,"name":"address","nodeType":"ElementaryTypeName","src":"115:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"114:9:7"},"scope":986,"src":"80:44:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":982,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"137:17:7","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"recipient","nameLocation":"163:9:7","nodeType":"VariableDeclaration","scope":982,"src":"155:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":978,"name":"address","nodeType":"ElementaryTypeName","src":"155:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"154:19:7"},"returnParameters":{"id":981,"nodeType":"ParameterList","parameters":[],"src":"182:0:7"},"scope":986,"src":"128:55:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":985,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"196:15:7","nodeType":"FunctionDefinition","parameters":{"id":983,"nodeType":"ParameterList","parameters":[],"src":"211:2:7"},"returnParameters":{"id":984,"nodeType":"ParameterList","parameters":[],"src":"222:0:7"},"scope":986,"src":"187:36:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":987,"src":"57:168:7","usedErrors":[],"usedEvents":[]}],"src":"32:194:7"},"id":7},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol","exportedSymbols":{"Buffer":[1408]},"id":1409,"license":"BSD-2-Clause","nodeType":"SourceUnit","nodes":[{"id":988,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"41:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"Buffer","contractDependencies":[],"contractKind":"library","documentation":{"id":989,"nodeType":"StructuredDocumentation","src":"66:378:8","text":" @dev A library for working with mutable byte buffers in Solidity.\n Byte buffers are mutable and expandable, and provide a variety of primitives\n for appending to them. At any time you can fetch a bytes object containing the\n current contents of the buffer. The bytes object should not be stored between\n operations, as it may change due to resizing of the buffer."},"fullyImplemented":true,"id":1408,"linearizedBaseContracts":[1408],"name":"Buffer","nameLocation":"453:6:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Buffer.buffer","documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"466:249:8","text":" @dev Represents a mutable buffer. Buffers have a current value (buf) and\n      a capacity. The capacity may be longer than the current value, in\n      which case it can be extended without the need to allocate more memory."},"id":995,"members":[{"constant":false,"id":992,"mutability":"mutable","name":"buf","nameLocation":"750:3:8","nodeType":"VariableDeclaration","scope":995,"src":"744:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":991,"name":"bytes","nodeType":"ElementaryTypeName","src":"744:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"capacity","nameLocation":"768:8:8","nodeType":"VariableDeclaration","scope":995,"src":"763:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint","nodeType":"ElementaryTypeName","src":"763:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"buffer","nameLocation":"727:6:8","nodeType":"StructDefinition","scope":1408,"src":"720:63:8","visibility":"public"},{"body":{"id":1032,"nodeType":"Block","src":"1105:470:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1007,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"1119:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1119:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1136:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1119:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1022,"nodeType":"IfStatement","src":"1115:81:8","trueBody":{"id":1021,"nodeType":"Block","src":"1139:57:8","statements":[{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1012,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"1153:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1165:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1014,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"1171:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"3332","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1182:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1171:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1017,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1170:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1165:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1153:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"1153:32:8"}]}},{"expression":{"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1023,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"1251:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1025,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1255:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"1251:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1026,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1001,"src":"1266:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1251:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1028,"nodeType":"ExpressionStatement","src":"1251:23:8"},{"AST":{"nodeType":"YulBlock","src":"1293:256:8","statements":[{"nodeType":"YulVariableDeclaration","src":"1307:22:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1324:4:8","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1318:5:8"},"nodeType":"YulFunctionCall","src":"1318:11:8"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"1311:3:8","type":""}]},{"expression":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"1349:3:8"},{"name":"ptr","nodeType":"YulIdentifier","src":"1354:3:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1342:6:8"},"nodeType":"YulFunctionCall","src":"1342:16:8"},"nodeType":"YulExpressionStatement","src":"1342:16:8"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1378:3:8"},{"kind":"number","nodeType":"YulLiteral","src":"1383:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1371:6:8"},"nodeType":"YulFunctionCall","src":"1371:14:8"},"nodeType":"YulExpressionStatement","src":"1371:14:8"},{"nodeType":"YulVariableDeclaration","src":"1398:38:8","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:2:8","type":"","value":"32"},{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1421:3:8"},{"name":"capacity","nodeType":"YulIdentifier","src":"1426:8:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1417:3:8"},"nodeType":"YulFunctionCall","src":"1417:18:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1409:3:8"},"nodeType":"YulFunctionCall","src":"1409:27:8"},"variables":[{"name":"fpm","nodeType":"YulTypedName","src":"1402:3:8","type":""}]},{"body":{"nodeType":"YulBlock","src":"1465:44:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1490:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1493:1:8","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1483:6:8"},"nodeType":"YulFunctionCall","src":"1483:12:8"},"nodeType":"YulExpressionStatement","src":"1483:12:8"}]},"condition":{"arguments":[{"name":"fpm","nodeType":"YulIdentifier","src":"1455:3:8"},{"name":"ptr","nodeType":"YulIdentifier","src":"1460:3:8"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1452:2:8"},"nodeType":"YulFunctionCall","src":"1452:12:8"},"nodeType":"YulIf","src":"1449:60:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1529:4:8","type":"","value":"0x40"},{"name":"fpm","nodeType":"YulIdentifier","src":"1535:3:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1522:6:8"},"nodeType":"YulFunctionCall","src":"1522:17:8"},"nodeType":"YulExpressionStatement","src":"1522:17:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":999,"isOffset":false,"isSlot":false,"src":"1349:3:8","valueSize":1},{"declaration":1001,"isOffset":false,"isSlot":false,"src":"1426:8:8","valueSize":1}],"id":1029,"nodeType":"InlineAssembly","src":"1284:265:8"},{"expression":{"id":1030,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"1565:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1006,"id":1031,"nodeType":"Return","src":"1558:10:8"}]},"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"789:226:8","text":" @dev Initializes a buffer with an initial capacity.\n @param buf The buffer to initialize.\n @param capacity The number of bytes of space to allocate the buffer.\n @return The buffer, for chaining."},"id":1033,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"1029:4:8","nodeType":"FunctionDefinition","parameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"buf","nameLocation":"1048:3:8","nodeType":"VariableDeclaration","scope":1033,"src":"1034:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":998,"nodeType":"UserDefinedTypeName","pathNode":{"id":997,"name":"buffer","nameLocations":["1034:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"1034:6:8"},"referencedDeclaration":995,"src":"1034:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1001,"mutability":"mutable","name":"capacity","nameLocation":"1058:8:8","nodeType":"VariableDeclaration","scope":1033,"src":"1053:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1000,"name":"uint","nodeType":"ElementaryTypeName","src":"1053:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1033:34:8"},"returnParameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1033,"src":"1090:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1004,"nodeType":"UserDefinedTypeName","pathNode":{"id":1003,"name":"buffer","nameLocations":["1090:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"1090:6:8"},"referencedDeclaration":995,"src":"1090:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1089:15:8"},"scope":1408,"src":"1020:555:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1061,"nodeType":"Block","src":"1890:108:8","statements":[{"assignments":[1044],"declarations":[{"constant":false,"id":1044,"mutability":"mutable","name":"buf","nameLocation":"1914:3:8","nodeType":"VariableDeclaration","scope":1061,"src":"1900:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1043,"nodeType":"UserDefinedTypeName","pathNode":{"id":1042,"name":"buffer","nameLocations":["1900:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"1900:6:8"},"referencedDeclaration":995,"src":"1900:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"id":1045,"nodeType":"VariableDeclarationStatement","src":"1900:17:8"},{"expression":{"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1046,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"1927:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1931:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"1927:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1049,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"1937:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1927:11:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1051,"nodeType":"ExpressionStatement","src":"1927:11:8"},{"expression":{"id":1057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1052,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"1948:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1952:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"1948:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1055,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"1963:1:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1965:6:8","memberName":"length","nodeType":"MemberAccess","src":"1963:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1948:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1058,"nodeType":"ExpressionStatement","src":"1948:23:8"},{"expression":{"id":1059,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"1988:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1041,"id":1060,"nodeType":"Return","src":"1981:10:8"}]},"documentation":{"id":1034,"nodeType":"StructuredDocumentation","src":"1581:232:8","text":" @dev Initializes a new buffer from an existing bytes object.\n      Changes to the buffer may mutate the original value.\n @param b The bytes object to initialize the buffer with.\n @return A new buffer."},"id":1062,"implemented":true,"kind":"function","modifiers":[],"name":"fromBytes","nameLocation":"1827:9:8","nodeType":"FunctionDefinition","parameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1036,"mutability":"mutable","name":"b","nameLocation":"1850:1:8","nodeType":"VariableDeclaration","scope":1062,"src":"1837:14:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"1837:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1836:16:8"},"returnParameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1062,"src":"1875:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1039,"nodeType":"UserDefinedTypeName","pathNode":{"id":1038,"name":"buffer","nameLocations":["1875:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"1875:6:8"},"referencedDeclaration":995,"src":"1875:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"1874:15:8"},"scope":1408,"src":"1818:180:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1085,"nodeType":"Block","src":"2067:104:8","statements":[{"assignments":[1071],"declarations":[{"constant":false,"id":1071,"mutability":"mutable","name":"oldbuf","nameLocation":"2090:6:8","nodeType":"VariableDeclaration","scope":1085,"src":"2077:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1070,"name":"bytes","nodeType":"ElementaryTypeName","src":"2077:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1074,"initialValue":{"expression":{"id":1072,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"2099:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1073,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2103:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"2099:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2077:29:8"},{"expression":{"arguments":[{"id":1076,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"2121:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1077,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"2126:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1075,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"2116:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2116:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1079,"nodeType":"ExpressionStatement","src":"2116:19:8"},{"expression":{"arguments":[{"id":1081,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1065,"src":"2152:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1082,"name":"oldbuf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"2157:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1080,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1188,1208,1314],"referencedDeclaration":1208,"src":"2145:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1084,"nodeType":"ExpressionStatement","src":"2145:19:8"}]},"id":1086,"implemented":true,"kind":"function","modifiers":[],"name":"resize","nameLocation":"2013:6:8","nodeType":"FunctionDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1065,"mutability":"mutable","name":"buf","nameLocation":"2034:3:8","nodeType":"VariableDeclaration","scope":1086,"src":"2020:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1064,"nodeType":"UserDefinedTypeName","pathNode":{"id":1063,"name":"buffer","nameLocations":["2020:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"2020:6:8"},"referencedDeclaration":995,"src":"2020:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1067,"mutability":"mutable","name":"capacity","nameLocation":"2044:8:8","nodeType":"VariableDeclaration","scope":1086,"src":"2039:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1066,"name":"uint","nodeType":"ElementaryTypeName","src":"2039:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2019:34:8"},"returnParameters":{"id":1069,"nodeType":"ParameterList","parameters":[],"src":"2067:0:8"},"scope":1408,"src":"2004:167:8","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1099,"nodeType":"Block","src":"2394:123:8","statements":[{"AST":{"nodeType":"YulBlock","src":"2413:78:8","statements":[{"nodeType":"YulVariableDeclaration","src":"2427:24:8","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"2447:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2441:5:8"},"nodeType":"YulFunctionCall","src":"2441:10:8"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"2431:6:8","type":""}]},{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"2471:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"2479:1:8","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2464:6:8"},"nodeType":"YulFunctionCall","src":"2464:17:8"},"nodeType":"YulExpressionStatement","src":"2464:17:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1090,"isOffset":false,"isSlot":false,"src":"2447:3:8","valueSize":1}],"id":1096,"nodeType":"InlineAssembly","src":"2404:87:8"},{"expression":{"id":1097,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"2507:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1095,"id":1098,"nodeType":"Return","src":"2500:10:8"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"2177:137:8","text":" @dev Sets buffer length to 0.\n @param buf The buffer to truncate.\n @return The original buffer, for chaining.."},"id":1100,"implemented":true,"kind":"function","modifiers":[],"name":"truncate","nameLocation":"2328:8:8","nodeType":"FunctionDefinition","parameters":{"id":1091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"buf","nameLocation":"2351:3:8","nodeType":"VariableDeclaration","scope":1100,"src":"2337:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1089,"nodeType":"UserDefinedTypeName","pathNode":{"id":1088,"name":"buffer","nameLocations":["2337:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"2337:6:8"},"referencedDeclaration":995,"src":"2337:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2336:19:8"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1094,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1100,"src":"2379:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1093,"nodeType":"UserDefinedTypeName","pathNode":{"id":1092,"name":"buffer","nameLocations":["2379:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"2379:6:8"},"referencedDeclaration":995,"src":"2379:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2378:15:8"},"scope":1408,"src":"2319:198:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1187,"nodeType":"Block","src":"2945:1326:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1115,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"2963:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":1116,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"2970:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2975:6:8","memberName":"length","nodeType":"MemberAccess","src":"2970:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2963:18:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1114,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"2955:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2955:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"ExpressionStatement","src":"2955:27:8"},{"assignments":[1122],"declarations":[{"constant":false,"id":1122,"mutability":"mutable","name":"off","nameLocation":"2998:3:8","nodeType":"VariableDeclaration","scope":1187,"src":"2993:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint","nodeType":"ElementaryTypeName","src":"2993:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1126,"initialValue":{"expression":{"expression":{"id":1123,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3004:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3008:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"3004:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3012:6:8","memberName":"length","nodeType":"MemberAccess","src":"3004:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2993:25:8"},{"assignments":[1128],"declarations":[{"constant":false,"id":1128,"mutability":"mutable","name":"newCapacity","nameLocation":"3033:11:8","nodeType":"VariableDeclaration","scope":1187,"src":"3028:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1127,"name":"uint","nodeType":"ElementaryTypeName","src":"3028:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1132,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1129,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"3047:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1130,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"3053:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3047:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3028:28:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1133,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"3070:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1134,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3084:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3088:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"3084:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3070:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1145,"nodeType":"IfStatement","src":"3066:85:8","trueBody":{"id":1144,"nodeType":"Block","src":"3098:53:8","statements":[{"expression":{"arguments":[{"id":1138,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"3119:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1139,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"3124:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3138:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"3124:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1137,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"3112:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3112:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1143,"nodeType":"ExpressionStatement","src":"3112:28:8"}]}},{"assignments":[1147],"declarations":[{"constant":false,"id":1147,"mutability":"mutable","name":"dest","nameLocation":"3166:4:8","nodeType":"VariableDeclaration","scope":1187,"src":"3161:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1146,"name":"uint","nodeType":"ElementaryTypeName","src":"3161:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1148,"nodeType":"VariableDeclarationStatement","src":"3161:9:8"},{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"src","nameLocation":"3185:3:8","nodeType":"VariableDeclaration","scope":1187,"src":"3180:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint","nodeType":"ElementaryTypeName","src":"3180:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1151,"nodeType":"VariableDeclarationStatement","src":"3180:8:8"},{"AST":{"nodeType":"YulBlock","src":"3207:498:8","statements":[{"nodeType":"YulVariableDeclaration","src":"3270:24:8","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"3290:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3284:5:8"},"nodeType":"YulFunctionCall","src":"3284:10:8"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"3274:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:27:8","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3373:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3367:5:8"},"nodeType":"YulFunctionCall","src":"3367:13:8"},"variables":[{"name":"buflen","nodeType":"YulTypedName","src":"3357:6:8","type":""}]},{"nodeType":"YulAssignment","src":"3472:33:8","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3488:6:8"},{"kind":"number","nodeType":"YulLiteral","src":"3496:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3484:3:8"},"nodeType":"YulFunctionCall","src":"3484:15:8"},{"name":"off","nodeType":"YulIdentifier","src":"3501:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3480:3:8"},"nodeType":"YulFunctionCall","src":"3480:25:8"},"variableNames":[{"name":"dest","nodeType":"YulIdentifier","src":"3472:4:8"}]},{"body":{"nodeType":"YulBlock","src":"3603:59:8","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"3628:6:8"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"3636:11:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3621:6:8"},"nodeType":"YulFunctionCall","src":"3621:27:8"},"nodeType":"YulExpressionStatement","src":"3621:27:8"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"3582:11:8"},{"name":"buflen","nodeType":"YulIdentifier","src":"3595:6:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3579:2:8"},"nodeType":"YulFunctionCall","src":"3579:23:8"},"nodeType":"YulIf","src":"3576:86:8"},{"nodeType":"YulAssignment","src":"3675:20:8","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3686:4:8"},{"kind":"number","nodeType":"YulLiteral","src":"3692:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3682:3:8"},"nodeType":"YulFunctionCall","src":"3682:13:8"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"3675:3:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1104,"isOffset":false,"isSlot":false,"src":"3290:3:8","valueSize":1},{"declaration":1106,"isOffset":false,"isSlot":false,"src":"3686:4:8","valueSize":1},{"declaration":1147,"isOffset":false,"isSlot":false,"src":"3472:4:8","valueSize":1},{"declaration":1128,"isOffset":false,"isSlot":false,"src":"3582:11:8","valueSize":1},{"declaration":1128,"isOffset":false,"isSlot":false,"src":"3636:11:8","valueSize":1},{"declaration":1122,"isOffset":false,"isSlot":false,"src":"3501:3:8","valueSize":1},{"declaration":1150,"isOffset":false,"isSlot":false,"src":"3675:3:8","valueSize":1}],"id":1152,"nodeType":"InlineAssembly","src":"3198:507:8"},{"body":{"id":1169,"nodeType":"Block","src":"3794:136:8","statements":[{"AST":{"nodeType":"YulBlock","src":"3817:56:8","statements":[{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"3842:4:8"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3854:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3848:5:8"},"nodeType":"YulFunctionCall","src":"3848:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3835:6:8"},"nodeType":"YulFunctionCall","src":"3835:24:8"},"nodeType":"YulExpressionStatement","src":"3835:24:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1147,"isOffset":false,"isSlot":false,"src":"3842:4:8","valueSize":1},{"declaration":1150,"isOffset":false,"isSlot":false,"src":"3854:3:8","valueSize":1}],"id":1160,"nodeType":"InlineAssembly","src":"3808:65:8"},{"expression":{"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1161,"name":"dest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3886:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3894:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3886:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1164,"nodeType":"ExpressionStatement","src":"3886:10:8"},{"expression":{"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1165,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"3910:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3917:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3910:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"nodeType":"ExpressionStatement","src":"3910:9:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1153,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"3772:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"3332","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3779:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3772:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1170,"loopExpression":{"expression":{"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1156,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"3783:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"3332","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3790:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"3783:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1159,"nodeType":"ExpressionStatement","src":"3783:9:8"},"nodeType":"ForStatement","src":"3765:165:8"},{"id":1184,"nodeType":"UncheckedBlock","src":"3972:272:8","statements":[{"assignments":[1172],"declarations":[{"constant":false,"id":1172,"mutability":"mutable","name":"mask","nameLocation":"4001:4:8","nodeType":"VariableDeclaration","scope":1184,"src":"3996:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint","nodeType":"ElementaryTypeName","src":"3996:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1182,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4009:3:8","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4017:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1175,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"4022:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4017:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4016:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4009:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1179,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4008:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4030:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4008:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3996:35:8"},{"AST":{"nodeType":"YulBlock","src":"4054:180:8","statements":[{"nodeType":"YulVariableDeclaration","src":"4072:41:8","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4097:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4091:5:8"},"nodeType":"YulFunctionCall","src":"4091:10:8"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4107:4:8"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4103:3:8"},"nodeType":"YulFunctionCall","src":"4103:9:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4087:3:8"},"nodeType":"YulFunctionCall","src":"4087:26:8"},"variables":[{"name":"srcpart","nodeType":"YulTypedName","src":"4076:7:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4130:38:8","value":{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4156:4:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4150:5:8"},"nodeType":"YulFunctionCall","src":"4150:11:8"},{"name":"mask","nodeType":"YulIdentifier","src":"4163:4:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4146:3:8"},"nodeType":"YulFunctionCall","src":"4146:22:8"},"variables":[{"name":"destpart","nodeType":"YulTypedName","src":"4134:8:8","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"4192:4:8"},{"arguments":[{"name":"destpart","nodeType":"YulIdentifier","src":"4201:8:8"},{"name":"srcpart","nodeType":"YulIdentifier","src":"4211:7:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4198:2:8"},"nodeType":"YulFunctionCall","src":"4198:21:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4185:6:8"},"nodeType":"YulFunctionCall","src":"4185:35:8"},"nodeType":"YulExpressionStatement","src":"4185:35:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1147,"isOffset":false,"isSlot":false,"src":"4156:4:8","valueSize":1},{"declaration":1147,"isOffset":false,"isSlot":false,"src":"4192:4:8","valueSize":1},{"declaration":1172,"isOffset":false,"isSlot":false,"src":"4107:4:8","valueSize":1},{"declaration":1172,"isOffset":false,"isSlot":false,"src":"4163:4:8","valueSize":1},{"declaration":1150,"isOffset":false,"isSlot":false,"src":"4097:3:8","valueSize":1}],"id":1183,"nodeType":"InlineAssembly","src":"4045:189:8"}]},{"expression":{"id":1185,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"4261:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1113,"id":1186,"nodeType":"Return","src":"4254:10:8"}]},"documentation":{"id":1101,"nodeType":"StructuredDocumentation","src":"2523:316:8","text":" @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to copy.\n @return The original buffer, for chaining."},"id":1188,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"2853:6:8","nodeType":"FunctionDefinition","parameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"buf","nameLocation":"2874:3:8","nodeType":"VariableDeclaration","scope":1188,"src":"2860:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1103,"nodeType":"UserDefinedTypeName","pathNode":{"id":1102,"name":"buffer","nameLocations":["2860:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"2860:6:8"},"referencedDeclaration":995,"src":"2860:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1106,"mutability":"mutable","name":"data","nameLocation":"2892:4:8","nodeType":"VariableDeclaration","scope":1188,"src":"2879:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1105,"name":"bytes","nodeType":"ElementaryTypeName","src":"2879:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1108,"mutability":"mutable","name":"len","nameLocation":"2903:3:8","nodeType":"VariableDeclaration","scope":1188,"src":"2898:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint","nodeType":"ElementaryTypeName","src":"2898:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2859:48:8"},"returnParameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1188,"src":"2930:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1111,"nodeType":"UserDefinedTypeName","pathNode":{"id":1110,"name":"buffer","nameLocations":["2930:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"2930:6:8"},"referencedDeclaration":995,"src":"2930:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"2929:15:8"},"scope":1408,"src":"2844:1427:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1207,"nodeType":"Block","src":"4631:54:8","statements":[{"expression":{"arguments":[{"id":1201,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"4655:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1202,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"4660:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1203,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"4666:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4671:6:8","memberName":"length","nodeType":"MemberAccess","src":"4666:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1200,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1188,1208,1314],"referencedDeclaration":1188,"src":"4648:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4648:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1199,"id":1206,"nodeType":"Return","src":"4641:37:8"}]},"documentation":{"id":1189,"nodeType":"StructuredDocumentation","src":"4277:257:8","text":" @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1208,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"4548:6:8","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"buf","nameLocation":"4569:3:8","nodeType":"VariableDeclaration","scope":1208,"src":"4555:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1191,"nodeType":"UserDefinedTypeName","pathNode":{"id":1190,"name":"buffer","nameLocations":["4555:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"4555:6:8"},"referencedDeclaration":995,"src":"4555:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"data","nameLocation":"4587:4:8","nodeType":"VariableDeclaration","scope":1208,"src":"4574:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"4574:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4554:38:8"},"returnParameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1208,"src":"4616:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1197,"nodeType":"UserDefinedTypeName","pathNode":{"id":1196,"name":"buffer","nameLocations":["4616:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"4616:6:8"},"referencedDeclaration":995,"src":"4616:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"4615:15:8"},"scope":1408,"src":"4539:146:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1248,"nodeType":"Block","src":"5037:610:8","statements":[{"assignments":[1221],"declarations":[{"constant":false,"id":1221,"mutability":"mutable","name":"off","nameLocation":"5052:3:8","nodeType":"VariableDeclaration","scope":1248,"src":"5047:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint","nodeType":"ElementaryTypeName","src":"5047:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1225,"initialValue":{"expression":{"expression":{"id":1222,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"5058:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5062:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"5058:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5066:6:8","memberName":"length","nodeType":"MemberAccess","src":"5058:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5047:25:8"},{"assignments":[1227],"declarations":[{"constant":false,"id":1227,"mutability":"mutable","name":"offPlusOne","nameLocation":"5087:10:8","nodeType":"VariableDeclaration","scope":1248,"src":"5082:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1226,"name":"uint","nodeType":"ElementaryTypeName","src":"5082:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1231,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1228,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"5100:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5106:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5100:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5082:25:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1232,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"5121:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":1233,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"5128:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5132:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"5128:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5121:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1244,"nodeType":"IfStatement","src":"5117:77:8","trueBody":{"id":1243,"nodeType":"Block","src":"5142:52:8","statements":[{"expression":{"arguments":[{"id":1237,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"5163:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1238,"name":"offPlusOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"5168:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5181:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"5168:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1236,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"5156:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5156:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1242,"nodeType":"ExpressionStatement","src":"5156:27:8"}]}},{"AST":{"nodeType":"YulBlock","src":"5213:407:8","statements":[{"nodeType":"YulVariableDeclaration","src":"5276:24:8","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"5296:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5290:5:8"},"nodeType":"YulFunctionCall","src":"5290:10:8"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"5280:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5383:37:8","value":{"arguments":[{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5403:6:8"},{"name":"off","nodeType":"YulIdentifier","src":"5411:3:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5399:3:8"},"nodeType":"YulFunctionCall","src":"5399:16:8"},{"kind":"number","nodeType":"YulLiteral","src":"5417:2:8","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:8"},"nodeType":"YulFunctionCall","src":"5395:25:8"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"5387:4:8","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"5441:4:8"},{"name":"data","nodeType":"YulIdentifier","src":"5447:4:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"5433:7:8"},"nodeType":"YulFunctionCall","src":"5433:19:8"},"nodeType":"YulExpressionStatement","src":"5433:19:8"},{"body":{"nodeType":"YulBlock","src":"5552:58:8","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5577:6:8"},{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5585:10:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5570:6:8"},"nodeType":"YulFunctionCall","src":"5570:26:8"},"nodeType":"YulExpressionStatement","src":"5570:26:8"}]},"condition":{"arguments":[{"name":"offPlusOne","nodeType":"YulIdentifier","src":"5525:10:8"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"5543:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5537:5:8"},"nodeType":"YulFunctionCall","src":"5537:13:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5522:2:8"},"nodeType":"YulFunctionCall","src":"5522:29:8"},"nodeType":"YulIf","src":"5519:91:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1212,"isOffset":false,"isSlot":false,"src":"5296:3:8","valueSize":1},{"declaration":1214,"isOffset":false,"isSlot":false,"src":"5447:4:8","valueSize":1},{"declaration":1221,"isOffset":false,"isSlot":false,"src":"5411:3:8","valueSize":1},{"declaration":1227,"isOffset":false,"isSlot":false,"src":"5525:10:8","valueSize":1},{"declaration":1227,"isOffset":false,"isSlot":false,"src":"5585:10:8","valueSize":1}],"id":1245,"nodeType":"InlineAssembly","src":"5204:416:8"},{"expression":{"id":1246,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"5637:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1219,"id":1247,"nodeType":"Return","src":"5630:10:8"}]},"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"4691:252:8","text":" @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n      capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"appendUint8","nameLocation":"4957:11:8","nodeType":"FunctionDefinition","parameters":{"id":1215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"buf","nameLocation":"4983:3:8","nodeType":"VariableDeclaration","scope":1249,"src":"4969:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1211,"nodeType":"UserDefinedTypeName","pathNode":{"id":1210,"name":"buffer","nameLocations":["4969:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"4969:6:8"},"referencedDeclaration":995,"src":"4969:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1214,"mutability":"mutable","name":"data","nameLocation":"4994:4:8","nodeType":"VariableDeclaration","scope":1249,"src":"4988:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1213,"name":"uint8","nodeType":"ElementaryTypeName","src":"4988:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4968:31:8"},"returnParameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1249,"src":"5022:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1217,"nodeType":"UserDefinedTypeName","pathNode":{"id":1216,"name":"buffer","nameLocations":["5022:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"5022:6:8"},"referencedDeclaration":995,"src":"5022:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"5021:15:8"},"scope":1408,"src":"4948:699:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1313,"nodeType":"Block","src":"6079:854:8","statements":[{"assignments":[1264],"declarations":[{"constant":false,"id":1264,"mutability":"mutable","name":"off","nameLocation":"6094:3:8","nodeType":"VariableDeclaration","scope":1313,"src":"6089:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint","nodeType":"ElementaryTypeName","src":"6089:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1268,"initialValue":{"expression":{"expression":{"id":1265,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"6100:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6104:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"6100:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6108:6:8","memberName":"length","nodeType":"MemberAccess","src":"6100:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6089:25:8"},{"assignments":[1270],"declarations":[{"constant":false,"id":1270,"mutability":"mutable","name":"newCapacity","nameLocation":"6129:11:8","nodeType":"VariableDeclaration","scope":1313,"src":"6124:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint","nodeType":"ElementaryTypeName","src":"6124:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1274,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1271,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"6143:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1272,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"6149:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6143:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6124:28:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1275,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"6166:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1276,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"6180:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6184:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"6180:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6166:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1287,"nodeType":"IfStatement","src":"6162:85:8","trueBody":{"id":1286,"nodeType":"Block","src":"6194:53:8","statements":[{"expression":{"arguments":[{"id":1280,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"6215:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1281,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"6220:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6234:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6220:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1279,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"6208:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6208:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1285,"nodeType":"ExpressionStatement","src":"6208:28:8"}]}},{"id":1310,"nodeType":"UncheckedBlock","src":"6257:650:8","statements":[{"assignments":[1289],"declarations":[{"constant":false,"id":1289,"mutability":"mutable","name":"mask","nameLocation":"6286:4:8","nodeType":"VariableDeclaration","scope":1310,"src":"6281:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1288,"name":"uint","nodeType":"ElementaryTypeName","src":"6281:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1296,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6294:3:8","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1291,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"6301:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6294:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1293,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6293:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6308:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6293:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6281:28:8"},{"expression":{"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1297,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"6355:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1298,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"6362:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":1299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6376:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1301,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"6381:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6376:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1303,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6375:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6371:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6370:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6362:24:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6355:31:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1308,"nodeType":"ExpressionStatement","src":"6355:31:8"},{"AST":{"nodeType":"YulBlock","src":"6409:488:8","statements":[{"nodeType":"YulVariableDeclaration","src":"6480:24:8","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"6500:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6494:5:8"},"nodeType":"YulFunctionCall","src":"6494:10:8"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"6484:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6603:36:8","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6619:6:8"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6627:11:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6615:3:8"},"nodeType":"YulFunctionCall","src":"6615:24:8"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"6607:4:8","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6663:4:8"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"6682:4:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6676:5:8"},"nodeType":"YulFunctionCall","src":"6676:11:8"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"6693:4:8"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6689:3:8"},"nodeType":"YulFunctionCall","src":"6689:9:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6672:3:8"},"nodeType":"YulFunctionCall","src":"6672:27:8"},{"name":"data","nodeType":"YulIdentifier","src":"6701:4:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"6669:2:8"},"nodeType":"YulFunctionCall","src":"6669:37:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6656:6:8"},"nodeType":"YulFunctionCall","src":"6656:51:8"},"nodeType":"YulExpressionStatement","src":"6656:51:8"},{"body":{"nodeType":"YulBlock","src":"6816:67:8","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6845:6:8"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"6853:11:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6838:6:8"},"nodeType":"YulFunctionCall","src":"6838:27:8"},"nodeType":"YulExpressionStatement","src":"6838:27:8"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"6788:11:8"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"6807:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6801:5:8"},"nodeType":"YulFunctionCall","src":"6801:13:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6785:2:8"},"nodeType":"YulFunctionCall","src":"6785:30:8"},"nodeType":"YulIf","src":"6782:101:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1253,"isOffset":false,"isSlot":false,"src":"6500:3:8","valueSize":1},{"declaration":1255,"isOffset":false,"isSlot":false,"src":"6701:4:8","valueSize":1},{"declaration":1289,"isOffset":false,"isSlot":false,"src":"6693:4:8","valueSize":1},{"declaration":1270,"isOffset":false,"isSlot":false,"src":"6627:11:8","valueSize":1},{"declaration":1270,"isOffset":false,"isSlot":false,"src":"6788:11:8","valueSize":1},{"declaration":1270,"isOffset":false,"isSlot":false,"src":"6853:11:8","valueSize":1}],"id":1309,"nodeType":"InlineAssembly","src":"6400:497:8"}]},{"expression":{"id":1311,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"6923:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1262,"id":1312,"nodeType":"Return","src":"6916:10:8"}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"5653:326:8","text":" @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (left-aligned).\n @return The original buffer, for chaining."},"id":1314,"implemented":true,"kind":"function","modifiers":[],"name":"append","nameLocation":"5993:6:8","nodeType":"FunctionDefinition","parameters":{"id":1258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"buf","nameLocation":"6014:3:8","nodeType":"VariableDeclaration","scope":1314,"src":"6000:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1252,"nodeType":"UserDefinedTypeName","pathNode":{"id":1251,"name":"buffer","nameLocations":["6000:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"6000:6:8"},"referencedDeclaration":995,"src":"6000:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1255,"mutability":"mutable","name":"data","nameLocation":"6027:4:8","nodeType":"VariableDeclaration","scope":1314,"src":"6019:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6019:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"len","nameLocation":"6038:3:8","nodeType":"VariableDeclaration","scope":1314,"src":"6033:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1256,"name":"uint","nodeType":"ElementaryTypeName","src":"6033:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5999:43:8"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1314,"src":"6064:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1260,"nodeType":"UserDefinedTypeName","pathNode":{"id":1259,"name":"buffer","nameLocations":["6064:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"6064:6:8"},"referencedDeclaration":995,"src":"6064:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"6063:15:8"},"scope":1408,"src":"5984:949:8","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1335,"nodeType":"Block","src":"7294:54:8","statements":[{"expression":{"arguments":[{"id":1327,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"7318:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"arguments":[{"id":1330,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"7331:4:8","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes20","typeString":"bytes20"}],"id":1329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7323:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7323:7:8","typeDescriptions":{}}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7323:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3230","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"}],"id":1326,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1188,1208,1314],"referencedDeclaration":1314,"src":"7311:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1325,"id":1334,"nodeType":"Return","src":"7304:37:8"}]},"documentation":{"id":1315,"nodeType":"StructuredDocumentation","src":"6939:256:8","text":" @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chhaining."},"id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes20","nameLocation":"7209:13:8","nodeType":"FunctionDefinition","parameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"buf","nameLocation":"7237:3:8","nodeType":"VariableDeclaration","scope":1336,"src":"7223:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1317,"nodeType":"UserDefinedTypeName","pathNode":{"id":1316,"name":"buffer","nameLocations":["7223:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"7223:6:8"},"referencedDeclaration":995,"src":"7223:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"data","nameLocation":"7250:4:8","nodeType":"VariableDeclaration","scope":1336,"src":"7242:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"},"typeName":{"id":1319,"name":"bytes20","nodeType":"ElementaryTypeName","src":"7242:7:8","typeDescriptions":{"typeIdentifier":"t_bytes20","typeString":"bytes20"}},"visibility":"internal"}],"src":"7222:33:8"},"returnParameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"7279:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1323,"nodeType":"UserDefinedTypeName","pathNode":{"id":1322,"name":"buffer","nameLocations":["7279:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"7279:6:8"},"referencedDeclaration":995,"src":"7279:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7278:15:8"},"scope":1408,"src":"7200:148:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1354,"nodeType":"Block","src":"7708:45:8","statements":[{"expression":{"arguments":[{"id":1349,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"7732:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1350,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"7737:4:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"3332","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7743:2:8","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"id":1348,"name":"append","nodeType":"Identifier","overloadedDeclarations":[1188,1208,1314],"referencedDeclaration":1314,"src":"7725:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes32_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes32,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7725:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1347,"id":1353,"nodeType":"Return","src":"7718:28:8"}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"7354:255:8","text":" @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n      the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @return The original buffer, for chaining."},"id":1355,"implemented":true,"kind":"function","modifiers":[],"name":"appendBytes32","nameLocation":"7623:13:8","nodeType":"FunctionDefinition","parameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1340,"mutability":"mutable","name":"buf","nameLocation":"7651:3:8","nodeType":"VariableDeclaration","scope":1355,"src":"7637:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1339,"nodeType":"UserDefinedTypeName","pathNode":{"id":1338,"name":"buffer","nameLocations":["7637:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"7637:6:8"},"referencedDeclaration":995,"src":"7637:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1342,"mutability":"mutable","name":"data","nameLocation":"7664:4:8","nodeType":"VariableDeclaration","scope":1355,"src":"7656:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7656:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7636:33:8"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1355,"src":"7693:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1345,"nodeType":"UserDefinedTypeName","pathNode":{"id":1344,"name":"buffer","nameLocations":["7693:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"7693:6:8"},"referencedDeclaration":995,"src":"7693:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"7692:15:8"},"scope":1408,"src":"7614:139:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"8179:699:8","statements":[{"assignments":[1370],"declarations":[{"constant":false,"id":1370,"mutability":"mutable","name":"off","nameLocation":"8194:3:8","nodeType":"VariableDeclaration","scope":1406,"src":"8189:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1369,"name":"uint","nodeType":"ElementaryTypeName","src":"8189:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1374,"initialValue":{"expression":{"expression":{"id":1371,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"8200:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1372,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8204:3:8","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"8200:7:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8208:6:8","memberName":"length","nodeType":"MemberAccess","src":"8200:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8189:25:8"},{"assignments":[1376],"declarations":[{"constant":false,"id":1376,"mutability":"mutable","name":"newCapacity","nameLocation":"8229:11:8","nodeType":"VariableDeclaration","scope":1406,"src":"8224:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint","nodeType":"ElementaryTypeName","src":"8224:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1380,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1377,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8243:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1378,"name":"off","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"8249:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8243:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8224:28:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1381,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"8266:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1382,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"8280:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1383,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8284:8:8","memberName":"capacity","nodeType":"MemberAccess","referencedDeclaration":994,"src":"8280:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8266:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1393,"nodeType":"IfStatement","src":"8262:85:8","trueBody":{"id":1392,"nodeType":"Block","src":"8294:53:8","statements":[{"expression":{"arguments":[{"id":1386,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"8315:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1387,"name":"newCapacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"8320:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"32","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8334:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"8320:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1385,"name":"resize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"8308:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct Buffer.buffer memory,uint256) pure"}},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8308:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1391,"nodeType":"ExpressionStatement","src":"8308:28:8"}]}},{"assignments":[1395],"declarations":[{"constant":false,"id":1395,"mutability":"mutable","name":"mask","nameLocation":"8362:4:8","nodeType":"VariableDeclaration","scope":1406,"src":"8357:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint","nodeType":"ElementaryTypeName","src":"8357:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1402,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"323536","id":1396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8370:3:8","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1397,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8377:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8370:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1399,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8369:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8384:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8369:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8357:28:8"},{"AST":{"nodeType":"YulBlock","src":"8404:448:8","statements":[{"nodeType":"YulVariableDeclaration","src":"8467:24:8","value":{"arguments":[{"name":"buf","nodeType":"YulIdentifier","src":"8487:3:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8481:5:8"},"nodeType":"YulFunctionCall","src":"8481:10:8"},"variables":[{"name":"bufptr","nodeType":"YulTypedName","src":"8471:6:8","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8582:36:8","value":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8598:6:8"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8606:11:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8594:3:8"},"nodeType":"YulFunctionCall","src":"8594:24:8"},"variables":[{"name":"dest","nodeType":"YulTypedName","src":"8586:4:8","type":""}]},{"expression":{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8638:4:8"},{"arguments":[{"arguments":[{"arguments":[{"name":"dest","nodeType":"YulIdentifier","src":"8657:4:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8651:5:8"},"nodeType":"YulFunctionCall","src":"8651:11:8"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"8668:4:8"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"8664:3:8"},"nodeType":"YulFunctionCall","src":"8664:9:8"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8647:3:8"},"nodeType":"YulFunctionCall","src":"8647:27:8"},{"name":"data","nodeType":"YulIdentifier","src":"8676:4:8"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"8644:2:8"},"nodeType":"YulFunctionCall","src":"8644:37:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8631:6:8"},"nodeType":"YulFunctionCall","src":"8631:51:8"},"nodeType":"YulExpressionStatement","src":"8631:51:8"},{"body":{"nodeType":"YulBlock","src":"8783:59:8","statements":[{"expression":{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8808:6:8"},{"name":"newCapacity","nodeType":"YulIdentifier","src":"8816:11:8"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8801:6:8"},"nodeType":"YulFunctionCall","src":"8801:27:8"},"nodeType":"YulExpressionStatement","src":"8801:27:8"}]},"condition":{"arguments":[{"name":"newCapacity","nodeType":"YulIdentifier","src":"8755:11:8"},{"arguments":[{"name":"bufptr","nodeType":"YulIdentifier","src":"8774:6:8"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8768:5:8"},"nodeType":"YulFunctionCall","src":"8768:13:8"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8752:2:8"},"nodeType":"YulFunctionCall","src":"8752:30:8"},"nodeType":"YulIf","src":"8749:93:8"}]},"evmVersion":"paris","externalReferences":[{"declaration":1359,"isOffset":false,"isSlot":false,"src":"8487:3:8","valueSize":1},{"declaration":1361,"isOffset":false,"isSlot":false,"src":"8676:4:8","valueSize":1},{"declaration":1395,"isOffset":false,"isSlot":false,"src":"8668:4:8","valueSize":1},{"declaration":1376,"isOffset":false,"isSlot":false,"src":"8606:11:8","valueSize":1},{"declaration":1376,"isOffset":false,"isSlot":false,"src":"8755:11:8","valueSize":1},{"declaration":1376,"isOffset":false,"isSlot":false,"src":"8816:11:8","valueSize":1}],"id":1403,"nodeType":"InlineAssembly","src":"8395:457:8"},{"expression":{"id":1404,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1359,"src":"8868:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"functionReturnParameters":1368,"id":1405,"nodeType":"Return","src":"8861:10:8"}]},"documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"7759:319:8","text":" @dev Appends a byte to the end of the buffer. Resizes if doing so would\n      exceed the capacity of the buffer.\n @param buf The buffer to append to.\n @param data The data to append.\n @param len The number of bytes to write (right-aligned).\n @return The original buffer."},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"appendInt","nameLocation":"8092:9:8","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"buf","nameLocation":"8116:3:8","nodeType":"VariableDeclaration","scope":1407,"src":"8102:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1358,"nodeType":"UserDefinedTypeName","pathNode":{"id":1357,"name":"buffer","nameLocations":["8102:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"8102:6:8"},"referencedDeclaration":995,"src":"8102:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1361,"mutability":"mutable","name":"data","nameLocation":"8126:4:8","nodeType":"VariableDeclaration","scope":1407,"src":"8121:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1360,"name":"uint","nodeType":"ElementaryTypeName","src":"8121:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1363,"mutability":"mutable","name":"len","nameLocation":"8137:3:8","nodeType":"VariableDeclaration","scope":1407,"src":"8132:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint","nodeType":"ElementaryTypeName","src":"8132:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8101:40:8"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"8164:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1366,"nodeType":"UserDefinedTypeName","pathNode":{"id":1365,"name":"buffer","nameLocations":["8164:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"8164:6:8"},"referencedDeclaration":995,"src":"8164:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"}],"src":"8163:15:8"},"scope":1408,"src":"8083:795:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1409,"src":"445:8435:8","usedErrors":[],"usedEvents":[]}],"src":"41:8839:8"},"id":8},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol","exportedSymbols":{"Buffer":[1408],"CBOR":[2267]},"id":2268,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1410,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol","file":"../../@ensdomains/buffer/v0.1.0/Buffer.sol","id":1411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2268,"sourceUnit":1409,"src":"57:52:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"CBOR","contractDependencies":[],"contractKind":"library","documentation":{"id":1412,"nodeType":"StructuredDocumentation","src":"111:553:9","text":" @dev A library for populating CBOR encoded payload in Solidity.\n https://datatracker.ietf.org/doc/html/rfc7049\n The library offers various write* and start* methods to encode values of different types.\n The resulted buffer can be obtained with data() method.\n Encoding of primitive types is staightforward, whereas encoding of sequences can result\n in an invalid CBOR if start/write/end flow is violated.\n For the purpose of gas saving, the library does not verify start/write/end flow internally,\n except for nested start/end pairs."},"fullyImplemented":true,"id":2267,"linearizedBaseContracts":[2267],"name":"CBOR","nameLocation":"674:4:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1416,"libraryName":{"id":1413,"name":"Buffer","nameLocations":["691:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1408,"src":"691:6:9"},"nodeType":"UsingForDirective","src":"685:31:9","typeName":{"id":1415,"nodeType":"UserDefinedTypeName","pathNode":{"id":1414,"name":"Buffer.buffer","nameLocations":["702:6:9","709:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"702:13:9"},"referencedDeclaration":995,"src":"702:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}}},{"canonicalName":"CBOR.CBORBuffer","id":1422,"members":[{"constant":false,"id":1419,"mutability":"mutable","name":"buf","nameLocation":"764:3:9","nodeType":"VariableDeclaration","scope":1422,"src":"750:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"},"typeName":{"id":1418,"nodeType":"UserDefinedTypeName","pathNode":{"id":1417,"name":"Buffer.buffer","nameLocations":["750:6:9","757:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":995,"src":"750:13:9"},"referencedDeclaration":995,"src":"750:13:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_storage_ptr","typeString":"struct Buffer.buffer"}},"visibility":"internal"},{"constant":false,"id":1421,"mutability":"mutable","name":"depth","nameLocation":"785:5:9","nodeType":"VariableDeclaration","scope":1422,"src":"777:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1420,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"CBORBuffer","nameLocation":"729:10:9","nodeType":"StructDefinition","scope":2267,"src":"722:75:9","visibility":"public"},{"constant":true,"id":1425,"mutability":"constant","name":"MAJOR_TYPE_INT","nameLocation":"826:14:9","nodeType":"VariableDeclaration","scope":2267,"src":"803:41:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1423,"name":"uint8","nodeType":"ElementaryTypeName","src":"803:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"30","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"843:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"constant":true,"id":1428,"mutability":"constant","name":"MAJOR_TYPE_NEGATIVE_INT","nameLocation":"873:23:9","nodeType":"VariableDeclaration","scope":2267,"src":"850:50:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1426,"name":"uint8","nodeType":"ElementaryTypeName","src":"850:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"31","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"899:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1431,"mutability":"constant","name":"MAJOR_TYPE_BYTES","nameLocation":"929:16:9","nodeType":"VariableDeclaration","scope":2267,"src":"906:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1429,"name":"uint8","nodeType":"ElementaryTypeName","src":"906:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"948:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1434,"mutability":"constant","name":"MAJOR_TYPE_STRING","nameLocation":"978:17:9","nodeType":"VariableDeclaration","scope":2267,"src":"955:44:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1432,"name":"uint8","nodeType":"ElementaryTypeName","src":"955:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"998:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1437,"mutability":"constant","name":"MAJOR_TYPE_ARRAY","nameLocation":"1028:16:9","nodeType":"VariableDeclaration","scope":2267,"src":"1005:43:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1435,"name":"uint8","nodeType":"ElementaryTypeName","src":"1005:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"34","id":1436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1047:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"private"},{"constant":true,"id":1440,"mutability":"constant","name":"MAJOR_TYPE_MAP","nameLocation":"1077:14:9","nodeType":"VariableDeclaration","scope":2267,"src":"1054:41:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1438,"name":"uint8","nodeType":"ElementaryTypeName","src":"1054:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"35","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1094:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"private"},{"constant":true,"id":1443,"mutability":"constant","name":"MAJOR_TYPE_TAG","nameLocation":"1124:14:9","nodeType":"VariableDeclaration","scope":2267,"src":"1101:41:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1441,"name":"uint8","nodeType":"ElementaryTypeName","src":"1101:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"36","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1141:1:9","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"private"},{"constant":true,"id":1446,"mutability":"constant","name":"MAJOR_TYPE_CONTENT_FREE","nameLocation":"1171:23:9","nodeType":"VariableDeclaration","scope":2267,"src":"1148:50:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1444,"name":"uint8","nodeType":"ElementaryTypeName","src":"1148:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"37","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1197:1:9","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"private"},{"constant":true,"id":1449,"mutability":"constant","name":"TAG_TYPE_BIGNUM","nameLocation":"1228:15:9","nodeType":"VariableDeclaration","scope":2267,"src":"1205:42:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1447,"name":"uint8","nodeType":"ElementaryTypeName","src":"1205:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"32","id":1448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1246:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":true,"id":1452,"mutability":"constant","name":"TAG_TYPE_NEGATIVE_BIGNUM","nameLocation":"1276:24:9","nodeType":"VariableDeclaration","scope":2267,"src":"1253:51:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1450,"name":"uint8","nodeType":"ElementaryTypeName","src":"1253:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"33","id":1451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1303:1:9","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1455,"mutability":"constant","name":"CBOR_FALSE","nameLocation":"1334:10:9","nodeType":"VariableDeclaration","scope":2267,"src":"1311:38:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1453,"name":"uint8","nodeType":"ElementaryTypeName","src":"1311:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1347:2:9","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"id":1458,"mutability":"constant","name":"CBOR_TRUE","nameLocation":"1378:9:9","nodeType":"VariableDeclaration","scope":2267,"src":"1355:37:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1456,"name":"uint8","nodeType":"ElementaryTypeName","src":"1355:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3231","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:2:9","typeDescriptions":{"typeIdentifier":"t_rational_21_by_1","typeString":"int_const 21"},"value":"21"},"visibility":"private"},{"constant":true,"id":1461,"mutability":"constant","name":"CBOR_NULL","nameLocation":"1421:9:9","nodeType":"VariableDeclaration","scope":2267,"src":"1398:37:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1459,"name":"uint8","nodeType":"ElementaryTypeName","src":"1398:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3232","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1433:2:9","typeDescriptions":{"typeIdentifier":"t_rational_22_by_1","typeString":"int_const 22"},"value":"22"},"visibility":"private"},{"constant":true,"id":1464,"mutability":"constant","name":"CBOR_UNDEFINED","nameLocation":"1464:14:9","nodeType":"VariableDeclaration","scope":2267,"src":"1441:42:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1462,"name":"uint8","nodeType":"ElementaryTypeName","src":"1441:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3233","id":1463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1481:2:9","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"visibility":"private"},{"body":{"id":1488,"nodeType":"Block","src":"1570:93:9","statements":[{"expression":{"arguments":[{"expression":{"id":1475,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"1592:4:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1476,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1597:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"1592:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},{"id":1477,"name":"capacity","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"1602:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1472,"name":"Buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"1580:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Buffer_$1408_$","typeString":"type(library Buffer)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1587:4:9","memberName":"init","nodeType":"MemberAccess","referencedDeclaration":1033,"src":"1580:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256) pure returns (struct Buffer.buffer memory)"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1580:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1479,"nodeType":"ExpressionStatement","src":"1580:31:9"},{"expression":{"id":1484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1480,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"1621:4:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1482,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1626:5:9","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"1621:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1634:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1621:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1485,"nodeType":"ExpressionStatement","src":"1621:14:9"},{"expression":{"id":1486,"name":"cbor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"1652:4:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"functionReturnParameters":1471,"id":1487,"nodeType":"Return","src":"1645:11:9"}]},"id":1489,"implemented":true,"kind":"function","modifiers":[],"name":"create","nameLocation":"1499:6:9","nodeType":"FunctionDefinition","parameters":{"id":1467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"capacity","nameLocation":"1514:8:9","nodeType":"VariableDeclaration","scope":1489,"src":"1506:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1465,"name":"uint256","nodeType":"ElementaryTypeName","src":"1506:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1505:18:9"},"returnParameters":{"id":1471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1470,"mutability":"mutable","name":"cbor","nameLocation":"1564:4:9","nodeType":"VariableDeclaration","scope":1489,"src":"1546:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1469,"nodeType":"UserDefinedTypeName","pathNode":{"id":1468,"name":"CBORBuffer","nameLocations":["1546:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"1546:10:9"},"referencedDeclaration":1422,"src":"1546:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"1545:24:9"},"scope":2267,"src":"1490:173:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1509,"nodeType":"Block","src":"1742:84:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1498,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1760:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1764:5:9","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"1760:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1773:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1760:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642043424f52","id":1502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1776:14:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234","typeString":"literal_string \"Invalid CBOR\""},"value":"Invalid CBOR"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd61d0da58dad259aa66f3fa1a93613cc3b690958f0ccf5500de84dec9fbf234","typeString":"literal_string \"Invalid CBOR\""}],"id":1497,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"1752:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1752:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1504,"nodeType":"ExpressionStatement","src":"1752:39:9"},{"expression":{"expression":{"expression":{"id":1505,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1808:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1506,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1812:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"1808:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1507,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1816:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":992,"src":"1808:11:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1496,"id":1508,"nodeType":"Return","src":"1801:18:9"}]},"id":1510,"implemented":true,"kind":"function","modifiers":[],"name":"data","nameLocation":"1678:4:9","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"buf","nameLocation":"1701:3:9","nodeType":"VariableDeclaration","scope":1510,"src":"1683:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1491,"nodeType":"UserDefinedTypeName","pathNode":{"id":1490,"name":"CBORBuffer","nameLocations":["1683:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"1683:10:9"},"referencedDeclaration":1422,"src":"1683:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"1682:23:9"},"returnParameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1510,"src":"1728:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1494,"name":"bytes","nodeType":"ElementaryTypeName","src":"1728:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1727:14:9"},"scope":2267,"src":"1669:157:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1542,"nodeType":"Block","src":"1906:128:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1525,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"1943:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1961:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"1943:19:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1528,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1942:21:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1529,"name":"TAG_TYPE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"1966:15:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"1942:39:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1936:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1523,"name":"uint8","nodeType":"ElementaryTypeName","src":"1936:5:9","typeDescriptions":{}}},"id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1936:46:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":1518,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"1916:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1920:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"1916:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1522,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1924:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"1916:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1916:67:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1533,"nodeType":"ExpressionStatement","src":"1916:67:9"},{"expression":{"arguments":[{"id":1535,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"2004:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"id":1538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"2020:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1536,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2009:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2013:6:9","memberName":"encode","nodeType":"MemberAccess","src":"2009:10:9","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:17:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1534,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"1993:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1993:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1541,"nodeType":"ExpressionStatement","src":"1993:34:9"}]},"id":1543,"implemented":true,"kind":"function","modifiers":[],"name":"writeUInt256","nameLocation":"1841:12:9","nodeType":"FunctionDefinition","parameters":{"id":1516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"buf","nameLocation":"1872:3:9","nodeType":"VariableDeclaration","scope":1543,"src":"1854:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1512,"nodeType":"UserDefinedTypeName","pathNode":{"id":1511,"name":"CBORBuffer","nameLocations":["1854:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"1854:10:9"},"referencedDeclaration":1422,"src":"1854:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1515,"mutability":"mutable","name":"value","nameLocation":"1885:5:9","nodeType":"VariableDeclaration","scope":1543,"src":"1877:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1514,"name":"uint256","nodeType":"ElementaryTypeName","src":"1877:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1853:38:9"},"returnParameters":{"id":1517,"nodeType":"ParameterList","parameters":[],"src":"1906:0:9"},"scope":2267,"src":"1832:202:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1595,"nodeType":"Block","src":"2112:288:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1551,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"2126:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2134:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2126:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1593,"nodeType":"Block","src":"2336:58:9","statements":[{"expression":{"arguments":[{"id":1586,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2363:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"id":1589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"2376:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2368:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1587,"name":"uint256","nodeType":"ElementaryTypeName","src":"2368:7:9","typeDescriptions":{}}},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2368:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1585,"name":"writeUInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"2350:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2350:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1592,"nodeType":"ExpressionStatement","src":"2350:33:9"}]},"id":1594,"nodeType":"IfStatement","src":"2122:272:9","trueBody":{"id":1584,"nodeType":"Block","src":"2137:193:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":1563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":1561,"name":"MAJOR_TYPE_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"2195:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2213:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"2195:19:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2194:21:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1565,"name":"TAG_TYPE_NEGATIVE_BIGNUM","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"2218:24:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2194:48:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2188:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1559,"name":"uint8","nodeType":"ElementaryTypeName","src":"2188:5:9","typeDescriptions":{}}},"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2188:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":1554,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2151:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2155:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"2151:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1558,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2159:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"2151:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2151:106:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1569,"nodeType":"ExpressionStatement","src":"2151:106:9"},{"expression":{"arguments":[{"id":1571,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"2282:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2306:2:9","subExpression":{"hexValue":"31","id":1576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2307:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1578,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1548,"src":"2311:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"2306:10:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2298:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1574,"name":"uint256","nodeType":"ElementaryTypeName","src":"2298:7:9","typeDescriptions":{}}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2298:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1572,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"2287:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2291:6:9","memberName":"encode","nodeType":"MemberAccess","src":"2287:10:9","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1570,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"2271:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2271:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1583,"nodeType":"ExpressionStatement","src":"2271:48:9"}]}}]},"id":1596,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt256","nameLocation":"2049:11:9","nodeType":"FunctionDefinition","parameters":{"id":1549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1546,"mutability":"mutable","name":"buf","nameLocation":"2079:3:9","nodeType":"VariableDeclaration","scope":1596,"src":"2061:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1545,"nodeType":"UserDefinedTypeName","pathNode":{"id":1544,"name":"CBORBuffer","nameLocations":["2061:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"2061:10:9"},"referencedDeclaration":1422,"src":"2061:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1548,"mutability":"mutable","name":"value","nameLocation":"2091:5:9","nodeType":"VariableDeclaration","scope":1596,"src":"2084:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1547,"name":"int256","nodeType":"ElementaryTypeName","src":"2084:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"2060:37:9"},"returnParameters":{"id":1550,"nodeType":"ParameterList","parameters":[],"src":"2112:0:9"},"scope":2267,"src":"2040:360:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1610,"nodeType":"Block","src":"2478:62:9","statements":[{"expression":{"arguments":[{"id":1605,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"2506:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1606,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2511:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"2527:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1604,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"2488:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2488:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1609,"nodeType":"ExpressionStatement","src":"2488:45:9"}]},"id":1611,"implemented":true,"kind":"function","modifiers":[],"name":"writeUInt64","nameLocation":"2415:11:9","nodeType":"FunctionDefinition","parameters":{"id":1602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"buf","nameLocation":"2445:3:9","nodeType":"VariableDeclaration","scope":1611,"src":"2427:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1598,"nodeType":"UserDefinedTypeName","pathNode":{"id":1597,"name":"CBORBuffer","nameLocations":["2427:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"2427:10:9"},"referencedDeclaration":1422,"src":"2427:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1601,"mutability":"mutable","name":"value","nameLocation":"2457:5:9","nodeType":"VariableDeclaration","scope":1611,"src":"2450:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1600,"name":"uint64","nodeType":"ElementaryTypeName","src":"2450:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2426:37:9"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[],"src":"2478:0:9"},"scope":2267,"src":"2406:134:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1646,"nodeType":"Block","src":"2616:206:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"2629:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2638:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2629:10:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1644,"nodeType":"Block","src":"2724:92:9","statements":[{"expression":{"arguments":[{"id":1633,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2756:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1634,"name":"MAJOR_TYPE_NEGATIVE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"2761:23:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"commonType":{"typeIdentifier":"t_int64","typeString":"int64"},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"2793:2:9","subExpression":{"hexValue":"31","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2794:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1639,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"2798:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"src":"2793:10:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2786:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1635,"name":"uint64","nodeType":"ElementaryTypeName","src":"2786:6:9","typeDescriptions":{}}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2786:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1632,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"2738:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:67:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1643,"nodeType":"ExpressionStatement","src":"2738:67:9"}]},"id":1645,"nodeType":"IfStatement","src":"2626:190:9","trueBody":{"id":1631,"nodeType":"Block","src":"2641:78:9","statements":[{"expression":{"arguments":[{"id":1623,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2673:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1624,"name":"MAJOR_TYPE_INT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"2678:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"id":1627,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"2701:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int64","typeString":"int64"}],"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2694:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1625,"name":"uint64","nodeType":"ElementaryTypeName","src":"2694:6:9","typeDescriptions":{}}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2694:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1622,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"2655:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2655:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1630,"nodeType":"ExpressionStatement","src":"2655:53:9"}]}}]},"id":1647,"implemented":true,"kind":"function","modifiers":[],"name":"writeInt64","nameLocation":"2555:10:9","nodeType":"FunctionDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1614,"mutability":"mutable","name":"buf","nameLocation":"2584:3:9","nodeType":"VariableDeclaration","scope":1647,"src":"2566:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1613,"nodeType":"UserDefinedTypeName","pathNode":{"id":1612,"name":"CBORBuffer","nameLocations":["2566:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"2566:10:9"},"referencedDeclaration":1422,"src":"2566:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"value","nameLocation":"2595:5:9","nodeType":"VariableDeclaration","scope":1647,"src":"2589:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":1615,"name":"int64","nodeType":"ElementaryTypeName","src":"2589:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"2565:36:9"},"returnParameters":{"id":1618,"nodeType":"ParameterList","parameters":[],"src":"2616:0:9"},"scope":2267,"src":"2546:276:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1673,"nodeType":"Block","src":"2905:110:9","statements":[{"expression":{"arguments":[{"id":1656,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"2933:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1657,"name":"MAJOR_TYPE_BYTES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"2938:16:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"id":1660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"2963:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2969:6:9","memberName":"length","nodeType":"MemberAccess","src":"2963:12:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1659,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2956:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1658,"name":"uint64","nodeType":"ElementaryTypeName","src":"2956:6:9","typeDescriptions":{}}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2956:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1655,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"2915:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2915:62:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1664,"nodeType":"ExpressionStatement","src":"2915:62:9"},{"expression":{"arguments":[{"id":1670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"3002:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":1665,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1650,"src":"2987:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2991:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"2987:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1669,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2995:6:9","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1208,"src":"2987:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2987:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1672,"nodeType":"ExpressionStatement","src":"2987:21:9"}]},"id":1674,"implemented":true,"kind":"function","modifiers":[],"name":"writeBytes","nameLocation":"2837:10:9","nodeType":"FunctionDefinition","parameters":{"id":1653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"buf","nameLocation":"2866:3:9","nodeType":"VariableDeclaration","scope":1674,"src":"2848:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1649,"nodeType":"UserDefinedTypeName","pathNode":{"id":1648,"name":"CBORBuffer","nameLocations":["2848:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"2848:10:9"},"referencedDeclaration":1422,"src":"2848:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"value","nameLocation":"2884:5:9","nodeType":"VariableDeclaration","scope":1674,"src":"2871:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1651,"name":"bytes","nodeType":"ElementaryTypeName","src":"2871:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2847:43:9"},"returnParameters":{"id":1654,"nodeType":"ParameterList","parameters":[],"src":"2905:0:9"},"scope":2267,"src":"2828:187:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1706,"nodeType":"Block","src":"3100:125:9","statements":[{"expression":{"arguments":[{"id":1683,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"3128:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1684,"name":"MAJOR_TYPE_STRING","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"3133:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"arguments":[{"expression":{"arguments":[{"id":1689,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"3165:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3159:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1687,"name":"bytes","nodeType":"ElementaryTypeName","src":"3159:5:9","typeDescriptions":{}}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3159:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3172:6:9","memberName":"length","nodeType":"MemberAccess","src":"3159:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3152:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint64_$","typeString":"type(uint64)"},"typeName":{"id":1685,"name":"uint64","nodeType":"ElementaryTypeName","src":"3152:6:9","typeDescriptions":{}}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3152:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1682,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"3110:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3110:70:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1694,"nodeType":"ExpressionStatement","src":"3110:70:9"},{"expression":{"arguments":[{"arguments":[{"id":1702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"3211:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3205:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1700,"name":"bytes","nodeType":"ElementaryTypeName","src":"3205:5:9","typeDescriptions":{}}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3205:12:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"expression":{"id":1695,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1677,"src":"3190:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3194:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"3190:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3198:6:9","memberName":"append","nodeType":"MemberAccess","referencedDeclaration":1208,"src":"3190:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,bytes memory) pure returns (struct Buffer.buffer memory)"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3190:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":1705,"nodeType":"ExpressionStatement","src":"3190:28:9"}]},"id":1707,"implemented":true,"kind":"function","modifiers":[],"name":"writeString","nameLocation":"3030:11:9","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"buf","nameLocation":"3060:3:9","nodeType":"VariableDeclaration","scope":1707,"src":"3042:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1676,"nodeType":"UserDefinedTypeName","pathNode":{"id":1675,"name":"CBORBuffer","nameLocations":["3042:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3042:10:9"},"referencedDeclaration":1422,"src":"3042:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1679,"mutability":"mutable","name":"value","nameLocation":"3079:5:9","nodeType":"VariableDeclaration","scope":1707,"src":"3065:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1678,"name":"string","nodeType":"ElementaryTypeName","src":"3065:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3041:44:9"},"returnParameters":{"id":1681,"nodeType":"ParameterList","parameters":[],"src":"3100:0:9"},"scope":2267,"src":"3021:204:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1723,"nodeType":"Block","src":"3299:70:9","statements":[{"expression":{"arguments":[{"id":1716,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"3326:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"condition":{"id":1717,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3331:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1719,"name":"CBOR_FALSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"3351:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3331:30:9","trueExpression":{"id":1718,"name":"CBOR_TRUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"3339:9:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1715,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"3309:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3309:53:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1722,"nodeType":"ExpressionStatement","src":"3309:53:9"}]},"id":1724,"implemented":true,"kind":"function","modifiers":[],"name":"writeBool","nameLocation":"3240:9:9","nodeType":"FunctionDefinition","parameters":{"id":1713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"buf","nameLocation":"3268:3:9","nodeType":"VariableDeclaration","scope":1724,"src":"3250:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1709,"nodeType":"UserDefinedTypeName","pathNode":{"id":1708,"name":"CBORBuffer","nameLocations":["3250:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3250:10:9"},"referencedDeclaration":1422,"src":"3250:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1712,"mutability":"mutable","name":"value","nameLocation":"3278:5:9","nodeType":"VariableDeclaration","scope":1724,"src":"3273:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1711,"name":"bool","nodeType":"ElementaryTypeName","src":"3273:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3249:35:9"},"returnParameters":{"id":1714,"nodeType":"ParameterList","parameters":[],"src":"3299:0:9"},"scope":2267,"src":"3231:138:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1735,"nodeType":"Block","src":"3431:49:9","statements":[{"expression":{"arguments":[{"id":1731,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"3458:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1732,"name":"CBOR_NULL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3463:9:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1730,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"3441:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3441:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1734,"nodeType":"ExpressionStatement","src":"3441:32:9"}]},"id":1736,"implemented":true,"kind":"function","modifiers":[],"name":"writeNull","nameLocation":"3384:9:9","nodeType":"FunctionDefinition","parameters":{"id":1728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1727,"mutability":"mutable","name":"buf","nameLocation":"3412:3:9","nodeType":"VariableDeclaration","scope":1736,"src":"3394:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1726,"nodeType":"UserDefinedTypeName","pathNode":{"id":1725,"name":"CBORBuffer","nameLocations":["3394:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3394:10:9"},"referencedDeclaration":1422,"src":"3394:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3393:23:9"},"returnParameters":{"id":1729,"nodeType":"ParameterList","parameters":[],"src":"3431:0:9"},"scope":2267,"src":"3375:105:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1747,"nodeType":"Block","src":"3547:54:9","statements":[{"expression":{"arguments":[{"id":1743,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1739,"src":"3574:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1744,"name":"CBOR_UNDEFINED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"3579:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1742,"name":"writeContentFree","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"3557:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3557:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1746,"nodeType":"ExpressionStatement","src":"3557:37:9"}]},"id":1748,"implemented":true,"kind":"function","modifiers":[],"name":"writeUndefined","nameLocation":"3495:14:9","nodeType":"FunctionDefinition","parameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"buf","nameLocation":"3528:3:9","nodeType":"VariableDeclaration","scope":1748,"src":"3510:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1738,"nodeType":"UserDefinedTypeName","pathNode":{"id":1737,"name":"CBORBuffer","nameLocations":["3510:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3510:10:9"},"referencedDeclaration":1422,"src":"3510:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3509:23:9"},"returnParameters":{"id":1741,"nodeType":"ParameterList","parameters":[],"src":"3547:0:9"},"scope":2267,"src":"3486:115:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1765,"nodeType":"Block","src":"3664:89:9","statements":[{"expression":{"arguments":[{"id":1755,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"3700:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1756,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"3705:16:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1754,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"3674:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3674:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1758,"nodeType":"ExpressionStatement","src":"3674:48:9"},{"expression":{"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1759,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"3732:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3736:5:9","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"3732:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3745:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3732:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1764,"nodeType":"ExpressionStatement","src":"3732:14:9"}]},"id":1766,"implemented":true,"kind":"function","modifiers":[],"name":"startArray","nameLocation":"3616:10:9","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"buf","nameLocation":"3645:3:9","nodeType":"VariableDeclaration","scope":1766,"src":"3627:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1750,"nodeType":"UserDefinedTypeName","pathNode":{"id":1749,"name":"CBORBuffer","nameLocations":["3627:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3627:10:9"},"referencedDeclaration":1422,"src":"3627:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3626:23:9"},"returnParameters":{"id":1753,"nodeType":"ParameterList","parameters":[],"src":"3664:0:9"},"scope":2267,"src":"3607:146:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1780,"nodeType":"Block","src":"3836:71:9","statements":[{"expression":{"arguments":[{"id":1775,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"3870:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1776,"name":"MAJOR_TYPE_ARRAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"3875:16:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1777,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1771,"src":"3893:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1774,"name":"writeDefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"3846:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:54:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1779,"nodeType":"ExpressionStatement","src":"3846:54:9"}]},"id":1781,"implemented":true,"kind":"function","modifiers":[],"name":"startFixedArray","nameLocation":"3768:15:9","nodeType":"FunctionDefinition","parameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"buf","nameLocation":"3802:3:9","nodeType":"VariableDeclaration","scope":1781,"src":"3784:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1768,"nodeType":"UserDefinedTypeName","pathNode":{"id":1767,"name":"CBORBuffer","nameLocations":["3784:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3784:10:9"},"referencedDeclaration":1422,"src":"3784:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1771,"mutability":"mutable","name":"length","nameLocation":"3814:6:9","nodeType":"VariableDeclaration","scope":1781,"src":"3807:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1770,"name":"uint64","nodeType":"ElementaryTypeName","src":"3807:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3783:38:9"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[],"src":"3836:0:9"},"scope":2267,"src":"3759:148:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1798,"nodeType":"Block","src":"3968:87:9","statements":[{"expression":{"arguments":[{"id":1788,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"4004:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1789,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"4009:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1787,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"3978:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3978:46:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1791,"nodeType":"ExpressionStatement","src":"3978:46:9"},{"expression":{"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1792,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1784,"src":"4034:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4038:5:9","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"4034:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4047:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4034:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1797,"nodeType":"ExpressionStatement","src":"4034:14:9"}]},"id":1799,"implemented":true,"kind":"function","modifiers":[],"name":"startMap","nameLocation":"3922:8:9","nodeType":"FunctionDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"buf","nameLocation":"3949:3:9","nodeType":"VariableDeclaration","scope":1799,"src":"3931:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1783,"nodeType":"UserDefinedTypeName","pathNode":{"id":1782,"name":"CBORBuffer","nameLocations":["3931:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"3931:10:9"},"referencedDeclaration":1422,"src":"3931:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"3930:23:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[],"src":"3968:0:9"},"scope":2267,"src":"3913:142:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1813,"nodeType":"Block","src":"4136:69:9","statements":[{"expression":{"arguments":[{"id":1808,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"4170:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1809,"name":"MAJOR_TYPE_MAP","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"4175:14:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1810,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"4191:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1807,"name":"writeDefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"4146:23:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4146:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1812,"nodeType":"ExpressionStatement","src":"4146:52:9"}]},"id":1814,"implemented":true,"kind":"function","modifiers":[],"name":"startFixedMap","nameLocation":"4070:13:9","nodeType":"FunctionDefinition","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"buf","nameLocation":"4102:3:9","nodeType":"VariableDeclaration","scope":1814,"src":"4084:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1801,"nodeType":"UserDefinedTypeName","pathNode":{"id":1800,"name":"CBORBuffer","nameLocations":["4084:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4084:10:9"},"referencedDeclaration":1422,"src":"4084:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1804,"mutability":"mutable","name":"length","nameLocation":"4114:6:9","nodeType":"VariableDeclaration","scope":1814,"src":"4107:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1803,"name":"uint64","nodeType":"ElementaryTypeName","src":"4107:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4083:38:9"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[],"src":"4136:0:9"},"scope":2267,"src":"4061:144:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1831,"nodeType":"Block","src":"4269:96:9","statements":[{"expression":{"arguments":[{"id":1821,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"4305:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1822,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"4310:23:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1820,"name":"writeIndefiniteLengthType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2224,"src":"4279:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8) pure"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4279:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1824,"nodeType":"ExpressionStatement","src":"4279:55:9"},{"expression":{"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1825,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1817,"src":"4344:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":1827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4348:5:9","memberName":"depth","nodeType":"MemberAccess","referencedDeclaration":1421,"src":"4344:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4357:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4344:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1830,"nodeType":"ExpressionStatement","src":"4344:14:9"}]},"id":1832,"implemented":true,"kind":"function","modifiers":[],"name":"endSequence","nameLocation":"4220:11:9","nodeType":"FunctionDefinition","parameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"buf","nameLocation":"4250:3:9","nodeType":"VariableDeclaration","scope":1832,"src":"4232:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1816,"nodeType":"UserDefinedTypeName","pathNode":{"id":1815,"name":"CBORBuffer","nameLocations":["4232:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4232:10:9"},"referencedDeclaration":1422,"src":"4232:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"}],"src":"4231:23:9"},"returnParameters":{"id":1819,"nodeType":"ParameterList","parameters":[],"src":"4269:0:9"},"scope":2267,"src":"4211:154:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1852,"nodeType":"Block","src":"4471:71:9","statements":[{"expression":{"arguments":[{"id":1843,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"4493:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1844,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"4498:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1842,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4481:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4481:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1846,"nodeType":"ExpressionStatement","src":"4481:21:9"},{"expression":{"arguments":[{"id":1848,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1835,"src":"4524:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1849,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"4529:5:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1847,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4512:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4512:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1851,"nodeType":"ExpressionStatement","src":"4512:23:9"}]},"id":1853,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVString","nameLocation":"4380:13:9","nodeType":"FunctionDefinition","parameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1835,"mutability":"mutable","name":"buf","nameLocation":"4412:3:9","nodeType":"VariableDeclaration","scope":1853,"src":"4394:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1834,"nodeType":"UserDefinedTypeName","pathNode":{"id":1833,"name":"CBORBuffer","nameLocations":["4394:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4394:10:9"},"referencedDeclaration":1422,"src":"4394:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"key","nameLocation":"4431:3:9","nodeType":"VariableDeclaration","scope":1853,"src":"4417:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1836,"name":"string","nodeType":"ElementaryTypeName","src":"4417:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"value","nameLocation":"4450:5:9","nodeType":"VariableDeclaration","scope":1853,"src":"4436:19:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1838,"name":"string","nodeType":"ElementaryTypeName","src":"4436:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4393:63:9"},"returnParameters":{"id":1841,"nodeType":"ParameterList","parameters":[],"src":"4471:0:9"},"scope":2267,"src":"4371:171:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1873,"nodeType":"Block","src":"4646:70:9","statements":[{"expression":{"arguments":[{"id":1864,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"4668:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1865,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"4673:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1863,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4656:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4656:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1867,"nodeType":"ExpressionStatement","src":"4656:21:9"},{"expression":{"arguments":[{"id":1869,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"4698:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1870,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"4703:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1868,"name":"writeBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1674,"src":"4687:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bytes memory) pure"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4687:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1872,"nodeType":"ExpressionStatement","src":"4687:22:9"}]},"id":1874,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVBytes","nameLocation":"4557:12:9","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"buf","nameLocation":"4588:3:9","nodeType":"VariableDeclaration","scope":1874,"src":"4570:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1855,"nodeType":"UserDefinedTypeName","pathNode":{"id":1854,"name":"CBORBuffer","nameLocations":["4570:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4570:10:9"},"referencedDeclaration":1422,"src":"4570:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"key","nameLocation":"4607:3:9","nodeType":"VariableDeclaration","scope":1874,"src":"4593:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1857,"name":"string","nodeType":"ElementaryTypeName","src":"4593:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"value","nameLocation":"4625:5:9","nodeType":"VariableDeclaration","scope":1874,"src":"4612:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1859,"name":"bytes","nodeType":"ElementaryTypeName","src":"4612:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4569:62:9"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[],"src":"4646:0:9"},"scope":2267,"src":"4548:168:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1894,"nodeType":"Block","src":"4817:72:9","statements":[{"expression":{"arguments":[{"id":1885,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"4839:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1886,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"4844:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1884,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4827:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4827:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1888,"nodeType":"ExpressionStatement","src":"4827:21:9"},{"expression":{"arguments":[{"id":1890,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"4871:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1881,"src":"4876:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1889,"name":"writeUInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"4858:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint256) pure"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4858:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1893,"nodeType":"ExpressionStatement","src":"4858:24:9"}]},"id":1895,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUInt256","nameLocation":"4731:14:9","nodeType":"FunctionDefinition","parameters":{"id":1882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"buf","nameLocation":"4764:3:9","nodeType":"VariableDeclaration","scope":1895,"src":"4746:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1876,"nodeType":"UserDefinedTypeName","pathNode":{"id":1875,"name":"CBORBuffer","nameLocations":["4746:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4746:10:9"},"referencedDeclaration":1422,"src":"4746:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"key","nameLocation":"4783:3:9","nodeType":"VariableDeclaration","scope":1895,"src":"4769:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1878,"name":"string","nodeType":"ElementaryTypeName","src":"4769:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1881,"mutability":"mutable","name":"value","nameLocation":"4796:5:9","nodeType":"VariableDeclaration","scope":1895,"src":"4788:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"4788:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4745:57:9"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[],"src":"4817:0:9"},"scope":2267,"src":"4722:167:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1915,"nodeType":"Block","src":"4988:71:9","statements":[{"expression":{"arguments":[{"id":1906,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"5010:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1907,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"5015:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1905,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4998:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4998:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1909,"nodeType":"ExpressionStatement","src":"4998:21:9"},{"expression":{"arguments":[{"id":1911,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"5041:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1912,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"5046:5:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1910,"name":"writeInt256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5029:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_int256_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,int256) pure"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5029:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1914,"nodeType":"ExpressionStatement","src":"5029:23:9"}]},"id":1916,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVInt256","nameLocation":"4904:13:9","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"buf","nameLocation":"4936:3:9","nodeType":"VariableDeclaration","scope":1916,"src":"4918:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1897,"nodeType":"UserDefinedTypeName","pathNode":{"id":1896,"name":"CBORBuffer","nameLocations":["4918:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"4918:10:9"},"referencedDeclaration":1422,"src":"4918:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1900,"mutability":"mutable","name":"key","nameLocation":"4955:3:9","nodeType":"VariableDeclaration","scope":1916,"src":"4941:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1899,"name":"string","nodeType":"ElementaryTypeName","src":"4941:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"value","nameLocation":"4967:5:9","nodeType":"VariableDeclaration","scope":1916,"src":"4960:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1901,"name":"int256","nodeType":"ElementaryTypeName","src":"4960:6:9","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"4917:56:9"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[],"src":"4988:0:9"},"scope":2267,"src":"4895:164:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1936,"nodeType":"Block","src":"5158:71:9","statements":[{"expression":{"arguments":[{"id":1927,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"5180:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1928,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"5185:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1926,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5168:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5168:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1930,"nodeType":"ExpressionStatement","src":"5168:21:9"},{"expression":{"arguments":[{"id":1932,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"5211:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1933,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"5216:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":1931,"name":"writeUInt64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"5199:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint64) pure"}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5199:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1935,"nodeType":"ExpressionStatement","src":"5199:23:9"}]},"id":1937,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUInt64","nameLocation":"5074:13:9","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1919,"mutability":"mutable","name":"buf","nameLocation":"5106:3:9","nodeType":"VariableDeclaration","scope":1937,"src":"5088:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1918,"nodeType":"UserDefinedTypeName","pathNode":{"id":1917,"name":"CBORBuffer","nameLocations":["5088:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5088:10:9"},"referencedDeclaration":1422,"src":"5088:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1921,"mutability":"mutable","name":"key","nameLocation":"5125:3:9","nodeType":"VariableDeclaration","scope":1937,"src":"5111:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1920,"name":"string","nodeType":"ElementaryTypeName","src":"5111:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"value","nameLocation":"5137:5:9","nodeType":"VariableDeclaration","scope":1937,"src":"5130:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1922,"name":"uint64","nodeType":"ElementaryTypeName","src":"5130:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5087:56:9"},"returnParameters":{"id":1925,"nodeType":"ParameterList","parameters":[],"src":"5158:0:9"},"scope":2267,"src":"5065:164:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1957,"nodeType":"Block","src":"5326:70:9","statements":[{"expression":{"arguments":[{"id":1948,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"5348:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1949,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"5353:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1947,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5336:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5336:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1951,"nodeType":"ExpressionStatement","src":"5336:21:9"},{"expression":{"arguments":[{"id":1953,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"5378:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"5383:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_int64","typeString":"int64"}],"id":1952,"name":"writeInt64","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1647,"src":"5367:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_int64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,int64) pure"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5367:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1956,"nodeType":"ExpressionStatement","src":"5367:22:9"}]},"id":1958,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVInt64","nameLocation":"5244:12:9","nodeType":"FunctionDefinition","parameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1940,"mutability":"mutable","name":"buf","nameLocation":"5275:3:9","nodeType":"VariableDeclaration","scope":1958,"src":"5257:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1939,"nodeType":"UserDefinedTypeName","pathNode":{"id":1938,"name":"CBORBuffer","nameLocations":["5257:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5257:10:9"},"referencedDeclaration":1422,"src":"5257:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1942,"mutability":"mutable","name":"key","nameLocation":"5294:3:9","nodeType":"VariableDeclaration","scope":1958,"src":"5280:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1941,"name":"string","nodeType":"ElementaryTypeName","src":"5280:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1944,"mutability":"mutable","name":"value","nameLocation":"5305:5:9","nodeType":"VariableDeclaration","scope":1958,"src":"5299:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"},"typeName":{"id":1943,"name":"int64","nodeType":"ElementaryTypeName","src":"5299:5:9","typeDescriptions":{"typeIdentifier":"t_int64","typeString":"int64"}},"visibility":"internal"}],"src":"5256:55:9"},"returnParameters":{"id":1946,"nodeType":"ParameterList","parameters":[],"src":"5326:0:9"},"scope":2267,"src":"5235:161:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"5491:69:9","statements":[{"expression":{"arguments":[{"id":1969,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"5513:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1970,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"5518:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1968,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5501:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5501:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1972,"nodeType":"ExpressionStatement","src":"5501:21:9"},{"expression":{"arguments":[{"id":1974,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1961,"src":"5542:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1975,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"5547:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1973,"name":"writeBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"5532:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_bool_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,bool) pure"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5532:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1977,"nodeType":"ExpressionStatement","src":"5532:21:9"}]},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVBool","nameLocation":"5411:11:9","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1961,"mutability":"mutable","name":"buf","nameLocation":"5441:3:9","nodeType":"VariableDeclaration","scope":1979,"src":"5423:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1960,"nodeType":"UserDefinedTypeName","pathNode":{"id":1959,"name":"CBORBuffer","nameLocations":["5423:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5423:10:9"},"referencedDeclaration":1422,"src":"5423:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1963,"mutability":"mutable","name":"key","nameLocation":"5460:3:9","nodeType":"VariableDeclaration","scope":1979,"src":"5446:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1962,"name":"string","nodeType":"ElementaryTypeName","src":"5446:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"value","nameLocation":"5470:5:9","nodeType":"VariableDeclaration","scope":1979,"src":"5465:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1964,"name":"bool","nodeType":"ElementaryTypeName","src":"5465:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5422:54:9"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[],"src":"5491:0:9"},"scope":2267,"src":"5402:158:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1996,"nodeType":"Block","src":"5643:62:9","statements":[{"expression":{"arguments":[{"id":1988,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5665:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":1989,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"5670:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1987,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5653:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1991,"nodeType":"ExpressionStatement","src":"5653:21:9"},{"expression":{"arguments":[{"id":1993,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1982,"src":"5694:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":1992,"name":"writeNull","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"5684:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5684:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1995,"nodeType":"ExpressionStatement","src":"5684:14:9"}]},"id":1997,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVNull","nameLocation":"5575:11:9","nodeType":"FunctionDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1982,"mutability":"mutable","name":"buf","nameLocation":"5605:3:9","nodeType":"VariableDeclaration","scope":1997,"src":"5587:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1981,"nodeType":"UserDefinedTypeName","pathNode":{"id":1980,"name":"CBORBuffer","nameLocations":["5587:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5587:10:9"},"referencedDeclaration":1422,"src":"5587:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"key","nameLocation":"5624:3:9","nodeType":"VariableDeclaration","scope":1997,"src":"5610:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1983,"name":"string","nodeType":"ElementaryTypeName","src":"5610:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5586:42:9"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[],"src":"5643:0:9"},"scope":2267,"src":"5566:139:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2014,"nodeType":"Block","src":"5793:67:9","statements":[{"expression":{"arguments":[{"id":2006,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"5815:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2007,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2002,"src":"5820:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2005,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5803:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5803:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2009,"nodeType":"ExpressionStatement","src":"5803:21:9"},{"expression":{"arguments":[{"id":2011,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2000,"src":"5849:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2010,"name":"writeUndefined","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"5834:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:19:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2013,"nodeType":"ExpressionStatement","src":"5834:19:9"}]},"id":2015,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVUndefined","nameLocation":"5720:16:9","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"buf","nameLocation":"5755:3:9","nodeType":"VariableDeclaration","scope":2015,"src":"5737:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":1999,"nodeType":"UserDefinedTypeName","pathNode":{"id":1998,"name":"CBORBuffer","nameLocations":["5737:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5737:10:9"},"referencedDeclaration":1422,"src":"5737:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2002,"mutability":"mutable","name":"key","nameLocation":"5774:3:9","nodeType":"VariableDeclaration","scope":2015,"src":"5760:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2001,"name":"string","nodeType":"ElementaryTypeName","src":"5760:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5736:42:9"},"returnParameters":{"id":2004,"nodeType":"ParameterList","parameters":[],"src":"5793:0:9"},"scope":2267,"src":"5711:149:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2032,"nodeType":"Block","src":"5942:61:9","statements":[{"expression":{"arguments":[{"id":2024,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"5964:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2025,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2020,"src":"5969:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2023,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5952:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5952:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2027,"nodeType":"ExpressionStatement","src":"5952:21:9"},{"expression":{"arguments":[{"id":2029,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"5992:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2028,"name":"startMap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"5983:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5983:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2031,"nodeType":"ExpressionStatement","src":"5983:13:9"}]},"id":2033,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVMap","nameLocation":"5875:10:9","nodeType":"FunctionDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"buf","nameLocation":"5904:3:9","nodeType":"VariableDeclaration","scope":2033,"src":"5886:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2017,"nodeType":"UserDefinedTypeName","pathNode":{"id":2016,"name":"CBORBuffer","nameLocations":["5886:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"5886:10:9"},"referencedDeclaration":1422,"src":"5886:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2020,"mutability":"mutable","name":"key","nameLocation":"5923:3:9","nodeType":"VariableDeclaration","scope":2033,"src":"5909:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2019,"name":"string","nodeType":"ElementaryTypeName","src":"5909:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5885:42:9"},"returnParameters":{"id":2022,"nodeType":"ParameterList","parameters":[],"src":"5942:0:9"},"scope":2267,"src":"5866:137:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2050,"nodeType":"Block","src":"6087:63:9","statements":[{"expression":{"arguments":[{"id":2042,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"6109:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2043,"name":"key","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"6114:3:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2041,"name":"writeString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"6097:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,string memory) pure"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6097:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2045,"nodeType":"ExpressionStatement","src":"6097:21:9"},{"expression":{"arguments":[{"id":2047,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"6139:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}],"id":2046,"name":"startArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"6128:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory) pure"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6128:15:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2049,"nodeType":"ExpressionStatement","src":"6128:15:9"}]},"id":2051,"implemented":true,"kind":"function","modifiers":[],"name":"writeKVArray","nameLocation":"6018:12:9","nodeType":"FunctionDefinition","parameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2036,"mutability":"mutable","name":"buf","nameLocation":"6049:3:9","nodeType":"VariableDeclaration","scope":2051,"src":"6031:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2035,"nodeType":"UserDefinedTypeName","pathNode":{"id":2034,"name":"CBORBuffer","nameLocations":["6031:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"6031:10:9"},"referencedDeclaration":1422,"src":"6031:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"key","nameLocation":"6068:3:9","nodeType":"VariableDeclaration","scope":2051,"src":"6054:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2037,"name":"string","nodeType":"ElementaryTypeName","src":"6054:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6030:42:9"},"returnParameters":{"id":2040,"nodeType":"ParameterList","parameters":[],"src":"6087:0:9"},"scope":2267,"src":"6009:141:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2198,"nodeType":"Block","src":"6276:639:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6290:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"3233","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6299:2:9","typeDescriptions":{"typeIdentifier":"t_rational_23_by_1","typeString":"int_const 23"},"value":"23"},"src":"6290:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2081,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6386:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646","id":2082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6395:4:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xFF"},"src":"6386:13:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6522:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"307846464646","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6531:6:9","typeDescriptions":{"typeIdentifier":"t_rational_65535_by_1","typeString":"int_const 65535"},"value":"0xFFFF"},"src":"6522:15:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6660:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"hexValue":"30784646464646464646","id":2140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6669:10:9","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xFFFFFFFF"},"src":"6660:19:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2193,"nodeType":"Block","src":"6798:111:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2175,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"6839:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6848:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6839:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6838:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3237","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6853:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"6838:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6832:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2173,"name":"uint8","nodeType":"ElementaryTypeName","src":"6832:5:9","typeDescriptions":{}}},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6832:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2168,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6812:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6816:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6812:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6820:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"6812:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6812:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2183,"nodeType":"ExpressionStatement","src":"6812:45:9"},{"expression":{"arguments":[{"id":2189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6889:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"38","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6896:1:9","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"}],"expression":{"expression":{"id":2184,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6871:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6875:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6871:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6879:9:9","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1407,"src":"6871:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6871:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2192,"nodeType":"ExpressionStatement","src":"6871:27:9"}]},"id":2194,"nodeType":"IfStatement","src":"6656:253:9","trueBody":{"id":2167,"nodeType":"Block","src":"6681:111:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2149,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"6722:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6731:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6722:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2152,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6721:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3236","id":2153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6736:2:9","typeDescriptions":{"typeIdentifier":"t_rational_26_by_1","typeString":"int_const 26"},"value":"26"},"src":"6721:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6715:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2147,"name":"uint8","nodeType":"ElementaryTypeName","src":"6715:5:9","typeDescriptions":{}}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6715:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2142,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6695:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2145,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6699:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6695:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2146,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6703:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"6695:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6695:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2157,"nodeType":"ExpressionStatement","src":"6695:45:9"},{"expression":{"arguments":[{"id":2163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6772:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"34","id":2164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6779:1:9","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"}],"expression":{"expression":{"id":2158,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6754:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6758:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6754:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6762:9:9","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1407,"src":"6754:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6754:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2166,"nodeType":"ExpressionStatement","src":"6754:27:9"}]}},"id":2195,"nodeType":"IfStatement","src":"6518:391:9","trueBody":{"id":2138,"nodeType":"Block","src":"6539:111:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"6580:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6589:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6580:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6579:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3235","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:2:9","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"src":"6579:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6573:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2118,"name":"uint8","nodeType":"ElementaryTypeName","src":"6573:5:9","typeDescriptions":{}}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6573:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2113,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6553:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6557:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6553:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6561:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"6553:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6553:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2128,"nodeType":"ExpressionStatement","src":"6553:45:9"},{"expression":{"arguments":[{"id":2134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6630:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"32","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6637:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"}],"expression":{"expression":{"id":2129,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6612:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6616:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6612:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6620:9:9","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1407,"src":"6612:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6612:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2137,"nodeType":"ExpressionStatement","src":"6612:27:9"}]}},"id":2196,"nodeType":"IfStatement","src":"6382:527:9","trueBody":{"id":2109,"nodeType":"Block","src":"6401:111:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2091,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"6442:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6451:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6442:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2094,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6441:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3234","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6456:2:9","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"6441:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6435:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2089,"name":"uint8","nodeType":"ElementaryTypeName","src":"6435:5:9","typeDescriptions":{}}},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6435:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2084,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6415:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2087,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6419:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6415:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6423:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"6415:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6415:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2099,"nodeType":"ExpressionStatement","src":"6415:45:9"},{"expression":{"arguments":[{"id":2105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6492:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"hexValue":"31","id":2106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6499:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"expression":{"id":2100,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6474:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6478:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6474:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2104,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6482:9:9","memberName":"appendInt","nodeType":"MemberAccess","referencedDeclaration":1407,"src":"6474:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint256,uint256) pure returns (struct Buffer.buffer memory)"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6474:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2108,"nodeType":"ExpressionStatement","src":"6474:27:9"}]}},"id":2197,"nodeType":"IfStatement","src":"6286:623:9","trueBody":{"id":2080,"nodeType":"Block","src":"6303:73:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":2076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2056,"src":"6344:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6353:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"6344:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2074,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6343:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"6358:5:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"6343:20:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6337:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2069,"name":"uint8","nodeType":"ElementaryTypeName","src":"6337:5:9","typeDescriptions":{}}},"id":2077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6337:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2064,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"6317:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6321:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"6317:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6325:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"6317:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:48:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2079,"nodeType":"ExpressionStatement","src":"6317:48:9"}]}}]},"id":2199,"implemented":true,"kind":"function","modifiers":[],"name":"writeFixedNumeric","nameLocation":"6165:17:9","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"buf","nameLocation":"6210:3:9","nodeType":"VariableDeclaration","scope":2199,"src":"6192:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2053,"nodeType":"UserDefinedTypeName","pathNode":{"id":2052,"name":"CBORBuffer","nameLocations":["6192:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"6192:10:9"},"referencedDeclaration":1422,"src":"6192:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2056,"mutability":"mutable","name":"major","nameLocation":"6229:5:9","nodeType":"VariableDeclaration","scope":2199,"src":"6223:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2055,"name":"uint8","nodeType":"ElementaryTypeName","src":"6223:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2058,"mutability":"mutable","name":"value","nameLocation":"6251:5:9","nodeType":"VariableDeclaration","scope":2199,"src":"6244:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2057,"name":"uint64","nodeType":"ElementaryTypeName","src":"6244:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6182:80:9"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[],"src":"6276:0:9"},"scope":2267,"src":"6156:759:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2223,"nodeType":"Block","src":"7025:62:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2214,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2204,"src":"7062:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7071:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"7062:10:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2217,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7061:12:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"hexValue":"3331","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7076:2:9","typeDescriptions":{"typeIdentifier":"t_rational_31_by_1","typeString":"int_const 31"},"value":"31"},"src":"7061:17:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7055:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2212,"name":"uint8","nodeType":"ElementaryTypeName","src":"7055:5:9","typeDescriptions":{}}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7055:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2207,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2202,"src":"7035:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7039:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"7035:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7043:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"7035:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7035:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2222,"nodeType":"ExpressionStatement","src":"7035:45:9"}]},"id":2224,"implemented":true,"kind":"function","modifiers":[],"name":"writeIndefiniteLengthType","nameLocation":"6930:25:9","nodeType":"FunctionDefinition","parameters":{"id":2205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2202,"mutability":"mutable","name":"buf","nameLocation":"6974:3:9","nodeType":"VariableDeclaration","scope":2224,"src":"6956:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2201,"nodeType":"UserDefinedTypeName","pathNode":{"id":2200,"name":"CBORBuffer","nameLocations":["6956:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"6956:10:9"},"referencedDeclaration":1422,"src":"6956:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2204,"mutability":"mutable","name":"major","nameLocation":"6985:5:9","nodeType":"VariableDeclaration","scope":2224,"src":"6979:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2203,"name":"uint8","nodeType":"ElementaryTypeName","src":"6979:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6955:36:9"},"returnParameters":{"id":2206,"nodeType":"ParameterList","parameters":[],"src":"7025:0:9"},"scope":2267,"src":"6921:166:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2240,"nodeType":"Block","src":"7210:54:9","statements":[{"expression":{"arguments":[{"id":2235,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"7238:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},{"id":2236,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"7243:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2237,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"7250:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_uint64","typeString":"uint64"}],"id":2234,"name":"writeFixedNumeric","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"7220:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_CBORBuffer_$1422_memory_ptr_$_t_uint8_$_t_uint64_$returns$__$","typeString":"function (struct CBOR.CBORBuffer memory,uint8,uint64) pure"}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7220:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2239,"nodeType":"ExpressionStatement","src":"7220:37:9"}]},"id":2241,"implemented":true,"kind":"function","modifiers":[],"name":"writeDefiniteLengthType","nameLocation":"7102:23:9","nodeType":"FunctionDefinition","parameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2227,"mutability":"mutable","name":"buf","nameLocation":"7144:3:9","nodeType":"VariableDeclaration","scope":2241,"src":"7126:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2226,"nodeType":"UserDefinedTypeName","pathNode":{"id":2225,"name":"CBORBuffer","nameLocations":["7126:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"7126:10:9"},"referencedDeclaration":1422,"src":"7126:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2229,"mutability":"mutable","name":"major","nameLocation":"7155:5:9","nodeType":"VariableDeclaration","scope":2241,"src":"7149:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2228,"name":"uint8","nodeType":"ElementaryTypeName","src":"7149:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"length","nameLocation":"7169:6:9","nodeType":"VariableDeclaration","scope":2241,"src":"7162:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2230,"name":"uint64","nodeType":"ElementaryTypeName","src":"7162:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7125:51:9"},"returnParameters":{"id":2233,"nodeType":"ParameterList","parameters":[],"src":"7210:0:9"},"scope":2267,"src":"7093:171:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2265,"nodeType":"Block","src":"7345:83:9","statements":[{"expression":{"arguments":[{"arguments":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":2258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":2256,"name":"MAJOR_TYPE_CONTENT_FREE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1446,"src":"7382:23:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"35","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7409:1:9","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"7382:28:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2259,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7381:30:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"7414:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"7381:38:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7375:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2254,"name":"uint8","nodeType":"ElementaryTypeName","src":"7375:5:9","typeDescriptions":{}}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"expression":{"expression":{"id":2249,"name":"buf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"7355:3:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer memory"}},"id":2252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7359:3:9","memberName":"buf","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"7355:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7363:11:9","memberName":"appendUint8","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"7355:19:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_buffer_$995_memory_ptr_$_t_uint8_$returns$_t_struct$_buffer_$995_memory_ptr_$attached_to$_t_struct$_buffer_$995_memory_ptr_$","typeString":"function (struct Buffer.buffer memory,uint8) pure returns (struct Buffer.buffer memory)"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:66:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_buffer_$995_memory_ptr","typeString":"struct Buffer.buffer memory"}},"id":2264,"nodeType":"ExpressionStatement","src":"7355:66:9"}]},"id":2266,"implemented":true,"kind":"function","modifiers":[],"name":"writeContentFree","nameLocation":"7279:16:9","nodeType":"FunctionDefinition","parameters":{"id":2247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2244,"mutability":"mutable","name":"buf","nameLocation":"7314:3:9","nodeType":"VariableDeclaration","scope":2266,"src":"7296:21:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_memory_ptr","typeString":"struct CBOR.CBORBuffer"},"typeName":{"id":2243,"nodeType":"UserDefinedTypeName","pathNode":{"id":2242,"name":"CBORBuffer","nameLocations":["7296:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":1422,"src":"7296:10:9"},"referencedDeclaration":1422,"src":"7296:10:9","typeDescriptions":{"typeIdentifier":"t_struct$_CBORBuffer_$1422_storage_ptr","typeString":"struct CBOR.CBORBuffer"}},"visibility":"internal"},{"constant":false,"id":2246,"mutability":"mutable","name":"value","nameLocation":"7325:5:9","nodeType":"VariableDeclaration","scope":2266,"src":"7319:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2245,"name":"uint8","nodeType":"ElementaryTypeName","src":"7319:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"7295:36:9"},"returnParameters":{"id":2248,"nodeType":"ParameterList","parameters":[],"src":"7345:0:9"},"scope":2267,"src":"7270:158:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2268,"src":"666:6764:9","usedErrors":[],"usedEvents":[]}],"src":"32:7398:9"},"id":9},"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol","exportedSymbols":{"ConfirmedOwner":[807],"IVRFCoordinatorV2Plus":[2448],"IVRFMigratableConsumerV2Plus":[2462],"VRFConsumerBaseV2Plus":[2430]},"id":2431,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2269,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:10"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol","file":"./interfaces/IVRFCoordinatorV2Plus.sol","id":2271,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2431,"sourceUnit":2449,"src":"57:77:10","symbolAliases":[{"foreign":{"id":2270,"name":"IVRFCoordinatorV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"65:21:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol","file":"./interfaces/IVRFMigratableConsumerV2Plus.sol","id":2273,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2431,"sourceUnit":2463,"src":"135:91:10","symbolAliases":[{"foreign":{"id":2272,"name":"IVRFMigratableConsumerV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"143:28:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","file":"../../shared/access/ConfirmedOwner.sol","id":2275,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2431,"sourceUnit":808,"src":"227:70:10","symbolAliases":[{"foreign":{"id":2274,"name":"ConfirmedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"235:14:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2277,"name":"IVRFMigratableConsumerV2Plus","nameLocations":["5712:28:10"],"nodeType":"IdentifierPath","referencedDeclaration":2462,"src":"5712:28:10"},"id":2278,"nodeType":"InheritanceSpecifier","src":"5712:28:10"},{"baseName":{"id":2279,"name":"ConfirmedOwner","nameLocations":["5742:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":807,"src":"5742:14:10"},"id":2280,"nodeType":"InheritanceSpecifier","src":"5742:14:10"}],"canonicalName":"VRFConsumerBaseV2Plus","contractDependencies":[],"contractKind":"contract","documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"299:5369:10","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create a subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords, extraArgs),\n @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":2430,"linearizedBaseContracts":[2430,807,970,986,2462],"name":"VRFConsumerBaseV2Plus","nameLocation":"5687:21:10","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":2286,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5767:25:10","nodeType":"ErrorDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2282,"mutability":"mutable","name":"have","nameLocation":"5801:4:10","nodeType":"VariableDeclaration","scope":2286,"src":"5793:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2281,"name":"address","nodeType":"ElementaryTypeName","src":"5793:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"want","nameLocation":"5815:4:10","nodeType":"VariableDeclaration","scope":2286,"src":"5807:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2283,"name":"address","nodeType":"ElementaryTypeName","src":"5807:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5792:28:10"},"src":"5761:60:10"},{"errorSelector":"061db9c1","id":2294,"name":"OnlyOwnerOrCoordinator","nameLocation":"5830:22:10","nodeType":"ErrorDefinition","parameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"have","nameLocation":"5861:4:10","nodeType":"VariableDeclaration","scope":2294,"src":"5853:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2287,"name":"address","nodeType":"ElementaryTypeName","src":"5853:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"owner","nameLocation":"5875:5:10","nodeType":"VariableDeclaration","scope":2294,"src":"5867:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2289,"name":"address","nodeType":"ElementaryTypeName","src":"5867:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2292,"mutability":"mutable","name":"coordinator","nameLocation":"5890:11:10","nodeType":"VariableDeclaration","scope":2294,"src":"5882:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2291,"name":"address","nodeType":"ElementaryTypeName","src":"5882:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5852:50:10"},"src":"5824:79:10"},{"errorSelector":"d92e233d","id":2296,"name":"ZeroAddress","nameLocation":"5912:11:10","nodeType":"ErrorDefinition","parameters":{"id":2295,"nodeType":"ParameterList","parameters":[],"src":"5923:2:10"},"src":"5906:20:10"},{"constant":false,"functionSelector":"9eccacf6","id":2299,"mutability":"mutable","name":"s_vrfCoordinator","nameLocation":"6106:16:10","nodeType":"VariableDeclaration","scope":2430,"src":"6077:45:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"IVRFCoordinatorV2Plus","nameLocations":["6077:21:10"],"nodeType":"IdentifierPath","referencedDeclaration":2448,"src":"6077:21:10"},"referencedDeclaration":2448,"src":"6077:21:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"visibility":"public"},{"body":{"id":2326,"nodeType":"Block","src":"6266:143:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2309,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"6276:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6303:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6295:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2310,"name":"address","nodeType":"ElementaryTypeName","src":"6295:7:10","typeDescriptions":{}}},"id":2313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6295:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6276:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2319,"nodeType":"IfStatement","src":"6272:70:10","trueBody":{"id":2318,"nodeType":"Block","src":"6307:35:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2315,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"6322:11:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6322:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2317,"nodeType":"RevertStatement","src":"6315:20:10"}]}},{"expression":{"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2320,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6347:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2322,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2302,"src":"6388:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2321,"name":"IVRFCoordinatorV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"6366:21:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVRFCoordinatorV2Plus_$2448_$","typeString":"type(contract IVRFCoordinatorV2Plus)"}},"id":2323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6366:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"src":"6347:57:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"id":2325,"nodeType":"ExpressionStatement","src":"6347:57:10"}]},"documentation":{"id":2300,"nodeType":"StructuredDocumentation","src":"6127:72:10","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":2327,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2305,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"6254:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6258:6:10","memberName":"sender","nodeType":"MemberAccess","src":"6254:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2307,"kind":"baseConstructorSpecifier","modifierName":{"id":2304,"name":"ConfirmedOwner","nameLocations":["6239:14:10"],"nodeType":"IdentifierPath","referencedDeclaration":807,"src":"6239:14:10"},"nodeType":"ModifierInvocation","src":"6239:26:10"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"6222:15:10","nodeType":"VariableDeclaration","scope":2327,"src":"6214:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2301,"name":"address","nodeType":"ElementaryTypeName","src":"6214:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6213:25:10"},"returnParameters":{"id":2308,"nodeType":"ParameterList","parameters":[],"src":"6266:0:10"},"scope":2430,"src":"6202:207:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"6413:690:10","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":2336,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"7207:18:10","nodeType":"FunctionDefinition","parameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"requestId","nameLocation":"7234:9:10","nodeType":"VariableDeclaration","scope":2336,"src":"7226:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2329,"name":"uint256","nodeType":"ElementaryTypeName","src":"7226:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2333,"mutability":"mutable","name":"randomWords","nameLocation":"7264:11:10","nodeType":"VariableDeclaration","scope":2336,"src":"7245:30:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"7245:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2332,"nodeType":"ArrayTypeName","src":"7245:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7225:51:10"},"returnParameters":{"id":2335,"nodeType":"ParameterList","parameters":[],"src":"7293:0:10"},"scope":2430,"src":"7198:96:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2367,"nodeType":"Block","src":"7580:189:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2344,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7590:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7594:6:10","memberName":"sender","nodeType":"MemberAccess","src":"7590:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2348,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"7612:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}],"id":2347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7604:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2346,"name":"address","nodeType":"ElementaryTypeName","src":"7604:7:10","typeDescriptions":{}}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7604:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7590:39:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2361,"nodeType":"IfStatement","src":"7586:131:10","trueBody":{"id":2360,"nodeType":"Block","src":"7631:86:10","statements":[{"errorCall":{"arguments":[{"expression":{"id":2352,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"7672:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7676:6:10","memberName":"sender","nodeType":"MemberAccess","src":"7672:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2356,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"7692:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}],"id":2355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7684:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"7684:7:10","typeDescriptions":{}}},"id":2357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7684:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2351,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2286,"src":"7646:25:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7646:64:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2359,"nodeType":"RevertStatement","src":"7639:71:10"}]}},{"expression":{"arguments":[{"id":2363,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"7741:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2364,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"7752:11:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":2362,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"7722:18:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (uint256,uint256[] calldata)"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7722:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2366,"nodeType":"ExpressionStatement","src":"7722:42:10"}]},"functionSelector":"1fe543e3","id":2368,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"7498:21:10","nodeType":"FunctionDefinition","parameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"requestId","nameLocation":"7528:9:10","nodeType":"VariableDeclaration","scope":2368,"src":"7520:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2337,"name":"uint256","nodeType":"ElementaryTypeName","src":"7520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2341,"mutability":"mutable","name":"randomWords","nameLocation":"7558:11:10","nodeType":"VariableDeclaration","scope":2368,"src":"7539:30:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2339,"name":"uint256","nodeType":"ElementaryTypeName","src":"7539:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2340,"nodeType":"ArrayTypeName","src":"7539:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7519:51:10"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[],"src":"7580:0:10"},"scope":2430,"src":"7489:280:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2461],"body":{"id":2398,"nodeType":"Block","src":"7921:186:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"7931:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7958:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7950:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2378,"name":"address","nodeType":"ElementaryTypeName","src":"7950:7:10","typeDescriptions":{}}},"id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7950:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7931:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2387,"nodeType":"IfStatement","src":"7927:70:10","trueBody":{"id":2386,"nodeType":"Block","src":"7962:35:10","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2383,"name":"ZeroAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"7977:11:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7977:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2385,"nodeType":"RevertStatement","src":"7970:20:10"}]}},{"expression":{"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2388,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"8002:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2390,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"8043:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2389,"name":"IVRFCoordinatorV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"8021:21:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IVRFCoordinatorV2Plus_$2448_$","typeString":"type(contract IVRFCoordinatorV2Plus)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8021:38:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"src":"8002:57:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"id":2393,"nodeType":"ExpressionStatement","src":"8002:57:10"},{"eventCall":{"arguments":[{"id":2395,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"8086:15:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2394,"name":"CoordinatorSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2455,"src":"8071:14:10","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8071:31:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2397,"nodeType":"EmitStatement","src":"8066:36:10"}]},"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"7773:55:10","text":" @inheritdoc IVRFMigratableConsumerV2Plus"},"functionSelector":"8ea98117","id":2399,"implemented":true,"kind":"function","modifiers":[{"id":2375,"kind":"modifierInvocation","modifierName":{"id":2374,"name":"onlyOwnerOrCoordinator","nameLocations":["7898:22:10"],"nodeType":"IdentifierPath","referencedDeclaration":2429,"src":"7898:22:10"},"nodeType":"ModifierInvocation","src":"7898:22:10"}],"name":"setCoordinator","nameLocation":"7840:14:10","nodeType":"FunctionDefinition","overrides":{"id":2373,"nodeType":"OverrideSpecifier","overrides":[],"src":"7889:8:10"},"parameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"7863:15:10","nodeType":"VariableDeclaration","scope":2399,"src":"7855:23:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2370,"name":"address","nodeType":"ElementaryTypeName","src":"7855:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7854:25:10"},"returnParameters":{"id":2376,"nodeType":"ParameterList","parameters":[],"src":"7921:0:10"},"scope":2430,"src":"7831:276:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2428,"nodeType":"Block","src":"8145:179:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2401,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8155:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8159:6:10","memberName":"sender","nodeType":"MemberAccess","src":"8155:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2403,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"8169:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8169:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8155:21:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2406,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8180:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8184:6:10","memberName":"sender","nodeType":"MemberAccess","src":"8180:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2410,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"8202:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}],"id":2409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8194:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2408,"name":"address","nodeType":"ElementaryTypeName","src":"8194:7:10","typeDescriptions":{}}},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8194:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8180:39:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8155:64:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2426,"nodeType":"IfStatement","src":"8151:162:10","trueBody":{"id":2425,"nodeType":"Block","src":"8221:92:10","statements":[{"errorCall":{"arguments":[{"expression":{"id":2415,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"8259:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8263:6:10","memberName":"sender","nodeType":"MemberAccess","src":"8259:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2417,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"8271:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8271:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2421,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"8288:16:10","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}],"id":2420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8280:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2419,"name":"address","nodeType":"ElementaryTypeName","src":"8280:7:10","typeDescriptions":{}}},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8280:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2414,"name":"OnlyOwnerOrCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"8236:22:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address,address) pure"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8236:70:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2424,"nodeType":"RevertStatement","src":"8229:77:10"}]}},{"id":2427,"nodeType":"PlaceholderStatement","src":"8318:1:10"}]},"id":2429,"name":"onlyOwnerOrCoordinator","nameLocation":"8120:22:10","nodeType":"ModifierDefinition","parameters":{"id":2400,"nodeType":"ParameterList","parameters":[],"src":"8142:2:10"},"src":"8111:213:10","virtual":false,"visibility":"internal"}],"scope":2431,"src":"5669:2657:10","usedErrors":[2286,2294,2296],"usedEvents":[824,830,2455]}],"src":"32:8295:10"},"id":10},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol","exportedSymbols":{"IVRFCoordinatorV2Plus":[2448],"IVRFSubscriptionV2Plus":[2551],"VRFV2PlusClient":[2593]},"id":2449,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2432,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:11"},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol","file":"../libraries/VRFV2PlusClient.sol","id":2434,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2449,"sourceUnit":2594,"src":"57:65:11","symbolAliases":[{"foreign":{"id":2433,"name":"VRFV2PlusClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"65:15:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol","file":"./IVRFSubscriptionV2Plus.sol","id":2436,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2449,"sourceUnit":2552,"src":"123:68:11","symbolAliases":[{"foreign":{"id":2435,"name":"IVRFSubscriptionV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"131:22:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2437,"name":"IVRFSubscriptionV2Plus","nameLocations":["398:22:11"],"nodeType":"IdentifierPath","referencedDeclaration":2551,"src":"398:22:11"},"id":2438,"nodeType":"InheritanceSpecifier","src":"398:22:11"}],"canonicalName":"IVRFCoordinatorV2Plus","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2448,"linearizedBaseContracts":[2448,2551],"name":"IVRFCoordinatorV2Plus","nameLocation":"373:21:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"425:1588:11","text":" @notice Request a set of random words.\n @param req - a struct containing following fields for randomness request:\n keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n requestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n extraArgs - abi-encoded extra args\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"9b1c385e","id":2447,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2025:18:11","nodeType":"FunctionDefinition","parameters":{"id":2443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2442,"mutability":"mutable","name":"req","nameLocation":"2088:3:11","nodeType":"VariableDeclaration","scope":2447,"src":"2044:47:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RandomWordsRequest_$2577_calldata_ptr","typeString":"struct VRFV2PlusClient.RandomWordsRequest"},"typeName":{"id":2441,"nodeType":"UserDefinedTypeName","pathNode":{"id":2440,"name":"VRFV2PlusClient.RandomWordsRequest","nameLocations":["2044:15:11","2060:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":2577,"src":"2044:34:11"},"referencedDeclaration":2577,"src":"2044:34:11","typeDescriptions":{"typeIdentifier":"t_struct$_RandomWordsRequest_$2577_storage_ptr","typeString":"struct VRFV2PlusClient.RandomWordsRequest"}},"visibility":"internal"}],"src":"2043:49:11"},"returnParameters":{"id":2446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2445,"mutability":"mutable","name":"requestId","nameLocation":"2119:9:11","nodeType":"VariableDeclaration","scope":2447,"src":"2111:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"2111:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2110:19:11"},"scope":2448,"src":"2016:114:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2449,"src":"363:1769:11","usedErrors":[],"usedEvents":[]}],"src":"32:2101:11"},"id":11},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol","exportedSymbols":{"IVRFMigratableConsumerV2Plus":[2462]},"id":2463,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2450,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"IVRFMigratableConsumerV2Plus","contractDependencies":[],"contractKind":"interface","documentation":{"id":2451,"nodeType":"StructuredDocumentation","src":"57:211:12","text":"@notice The IVRFMigratableConsumerV2Plus interface defines the\n @notice method required to be implemented by all V2Plus consumers.\n @dev This interface is designed to be used in VRFConsumerBaseV2Plus."},"fullyImplemented":false,"id":2462,"linearizedBaseContracts":[2462],"name":"IVRFMigratableConsumerV2Plus","nameLocation":"278:28:12","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"d1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be6","id":2455,"name":"CoordinatorSet","nameLocation":"317:14:12","nodeType":"EventDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2453,"indexed":false,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"340:14:12","nodeType":"VariableDeclaration","scope":2455,"src":"332:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2452,"name":"address","nodeType":"ElementaryTypeName","src":"332:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"331:24:12"},"src":"311:45:12"},{"documentation":{"id":2456,"nodeType":"StructuredDocumentation","src":"360:131:12","text":"@notice Sets the VRF Coordinator address\n @notice This method should only be callable by the coordinator or contract owner"},"functionSelector":"8ea98117","id":2461,"implemented":false,"kind":"function","modifiers":[],"name":"setCoordinator","nameLocation":"503:14:12","nodeType":"FunctionDefinition","parameters":{"id":2459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2458,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"526:14:12","nodeType":"VariableDeclaration","scope":2461,"src":"518:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2457,"name":"address","nodeType":"ElementaryTypeName","src":"518:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"517:24:12"},"returnParameters":{"id":2460,"nodeType":"ParameterList","parameters":[],"src":"550:0:12"},"scope":2462,"src":"494:57:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2463,"src":"268:285:12","usedErrors":[],"usedEvents":[2455]}],"src":"32:522:12"},"id":12},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol","exportedSymbols":{"IVRFSubscriptionV2Plus":[2551]},"id":2552,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2464,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IVRFSubscriptionV2Plus","contractDependencies":[],"contractKind":"interface","documentation":{"id":2465,"nodeType":"StructuredDocumentation","src":"57:141:13","text":"@notice The IVRFSubscriptionV2Plus interface defines the subscription\n @notice related methods implemented by the V2Plus coordinator."},"fullyImplemented":false,"id":2551,"linearizedBaseContracts":[2551],"name":"IVRFSubscriptionV2Plus","nameLocation":"208:22:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2466,"nodeType":"StructuredDocumentation","src":"235:170:13","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"bec4c08c","id":2473,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"417:11:13","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"subId","nameLocation":"437:5:13","nodeType":"VariableDeclaration","scope":2473,"src":"429:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"429:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"consumer","nameLocation":"452:8:13","nodeType":"VariableDeclaration","scope":2473,"src":"444:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2469,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"428:33:13"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[],"src":"470:0:13"},"scope":2551,"src":"408:63:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2474,"nodeType":"StructuredDocumentation","src":"475:172:13","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"cb631797","id":2481,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"659:14:13","nodeType":"FunctionDefinition","parameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"subId","nameLocation":"682:5:13","nodeType":"VariableDeclaration","scope":2481,"src":"674:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2475,"name":"uint256","nodeType":"ElementaryTypeName","src":"674:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2478,"mutability":"mutable","name":"consumer","nameLocation":"697:8:13","nodeType":"VariableDeclaration","scope":2481,"src":"689:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2477,"name":"address","nodeType":"ElementaryTypeName","src":"689:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"673:33:13"},"returnParameters":{"id":2480,"nodeType":"ParameterList","parameters":[],"src":"715:0:13"},"scope":2551,"src":"650:66:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2482,"nodeType":"StructuredDocumentation","src":"720:140:13","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"0ae09540","id":2489,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"872:18:13","nodeType":"FunctionDefinition","parameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"subId","nameLocation":"899:5:13","nodeType":"VariableDeclaration","scope":2489,"src":"891:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"891:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2486,"mutability":"mutable","name":"to","nameLocation":"914:2:13","nodeType":"VariableDeclaration","scope":2489,"src":"906:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2485,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:27:13"},"returnParameters":{"id":2488,"nodeType":"ParameterList","parameters":[],"src":"926:0:13"},"scope":2551,"src":"863:64:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2490,"nodeType":"StructuredDocumentation","src":"931:211:13","text":" @notice Accept subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"b2a7cac5","id":2495,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"1154:31:13","nodeType":"FunctionDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2492,"mutability":"mutable","name":"subId","nameLocation":"1194:5:13","nodeType":"VariableDeclaration","scope":2495,"src":"1186:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"1186:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1185:15:13"},"returnParameters":{"id":2494,"nodeType":"ParameterList","parameters":[],"src":"1209:0:13"},"scope":2551,"src":"1145:65:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2496,"nodeType":"StructuredDocumentation","src":"1214:164:13","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"dac83d29","id":2503,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"1390:32:13","nodeType":"FunctionDefinition","parameters":{"id":2501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2498,"mutability":"mutable","name":"subId","nameLocation":"1431:5:13","nodeType":"VariableDeclaration","scope":2503,"src":"1423:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"1423:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2500,"mutability":"mutable","name":"newOwner","nameLocation":"1446:8:13","nodeType":"VariableDeclaration","scope":2503,"src":"1438:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2499,"name":"address","nodeType":"ElementaryTypeName","src":"1438:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1422:33:13"},"returnParameters":{"id":2502,"nodeType":"ParameterList","parameters":[],"src":"1464:0:13"},"scope":2551,"src":"1381:84:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2504,"nodeType":"StructuredDocumentation","src":"1469:613:13","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription with LINK, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));\n @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n @dev  to send Native with the call, for example:\n @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);"},"functionSelector":"a21a23e4","id":2509,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2094:18:13","nodeType":"FunctionDefinition","parameters":{"id":2505,"nodeType":"ParameterList","parameters":[],"src":"2112:2:13"},"returnParameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2507,"mutability":"mutable","name":"subId","nameLocation":"2141:5:13","nodeType":"VariableDeclaration","scope":2509,"src":"2133:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2506,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2132:15:13"},"scope":2551,"src":"2085:63:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2510,"nodeType":"StructuredDocumentation","src":"2152:422:13","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return nativeBalance - native balance of the subscription in wei.\n @return reqCount - Requests count of subscription.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"dc311dd3","id":2526,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"2586:15:13","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2512,"mutability":"mutable","name":"subId","nameLocation":"2615:5:13","nodeType":"VariableDeclaration","scope":2526,"src":"2607:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2511,"name":"uint256","nodeType":"ElementaryTypeName","src":"2607:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2601:23:13"},"returnParameters":{"id":2525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"balance","nameLocation":"2667:7:13","nodeType":"VariableDeclaration","scope":2526,"src":"2660:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2514,"name":"uint96","nodeType":"ElementaryTypeName","src":"2660:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"nativeBalance","nameLocation":"2683:13:13","nodeType":"VariableDeclaration","scope":2526,"src":"2676:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":2516,"name":"uint96","nodeType":"ElementaryTypeName","src":"2676:6:13","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"reqCount","nameLocation":"2705:8:13","nodeType":"VariableDeclaration","scope":2526,"src":"2698:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2518,"name":"uint64","nodeType":"ElementaryTypeName","src":"2698:6:13","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2521,"mutability":"mutable","name":"owner","nameLocation":"2723:5:13","nodeType":"VariableDeclaration","scope":2526,"src":"2715:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2520,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2524,"mutability":"mutable","name":"consumers","nameLocation":"2747:9:13","nodeType":"VariableDeclaration","scope":2526,"src":"2730:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2522,"name":"address","nodeType":"ElementaryTypeName","src":"2730:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2523,"nodeType":"ArrayTypeName","src":"2730:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"2659:98:13"},"scope":2551,"src":"2577:181:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"41af6c87","id":2533,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"3063:20:13","nodeType":"FunctionDefinition","parameters":{"id":2529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2528,"mutability":"mutable","name":"subId","nameLocation":"3092:5:13","nodeType":"VariableDeclaration","scope":2533,"src":"3084:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2527,"name":"uint256","nodeType":"ElementaryTypeName","src":"3084:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:15:13"},"returnParameters":{"id":2532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2533,"src":"3122:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2530,"name":"bool","nodeType":"ElementaryTypeName","src":"3122:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3121:6:13"},"scope":2551,"src":"3054:74:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2534,"nodeType":"StructuredDocumentation","src":"3132:427:13","text":" @notice Paginate through all active VRF subscriptions.\n @param startIndex index of the subscription to start from\n @param maxCount maximum number of subscriptions to return, 0 to return all\n @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state"},"functionSelector":"aefb212f","id":2544,"implemented":false,"kind":"function","modifiers":[],"name":"getActiveSubscriptionIds","nameLocation":"3571:24:13","nodeType":"FunctionDefinition","parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2536,"mutability":"mutable","name":"startIndex","nameLocation":"3604:10:13","nodeType":"VariableDeclaration","scope":2544,"src":"3596:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"3596:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2538,"mutability":"mutable","name":"maxCount","nameLocation":"3624:8:13","nodeType":"VariableDeclaration","scope":2544,"src":"3616:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2537,"name":"uint256","nodeType":"ElementaryTypeName","src":"3616:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3595:38:13"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"3657:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2540,"name":"uint256","nodeType":"ElementaryTypeName","src":"3657:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2541,"nodeType":"ArrayTypeName","src":"3657:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3656:18:13"},"scope":2551,"src":"3562:113:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"3679:175:13","text":" @notice Fund a subscription with native.\n @param subId - ID of the subscription\n @notice This method expects msg.value to be greater than or equal to 0."},"functionSelector":"95b55cfc","id":2550,"implemented":false,"kind":"function","modifiers":[],"name":"fundSubscriptionWithNative","nameLocation":"3866:26:13","nodeType":"FunctionDefinition","parameters":{"id":2548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"subId","nameLocation":"3901:5:13","nodeType":"VariableDeclaration","scope":2550,"src":"3893:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"3893:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3892:15:13"},"returnParameters":{"id":2549,"nodeType":"ParameterList","parameters":[],"src":"3924:0:13"},"scope":2551,"src":"3857:68:13","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2552,"src":"198:3729:13","usedErrors":[],"usedEvents":[]}],"src":"32:3896:13"},"id":13},"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol","exportedSymbols":{"VRFV2PlusClient":[2593]},"id":2594,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2553,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFV2PlusClient","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2593,"linearizedBaseContracts":[2593],"name":"VRFV2PlusClient","nameLocation":"90:15:14","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"f7514ab4","id":2561,"mutability":"constant","name":"EXTRA_ARGS_V1_TAG","nameLocation":"184:17:14","nodeType":"VariableDeclaration","scope":2593,"src":"161:79:14","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2554,"name":"bytes4","nodeType":"ElementaryTypeName","src":"161:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"arguments":[{"hexValue":"565246204578747261417267735631","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"221:17:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa","typeString":"literal_string \"VRF ExtraArgsV1\""},"value":"VRF ExtraArgsV1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa","typeString":"literal_string \"VRF ExtraArgsV1\""}],"id":2557,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"211:9:14","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"211:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"204:6:14","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2555,"name":"bytes4","nodeType":"ElementaryTypeName","src":"204:6:14","typeDescriptions":{}}},"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"204:36:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"public"},{"canonicalName":"VRFV2PlusClient.ExtraArgsV1","id":2564,"members":[{"constant":false,"id":2563,"mutability":"mutable","name":"nativePayment","nameLocation":"274:13:14","nodeType":"VariableDeclaration","scope":2564,"src":"269:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2562,"name":"bool","nodeType":"ElementaryTypeName","src":"269:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ExtraArgsV1","nameLocation":"251:11:14","nodeType":"StructDefinition","scope":2593,"src":"244:48:14","visibility":"public"},{"canonicalName":"VRFV2PlusClient.RandomWordsRequest","id":2577,"members":[{"constant":false,"id":2566,"mutability":"mutable","name":"keyHash","nameLocation":"336:7:14","nodeType":"VariableDeclaration","scope":2577,"src":"328:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2565,"name":"bytes32","nodeType":"ElementaryTypeName","src":"328:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2568,"mutability":"mutable","name":"subId","nameLocation":"357:5:14","nodeType":"VariableDeclaration","scope":2577,"src":"349:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"349:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2570,"mutability":"mutable","name":"requestConfirmations","nameLocation":"375:20:14","nodeType":"VariableDeclaration","scope":2577,"src":"368:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2569,"name":"uint16","nodeType":"ElementaryTypeName","src":"368:6:14","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2572,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"408:16:14","nodeType":"VariableDeclaration","scope":2577,"src":"401:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2571,"name":"uint32","nodeType":"ElementaryTypeName","src":"401:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2574,"mutability":"mutable","name":"numWords","nameLocation":"437:8:14","nodeType":"VariableDeclaration","scope":2577,"src":"430:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2573,"name":"uint32","nodeType":"ElementaryTypeName","src":"430:6:14","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"extraArgs","nameLocation":"457:9:14","nodeType":"VariableDeclaration","scope":2577,"src":"451:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2575,"name":"bytes","nodeType":"ElementaryTypeName","src":"451:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"RandomWordsRequest","nameLocation":"303:18:14","nodeType":"StructDefinition","scope":2593,"src":"296:175:14","visibility":"public"},{"body":{"id":2591,"nodeType":"Block","src":"568:70:14","statements":[{"expression":{"arguments":[{"id":2587,"name":"EXTRA_ARGS_V1_TAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"604:17:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":2588,"name":"extraArgs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"623:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_memory_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_memory_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1 memory"}],"expression":{"id":2585,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967295,"src":"581:3:14","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"585:18:14","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"581:22:14","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"581:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2584,"id":2590,"nodeType":"Return","src":"574:59:14"}]},"id":2592,"implemented":true,"kind":"function","modifiers":[],"name":"_argsToBytes","nameLocation":"484:12:14","nodeType":"FunctionDefinition","parameters":{"id":2581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2580,"mutability":"mutable","name":"extraArgs","nameLocation":"516:9:14","nodeType":"VariableDeclaration","scope":2592,"src":"497:28:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_memory_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1"},"typeName":{"id":2579,"nodeType":"UserDefinedTypeName","pathNode":{"id":2578,"name":"ExtraArgsV1","nameLocations":["497:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":2564,"src":"497:11:14"},"referencedDeclaration":2564,"src":"497:11:14","typeDescriptions":{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_storage_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1"}},"visibility":"internal"}],"src":"496:30:14"},"returnParameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"bts","nameLocation":"563:3:14","nodeType":"VariableDeclaration","scope":2592,"src":"550:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2582,"name":"bytes","nodeType":"ElementaryTypeName","src":"550:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"549:18:14"},"scope":2593,"src":"475:163:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2594,"src":"82:558:14","usedErrors":[],"usedEvents":[]}],"src":"32:609:14"},"id":14},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[2730],"IERC20Errors":[2635],"IERC721Errors":[2683]},"id":2731,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2595,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2596,"nodeType":"StructuredDocumentation","src":"138:139:15","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":2635,"linearizedBaseContracts":[2635],"name":"IERC20Errors","nameLocation":"288:12:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2597,"nodeType":"StructuredDocumentation","src":"307:309:15","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":2605,"name":"ERC20InsufficientBalance","nameLocation":"627:24:15","nodeType":"ErrorDefinition","parameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2599,"mutability":"mutable","name":"sender","nameLocation":"660:6:15","nodeType":"VariableDeclaration","scope":2605,"src":"652:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2598,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"balance","nameLocation":"676:7:15","nodeType":"VariableDeclaration","scope":2605,"src":"668:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"needed","nameLocation":"693:6:15","nodeType":"VariableDeclaration","scope":2605,"src":"685:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:15"},"src":"621:80:15"},{"documentation":{"id":2606,"nodeType":"StructuredDocumentation","src":"707:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":2610,"name":"ERC20InvalidSender","nameLocation":"870:18:15","nodeType":"ErrorDefinition","parameters":{"id":2609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2608,"mutability":"mutable","name":"sender","nameLocation":"897:6:15","nodeType":"VariableDeclaration","scope":2610,"src":"889:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2607,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:15"},"src":"864:41:15"},{"documentation":{"id":2611,"nodeType":"StructuredDocumentation","src":"911:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":2615,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:15","nodeType":"ErrorDefinition","parameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:15","nodeType":"VariableDeclaration","scope":2615,"src":"1102:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2612,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:15"},"src":"1075:45:15"},{"documentation":{"id":2616,"nodeType":"StructuredDocumentation","src":"1126:345:15","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":2624,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:15","nodeType":"ErrorDefinition","parameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2618,"mutability":"mutable","name":"spender","nameLocation":"1517:7:15","nodeType":"VariableDeclaration","scope":2624,"src":"1509:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2617,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2620,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:15","nodeType":"VariableDeclaration","scope":2624,"src":"1526:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2619,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2622,"mutability":"mutable","name":"needed","nameLocation":"1553:6:15","nodeType":"VariableDeclaration","scope":2624,"src":"1545:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:15"},"src":"1476:85:15"},{"documentation":{"id":2625,"nodeType":"StructuredDocumentation","src":"1567:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":2629,"name":"ERC20InvalidApprover","nameLocation":"1752:20:15","nodeType":"ErrorDefinition","parameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"approver","nameLocation":"1781:8:15","nodeType":"VariableDeclaration","scope":2629,"src":"1773:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2626,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:15"},"src":"1746:45:15"},{"documentation":{"id":2630,"nodeType":"StructuredDocumentation","src":"1797:195:15","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":2634,"name":"ERC20InvalidSpender","nameLocation":"2003:19:15","nodeType":"ErrorDefinition","parameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"spender","nameLocation":"2031:7:15","nodeType":"VariableDeclaration","scope":2634,"src":"2023:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2631,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:15"},"src":"1997:43:15"}],"scope":2731,"src":"278:1764:15","usedErrors":[2605,2610,2615,2624,2629,2634],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2636,"nodeType":"StructuredDocumentation","src":"2044:141:15","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":2683,"linearizedBaseContracts":[2683],"name":"IERC721Errors","nameLocation":"2196:13:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2637,"nodeType":"StructuredDocumentation","src":"2216:219:15","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":2641,"name":"ERC721InvalidOwner","nameLocation":"2446:18:15","nodeType":"ErrorDefinition","parameters":{"id":2640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2639,"mutability":"mutable","name":"owner","nameLocation":"2473:5:15","nodeType":"VariableDeclaration","scope":2641,"src":"2465:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2638,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:15"},"src":"2440:40:15"},{"documentation":{"id":2642,"nodeType":"StructuredDocumentation","src":"2486:132:15","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":2646,"name":"ERC721NonexistentToken","nameLocation":"2629:22:15","nodeType":"ErrorDefinition","parameters":{"id":2645,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2644,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:15","nodeType":"VariableDeclaration","scope":2646,"src":"2652:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:15"},"src":"2623:46:15"},{"documentation":{"id":2647,"nodeType":"StructuredDocumentation","src":"2675:289:15","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":2655,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:15","nodeType":"ErrorDefinition","parameters":{"id":2654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2649,"mutability":"mutable","name":"sender","nameLocation":"3004:6:15","nodeType":"VariableDeclaration","scope":2655,"src":"2996:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2648,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:15","nodeType":"VariableDeclaration","scope":2655,"src":"3012:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2650,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"owner","nameLocation":"3037:5:15","nodeType":"VariableDeclaration","scope":2655,"src":"3029:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2652,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:15"},"src":"2969:75:15"},{"documentation":{"id":2656,"nodeType":"StructuredDocumentation","src":"3050:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":2660,"name":"ERC721InvalidSender","nameLocation":"3213:19:15","nodeType":"ErrorDefinition","parameters":{"id":2659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2658,"mutability":"mutable","name":"sender","nameLocation":"3241:6:15","nodeType":"VariableDeclaration","scope":2660,"src":"3233:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2657,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:15"},"src":"3207:42:15"},{"documentation":{"id":2661,"nodeType":"StructuredDocumentation","src":"3255:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":2665,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:15","nodeType":"ErrorDefinition","parameters":{"id":2664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2663,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:15","nodeType":"VariableDeclaration","scope":2665,"src":"3447:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2662,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:15"},"src":"3419:46:15"},{"documentation":{"id":2666,"nodeType":"StructuredDocumentation","src":"3471:247:15","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":2672,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:15","nodeType":"ErrorDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2668,"mutability":"mutable","name":"operator","nameLocation":"3764:8:15","nodeType":"VariableDeclaration","scope":2672,"src":"3756:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2670,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:15","nodeType":"VariableDeclaration","scope":2672,"src":"3774:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2669,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:15"},"src":"3723:68:15"},{"documentation":{"id":2673,"nodeType":"StructuredDocumentation","src":"3797:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":2677,"name":"ERC721InvalidApprover","nameLocation":"3982:21:15","nodeType":"ErrorDefinition","parameters":{"id":2676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2675,"mutability":"mutable","name":"approver","nameLocation":"4012:8:15","nodeType":"VariableDeclaration","scope":2677,"src":"4004:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2674,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:15"},"src":"3976:46:15"},{"documentation":{"id":2678,"nodeType":"StructuredDocumentation","src":"4028:197:15","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":2682,"name":"ERC721InvalidOperator","nameLocation":"4236:21:15","nodeType":"ErrorDefinition","parameters":{"id":2681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2680,"mutability":"mutable","name":"operator","nameLocation":"4266:8:15","nodeType":"VariableDeclaration","scope":2682,"src":"4258:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2679,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:15"},"src":"4230:46:15"}],"scope":2731,"src":"2186:2092:15","usedErrors":[2641,2646,2655,2660,2665,2672,2677,2682],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":2684,"nodeType":"StructuredDocumentation","src":"4280:143:15","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":2730,"linearizedBaseContracts":[2730],"name":"IERC1155Errors","nameLocation":"4434:14:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2685,"nodeType":"StructuredDocumentation","src":"4455:361:15","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":2695,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:15","nodeType":"ErrorDefinition","parameters":{"id":2694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"sender","nameLocation":"4862:6:15","nodeType":"VariableDeclaration","scope":2695,"src":"4854:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2686,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2689,"mutability":"mutable","name":"balance","nameLocation":"4878:7:15","nodeType":"VariableDeclaration","scope":2695,"src":"4870:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2691,"mutability":"mutable","name":"needed","nameLocation":"4895:6:15","nodeType":"VariableDeclaration","scope":2695,"src":"4887:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2693,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:15","nodeType":"VariableDeclaration","scope":2695,"src":"4903:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:15"},"src":"4821:99:15"},{"documentation":{"id":2696,"nodeType":"StructuredDocumentation","src":"4926:152:15","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":2700,"name":"ERC1155InvalidSender","nameLocation":"5089:20:15","nodeType":"ErrorDefinition","parameters":{"id":2699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"sender","nameLocation":"5118:6:15","nodeType":"VariableDeclaration","scope":2700,"src":"5110:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2697,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:15"},"src":"5083:43:15"},{"documentation":{"id":2701,"nodeType":"StructuredDocumentation","src":"5132:159:15","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":2705,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:15","nodeType":"ErrorDefinition","parameters":{"id":2704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2703,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:15","nodeType":"VariableDeclaration","scope":2705,"src":"5325:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2702,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:15"},"src":"5296:47:15"},{"documentation":{"id":2706,"nodeType":"StructuredDocumentation","src":"5349:256:15","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":2712,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:15","nodeType":"ErrorDefinition","parameters":{"id":2711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2708,"mutability":"mutable","name":"operator","nameLocation":"5653:8:15","nodeType":"VariableDeclaration","scope":2712,"src":"5645:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2707,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2710,"mutability":"mutable","name":"owner","nameLocation":"5671:5:15","nodeType":"VariableDeclaration","scope":2712,"src":"5663:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2709,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:15"},"src":"5610:68:15"},{"documentation":{"id":2713,"nodeType":"StructuredDocumentation","src":"5684:174:15","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":2717,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:15","nodeType":"ErrorDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2715,"mutability":"mutable","name":"approver","nameLocation":"5900:8:15","nodeType":"VariableDeclaration","scope":2717,"src":"5892:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2714,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:15"},"src":"5863:47:15"},{"documentation":{"id":2718,"nodeType":"StructuredDocumentation","src":"5916:197:15","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":2722,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:15","nodeType":"ErrorDefinition","parameters":{"id":2721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2720,"mutability":"mutable","name":"operator","nameLocation":"6155:8:15","nodeType":"VariableDeclaration","scope":2722,"src":"6147:16:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2719,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:15"},"src":"6118:47:15"},{"documentation":{"id":2723,"nodeType":"StructuredDocumentation","src":"6171:280:15","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":2729,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:15","nodeType":"ErrorDefinition","parameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:15","nodeType":"VariableDeclaration","scope":2729,"src":"6488:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2727,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:15","nodeType":"VariableDeclaration","scope":2729,"src":"6507:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2726,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:15"},"src":"6456:73:15"}],"scope":2731,"src":"4424:2107:15","usedErrors":[2695,2700,2705,2712,2717,2722,2729],"usedEvents":[]}],"src":"112:6420:15"},"id":15},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[3932],"ERC165":[4211],"ERC721":[3739],"IERC165":[4223],"IERC721":[3856],"IERC721Errors":[2683],"IERC721Metadata":[3902],"IERC721Receiver":[3874],"Strings":[4187]},"id":3740,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2732,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":2734,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":3857,"src":"133:38:16","symbolAliases":[{"foreign":{"id":2733,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"141:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":2736,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":3875,"src":"172:54:16","symbolAliases":[{"foreign":{"id":2735,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"180:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":2738,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":3903,"src":"227:65:16","symbolAliases":[{"foreign":{"id":2737,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"235:15:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":2740,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":3933,"src":"293:48:16","symbolAliases":[{"foreign":{"id":2739,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3932,"src":"301:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":2742,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":4188,"src":"342:48:16","symbolAliases":[{"foreign":{"id":2741,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"350:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":2745,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":4212,"src":"391:69:16","symbolAliases":[{"foreign":{"id":2743,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"399:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2744,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4211,"src":"408:6:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":2747,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3740,"sourceUnit":2731,"src":"461:66:16","symbolAliases":[{"foreign":{"id":2746,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2683,"src":"469:13:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2749,"name":"Context","nameLocations":["804:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3932,"src":"804:7:16"},"id":2750,"nodeType":"InheritanceSpecifier","src":"804:7:16"},{"baseName":{"id":2751,"name":"ERC165","nameLocations":["813:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":4211,"src":"813:6:16"},"id":2752,"nodeType":"InheritanceSpecifier","src":"813:6:16"},{"baseName":{"id":2753,"name":"IERC721","nameLocations":["821:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":3856,"src":"821:7:16"},"id":2754,"nodeType":"InheritanceSpecifier","src":"821:7:16"},{"baseName":{"id":2755,"name":"IERC721Metadata","nameLocations":["830:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":3902,"src":"830:15:16"},"id":2756,"nodeType":"InheritanceSpecifier","src":"830:15:16"},{"baseName":{"id":2757,"name":"IERC721Errors","nameLocations":["847:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":2683,"src":"847:13:16"},"id":2758,"nodeType":"InheritanceSpecifier","src":"847:13:16"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":2748,"nodeType":"StructuredDocumentation","src":"529:246:16","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":3739,"linearizedBaseContracts":[3739,2683,3902,3856,4211,4223,3932],"name":"ERC721","nameLocation":"794:6:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2761,"libraryName":{"id":2759,"name":"Strings","nameLocations":["873:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4187,"src":"873:7:16"},"nodeType":"UsingForDirective","src":"867:26:16","typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2763,"mutability":"mutable","name":"_name","nameLocation":"932:5:16","nodeType":"VariableDeclaration","scope":3739,"src":"917:20:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2762,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2765,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:16","nodeType":"VariableDeclaration","scope":3739,"src":"964:22:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":2764,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":2769,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:16","nodeType":"VariableDeclaration","scope":3739,"src":"993:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2768,"keyName":"tokenId","keyNameLocation":"1009:7:16","keyType":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2767,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2773,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:16","nodeType":"VariableDeclaration","scope":3739,"src":"1051:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2772,"keyName":"owner","keyNameLocation":"1067:5:16","keyType":{"id":2770,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2771,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2777,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:16","nodeType":"VariableDeclaration","scope":3739,"src":"1109:59:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2776,"keyName":"tokenId","keyNameLocation":"1125:7:16","keyType":{"id":2774,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2775,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":2783,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:16","nodeType":"VariableDeclaration","scope":3739,"src":"1175:86:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":2782,"keyName":"owner","keyNameLocation":"1191:5:16","keyType":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2781,"keyName":"operator","keyNameLocation":"1216:8:16","keyType":{"id":2779,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2780,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":2799,"nodeType":"Block","src":"1437:57:16","statements":[{"expression":{"id":2793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2791,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"1447:5:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2792,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2786,"src":"1455:5:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2794,"nodeType":"ExpressionStatement","src":"1447:13:16"},{"expression":{"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2795,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"1470:7:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2796,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"1480:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2798,"nodeType":"ExpressionStatement","src":"1470:17:16"}]},"documentation":{"id":2784,"nodeType":"StructuredDocumentation","src":"1268:108:16","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":2800,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2786,"mutability":"mutable","name":"name_","nameLocation":"1407:5:16","nodeType":"VariableDeclaration","scope":2800,"src":"1393:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2785,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2788,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:16","nodeType":"VariableDeclaration","scope":2800,"src":"1414:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2787,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:16"},"returnParameters":{"id":2790,"nodeType":"ParameterList","parameters":[],"src":"1437:0:16"},"scope":3739,"src":"1381:113:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[4210,4222],"body":{"id":2830,"nodeType":"Block","src":"1669:192:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2811,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"1698:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2813,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"1718:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$3856_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$3856_$","typeString":"type(contract IERC721)"}],"id":2812,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1713:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$3856","typeString":"type(contract IERC721)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2817,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"1754:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2819,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"1774:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$3902_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$3902_$","typeString":"type(contract IERC721Metadata)"}],"id":2818,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"1769:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$3902","typeString":"type(contract IERC721Metadata)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2826,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"1842:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2824,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967271,"src":"1818:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$3739_$","typeString":"type(contract super ERC721)"}},"id":2825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:16","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":4210,"src":"1818:23:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2810,"id":2829,"nodeType":"Return","src":"1679:175:16"}]},"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"1500:56:16","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2831,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:16","nodeType":"FunctionDefinition","overrides":{"id":2807,"nodeType":"OverrideSpecifier","overrides":[{"id":2805,"name":"ERC165","nameLocations":["1637:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":4211,"src":"1637:6:16"},{"id":2806,"name":"IERC165","nameLocations":["1645:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":4223,"src":"1645:7:16"}],"src":"1628:25:16"},"parameters":{"id":2804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:16","nodeType":"VariableDeclaration","scope":2831,"src":"1588:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2802,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:16"},"returnParameters":{"id":2810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2831,"src":"1663:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2808,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:16"},"scope":3739,"src":"1561:300:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3781],"body":{"id":2858,"nodeType":"Block","src":"1992:136:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2839,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"2006:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2840,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:16","typeDescriptions":{}}},"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2853,"nodeType":"IfStatement","src":"2002:87:16","trueBody":{"id":2852,"nodeType":"Block","src":"2027:62:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2846,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:16","typeDescriptions":{}}},"id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2845,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"2048:18:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2851,"nodeType":"RevertStatement","src":"2041:37:16"}]}},{"expression":{"baseExpression":{"id":2854,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"2105:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2856,"indexExpression":{"id":2855,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2834,"src":"2115:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2838,"id":2857,"nodeType":"Return","src":"2098:23:16"}]},"documentation":{"id":2832,"nodeType":"StructuredDocumentation","src":"1867:48:16","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":2859,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:16","nodeType":"FunctionDefinition","parameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2834,"mutability":"mutable","name":"owner","nameLocation":"1947:5:16","nodeType":"VariableDeclaration","scope":2859,"src":"1939:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2833,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:16"},"returnParameters":{"id":2838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2859,"src":"1983:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2836,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:16"},"scope":3739,"src":"1920:208:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3789],"body":{"id":2871,"nodeType":"Block","src":"2257:46:16","statements":[{"expression":{"arguments":[{"id":2868,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"2288:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2867,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"2274:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2866,"id":2870,"nodeType":"Return","src":"2267:29:16"}]},"documentation":{"id":2860,"nodeType":"StructuredDocumentation","src":"2134:46:16","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":2872,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:16","nodeType":"FunctionDefinition","parameters":{"id":2863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2862,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:16","nodeType":"VariableDeclaration","scope":2872,"src":"2202:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2861,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:16"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2872,"src":"2248:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2864,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:16"},"scope":3739,"src":"2185:118:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3887],"body":{"id":2880,"nodeType":"Block","src":"2425:29:16","statements":[{"expression":{"id":2878,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"2442:5:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2877,"id":2879,"nodeType":"Return","src":"2435:12:16"}]},"documentation":{"id":2873,"nodeType":"StructuredDocumentation","src":"2309:51:16","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":2881,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:16","nodeType":"FunctionDefinition","parameters":{"id":2874,"nodeType":"ParameterList","parameters":[],"src":"2378:2:16"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2881,"src":"2410:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2875,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:16"},"scope":3739,"src":"2365:89:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3893],"body":{"id":2889,"nodeType":"Block","src":"2580:31:16","statements":[{"expression":{"id":2887,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"2597:7:16","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":2886,"id":2888,"nodeType":"Return","src":"2590:14:16"}]},"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"2460:53:16","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":2890,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:16","nodeType":"FunctionDefinition","parameters":{"id":2883,"nodeType":"ParameterList","parameters":[],"src":"2533:2:16"},"returnParameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2890,"src":"2565:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2884,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:16"},"scope":3739,"src":"2518:93:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3901],"body":{"id":2925,"nodeType":"Block","src":"2756:176:16","statements":[{"expression":{"arguments":[{"id":2899,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"2780:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2898,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"2766:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2901,"nodeType":"ExpressionStatement","src":"2766:22:16"},{"assignments":[2903],"declarations":[{"constant":false,"id":2903,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:16","nodeType":"VariableDeclaration","scope":2925,"src":"2799:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2902,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2906,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2904,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2935,"src":"2823:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:16"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2909,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"2856:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2907,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:16","typeDescriptions":{}}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:16","memberName":"length","nodeType":"MemberAccess","src":"2850:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:16","trueExpression":{"arguments":[{"id":2917,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"2892:7:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2918,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"2901:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:16","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":4000,"src":"2901:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2914,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:16","typeDescriptions":{}}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:16","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:16","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2897,"id":2924,"nodeType":"Return","src":"2843:82:16"}]},"documentation":{"id":2891,"nodeType":"StructuredDocumentation","src":"2617:55:16","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2926,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:16","nodeType":"FunctionDefinition","parameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:16","nodeType":"VariableDeclaration","scope":2926,"src":"2695:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:16"},"returnParameters":{"id":2897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2926,"src":"2741:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2895,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:16"},"scope":3739,"src":"2677:255:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2934,"nodeType":"Block","src":"3240:26:16","statements":[{"expression":{"hexValue":"","id":2932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":2931,"id":2933,"nodeType":"Return","src":"3250:9:16"}]},"documentation":{"id":2927,"nodeType":"StructuredDocumentation","src":"2938:231:16","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":2935,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:16","nodeType":"FunctionDefinition","parameters":{"id":2928,"nodeType":"ParameterList","parameters":[],"src":"3191:2:16"},"returnParameters":{"id":2931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2930,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2935,"src":"3225:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2929,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:16"},"scope":3739,"src":"3174:92:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3829],"body":{"id":2950,"nodeType":"Block","src":"3384:52:16","statements":[{"expression":{"arguments":[{"id":2944,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2938,"src":"3403:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2945,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2940,"src":"3407:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":2946,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"3416:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2943,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3542,3608],"referencedDeclaration":3542,"src":"3394:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":2948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2949,"nodeType":"ExpressionStatement","src":"3394:35:16"}]},"documentation":{"id":2936,"nodeType":"StructuredDocumentation","src":"3272:46:16","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":2951,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:16","nodeType":"FunctionDefinition","parameters":{"id":2941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"to","nameLocation":"3348:2:16","nodeType":"VariableDeclaration","scope":2951,"src":"3340:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2937,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2940,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:16","nodeType":"VariableDeclaration","scope":2951,"src":"3352:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2939,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:16"},"returnParameters":{"id":2942,"nodeType":"ParameterList","parameters":[],"src":"3384:0:16"},"scope":3739,"src":"3323:113:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3845],"body":{"id":2967,"nodeType":"Block","src":"3573:78:16","statements":[{"expression":{"arguments":[{"id":2960,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"3597:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2959,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"3583:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2962,"nodeType":"ExpressionStatement","src":"3583:22:16"},{"expression":{"arguments":[{"id":2964,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"3636:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2963,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"3623:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2958,"id":2966,"nodeType":"Return","src":"3616:28:16"}]},"documentation":{"id":2952,"nodeType":"StructuredDocumentation","src":"3442:50:16","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:16","nodeType":"FunctionDefinition","parameters":{"id":2955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2954,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:16","nodeType":"VariableDeclaration","scope":2968,"src":"3518:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2953,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:16"},"returnParameters":{"id":2958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2968,"src":"3564:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2956,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:16"},"scope":3739,"src":"3497:154:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3837],"body":{"id":2983,"nodeType":"Block","src":"3793:69:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2977,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"3822:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2979,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"3836:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2980,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2973,"src":"3846:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2976,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3645,"src":"3803:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2982,"nodeType":"ExpressionStatement","src":"3803:52:16"}]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"3657:56:16","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":2984,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:16","nodeType":"FunctionDefinition","parameters":{"id":2974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"operator","nameLocation":"3753:8:16","nodeType":"VariableDeclaration","scope":2984,"src":"3745:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2973,"mutability":"mutable","name":"approved","nameLocation":"3768:8:16","nodeType":"VariableDeclaration","scope":2984,"src":"3763:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2972,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:16"},"returnParameters":{"id":2975,"nodeType":"ParameterList","parameters":[],"src":"3793:0:16"},"scope":3739,"src":"3718:144:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3855],"body":{"id":3000,"nodeType":"Block","src":"4022:59:16","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":2994,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"4039:18:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2996,"indexExpression":{"id":2995,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"4058:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2998,"indexExpression":{"id":2997,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2989,"src":"4065:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2993,"id":2999,"nodeType":"Return","src":"4032:42:16"}]},"documentation":{"id":2985,"nodeType":"StructuredDocumentation","src":"3868:55:16","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":3001,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:16","nodeType":"FunctionDefinition","parameters":{"id":2990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"mutability":"mutable","name":"owner","nameLocation":"3962:5:16","nodeType":"VariableDeclaration","scope":3001,"src":"3954:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2986,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2989,"mutability":"mutable","name":"operator","nameLocation":"3977:8:16","nodeType":"VariableDeclaration","scope":3001,"src":"3969:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2988,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:16"},"returnParameters":{"id":2993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2992,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3001,"src":"4016:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2991,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:16"},"scope":3739,"src":"3928:153:16","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[3821],"body":{"id":3046,"nodeType":"Block","src":"4223:498:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3011,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"4237:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3012,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:16","typeDescriptions":{}}},"id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3025,"nodeType":"IfStatement","src":"4233:87:16","trueBody":{"id":3024,"nodeType":"Block","src":"4255:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3018,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:16","typeDescriptions":{}}},"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3017,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"4276:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3023,"nodeType":"RevertStatement","src":"4269:40:16"}]}},{"assignments":[3027],"declarations":[{"constant":false,"id":3027,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:16","nodeType":"VariableDeclaration","scope":3046,"src":"4538:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3026,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3034,"initialValue":{"arguments":[{"id":3029,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"4570:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3030,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"4574:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3031,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"4583:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3028,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"4562:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3035,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"4610:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3036,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"4627:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3045,"nodeType":"IfStatement","src":"4606:109:16","trueBody":{"id":3044,"nodeType":"Block","src":"4633:82:16","statements":[{"errorCall":{"arguments":[{"id":3039,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3004,"src":"4675:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3040,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"4681:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3041,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"4690:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3038,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"4654:20:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3043,"nodeType":"RevertStatement","src":"4647:57:16"}]}}]},"documentation":{"id":3002,"nodeType":"StructuredDocumentation","src":"4087:51:16","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":3047,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:16","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"from","nameLocation":"4173:4:16","nodeType":"VariableDeclaration","scope":3047,"src":"4165:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3003,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3006,"mutability":"mutable","name":"to","nameLocation":"4187:2:16","nodeType":"VariableDeclaration","scope":3047,"src":"4179:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:16","nodeType":"VariableDeclaration","scope":3047,"src":"4191:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:16"},"returnParameters":{"id":3010,"nodeType":"ParameterList","parameters":[],"src":"4223:0:16"},"scope":3739,"src":"4143:578:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[3811],"body":{"id":3064,"nodeType":"Block","src":"4863:56:16","statements":[{"expression":{"arguments":[{"id":3058,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"4890:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3059,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3052,"src":"4896:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3060,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"4900:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3057,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[3065,3091],"referencedDeclaration":3091,"src":"4873:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3063,"nodeType":"ExpressionStatement","src":"4873:39:16"}]},"documentation":{"id":3048,"nodeType":"StructuredDocumentation","src":"4727:55:16","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":3065,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:16","nodeType":"FunctionDefinition","parameters":{"id":3055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3050,"mutability":"mutable","name":"from","nameLocation":"4821:4:16","nodeType":"VariableDeclaration","scope":3065,"src":"4813:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3049,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3052,"mutability":"mutable","name":"to","nameLocation":"4835:2:16","nodeType":"VariableDeclaration","scope":3065,"src":"4827:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3054,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:16","nodeType":"VariableDeclaration","scope":3065,"src":"4839:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:16"},"returnParameters":{"id":3056,"nodeType":"ParameterList","parameters":[],"src":"4863:0:16"},"scope":3739,"src":"4787:132:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3801],"body":{"id":3090,"nodeType":"Block","src":"5088:105:16","statements":[{"expression":{"arguments":[{"id":3078,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"5111:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3079,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5117:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3080,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5121:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3077,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"5098:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3082,"nodeType":"ExpressionStatement","src":"5098:31:16"},{"expression":{"arguments":[{"id":3084,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"5162:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3085,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"5168:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3086,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"5172:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3087,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"5181:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3083,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"5139:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3089,"nodeType":"ExpressionStatement","src":"5139:47:16"}]},"documentation":{"id":3066,"nodeType":"StructuredDocumentation","src":"4925:55:16","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":3091,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:16","nodeType":"FunctionDefinition","parameters":{"id":3075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3068,"mutability":"mutable","name":"from","nameLocation":"5019:4:16","nodeType":"VariableDeclaration","scope":3091,"src":"5011:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3067,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"to","nameLocation":"5033:2:16","nodeType":"VariableDeclaration","scope":3091,"src":"5025:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:16","nodeType":"VariableDeclaration","scope":3091,"src":"5037:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3071,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"data","nameLocation":"5067:4:16","nodeType":"VariableDeclaration","scope":3091,"src":"5054:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3073,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:16"},"returnParameters":{"id":3076,"nodeType":"ParameterList","parameters":[],"src":"5088:0:16"},"scope":3739,"src":"4985:208:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":3103,"nodeType":"Block","src":"5782:40:16","statements":[{"expression":{"baseExpression":{"id":3099,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"5799:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3101,"indexExpression":{"id":3100,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3094,"src":"5807:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3098,"id":3102,"nodeType":"Return","src":"5792:23:16"}]},"documentation":{"id":3092,"nodeType":"StructuredDocumentation","src":"5199:503:16","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":3104,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:16","nodeType":"FunctionDefinition","parameters":{"id":3095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3094,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:16","nodeType":"VariableDeclaration","scope":3104,"src":"5725:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3093,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:16"},"returnParameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3097,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3104,"src":"5773:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3096,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:16"},"scope":3739,"src":"5707:115:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3116,"nodeType":"Block","src":"6017:48:16","statements":[{"expression":{"baseExpression":{"id":3112,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"6034:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3114,"indexExpression":{"id":3113,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"6050:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3111,"id":3115,"nodeType":"Return","src":"6027:31:16"}]},"documentation":{"id":3105,"nodeType":"StructuredDocumentation","src":"5828:105:16","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":3117,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:16","nodeType":"FunctionDefinition","parameters":{"id":3108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:16","nodeType":"VariableDeclaration","scope":3117,"src":"5960:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:16"},"returnParameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3117,"src":"6008:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:16"},"scope":3739,"src":"5938:127:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3152,"nodeType":"Block","src":"6485:163:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3129,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"6514:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3131,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3130,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:16","typeDescriptions":{}}},"id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3135,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"6552:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3136,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"6561:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":3139,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"6589:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3140,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"6596:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3138,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"6572:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3144,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"6621:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3143,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3117,"src":"6608:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3146,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"6633:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3149,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3128,"id":3151,"nodeType":"Return","src":"6495:146:16"}]},"documentation":{"id":3118,"nodeType":"StructuredDocumentation","src":"6071:300:16","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":3153,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:16","nodeType":"FunctionDefinition","parameters":{"id":3125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3120,"mutability":"mutable","name":"owner","nameLocation":"6407:5:16","nodeType":"VariableDeclaration","scope":3153,"src":"6399:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3119,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"spender","nameLocation":"6422:7:16","nodeType":"VariableDeclaration","scope":3153,"src":"6414:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3121,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3124,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:16","nodeType":"VariableDeclaration","scope":3153,"src":"6431:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3123,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:16"},"returnParameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3153,"src":"6479:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3126,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:16"},"scope":3739,"src":"6376:272:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3189,"nodeType":"Block","src":"7179:271:16","statements":[{"condition":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:16","subExpression":{"arguments":[{"id":3164,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"7208:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3165,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"7215:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3166,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"7224:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3163,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"7194:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3188,"nodeType":"IfStatement","src":"7189:255:16","trueBody":{"id":3187,"nodeType":"Block","src":"7234:210:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3169,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"7252:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3170,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:16","typeDescriptions":{}}},"id":3173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3185,"nodeType":"Block","src":"7350:84:16","statements":[{"errorCall":{"arguments":[{"id":3181,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"7402:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3182,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"7411:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3180,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"7375:26:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3184,"nodeType":"RevertStatement","src":"7368:51:16"}]},"id":3186,"nodeType":"IfStatement","src":"7248:186:16","trueBody":{"id":3179,"nodeType":"Block","src":"7273:71:16","statements":[{"errorCall":{"arguments":[{"id":3176,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"7321:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3175,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"7298:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3178,"nodeType":"RevertStatement","src":"7291:38:16"}]}}]}}]},"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"6654:423:16","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":3190,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:16","nodeType":"FunctionDefinition","parameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3156,"mutability":"mutable","name":"owner","nameLocation":"7116:5:16","nodeType":"VariableDeclaration","scope":3190,"src":"7108:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3155,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"spender","nameLocation":"7131:7:16","nodeType":"VariableDeclaration","scope":3190,"src":"7123:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3157,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3160,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:16","nodeType":"VariableDeclaration","scope":3190,"src":"7140:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3159,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:16"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[],"src":"7179:0:16"},"scope":3739,"src":"7082:368:16","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3205,"nodeType":"Block","src":"8167:78:16","statements":[{"id":3204,"nodeType":"UncheckedBlock","src":"8177:62:16","statements":[{"expression":{"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3198,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"8201:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3200,"indexExpression":{"id":3199,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"8211:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3201,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"8223:5:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3203,"nodeType":"ExpressionStatement","src":"8201:27:16"}]}]},"documentation":{"id":3191,"nodeType":"StructuredDocumentation","src":"7456:631:16","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":3206,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:16","nodeType":"FunctionDefinition","parameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"account","nameLocation":"8126:7:16","nodeType":"VariableDeclaration","scope":3206,"src":"8118:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3192,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3195,"mutability":"mutable","name":"value","nameLocation":"8143:5:16","nodeType":"VariableDeclaration","scope":3206,"src":"8135:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":3194,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:16","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:16"},"returnParameters":{"id":3197,"nodeType":"ParameterList","parameters":[],"src":"8167:0:16"},"scope":3739,"src":"8092:153:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3295,"nodeType":"Block","src":"8933:700:16","statements":[{"assignments":[3219],"declarations":[{"constant":false,"id":3219,"mutability":"mutable","name":"from","nameLocation":"8951:4:16","nodeType":"VariableDeclaration","scope":3295,"src":"8943:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3218,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3223,"initialValue":{"arguments":[{"id":3221,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"8967:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3220,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"8958:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3224,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"9035:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3225,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:16","typeDescriptions":{}}},"id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3237,"nodeType":"IfStatement","src":"9031:86:16","trueBody":{"id":3236,"nodeType":"Block","src":"9055:62:16","statements":[{"expression":{"arguments":[{"id":3231,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9086:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3232,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"9092:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3233,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"9098:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3230,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"9069:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3235,"nodeType":"ExpressionStatement","src":"9069:37:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3238,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9161:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3240,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3239,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:16","typeDescriptions":{}}},"id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3265,"nodeType":"IfStatement","src":"9157:256:16","trueBody":{"id":3264,"nodeType":"Block","src":"9181:232:16","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3245,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:16","typeDescriptions":{}}},"id":3248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3249,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"9298:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3250,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:16","typeDescriptions":{}}},"id":3253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":3254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3244,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3542,3608],"referencedDeclaration":3608,"src":"9277:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3256,"nodeType":"ExpressionStatement","src":"9277:48:16"},{"id":3263,"nodeType":"UncheckedBlock","src":"9340:63:16","statements":[{"expression":{"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3257,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"9368:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3259,"indexExpression":{"id":3258,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9378:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":3260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3262,"nodeType":"ExpressionStatement","src":"9368:20:16"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3266,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"9427:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3267,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:16","typeDescriptions":{}}},"id":3270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3280,"nodeType":"IfStatement","src":"9423:107:16","trueBody":{"id":3279,"nodeType":"Block","src":"9445:85:16","statements":[{"id":3278,"nodeType":"UncheckedBlock","src":"9459:61:16","statements":[{"expression":{"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3272,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"9487:9:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3274,"indexExpression":{"id":3273,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"9497:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3277,"nodeType":"ExpressionStatement","src":"9487:18:16"}]}]}},{"expression":{"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3281,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"9540:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3283,"indexExpression":{"id":3282,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"9548:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3284,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"9559:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3286,"nodeType":"ExpressionStatement","src":"9540:21:16"},{"eventCall":{"arguments":[{"id":3288,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9586:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3289,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3209,"src":"9592:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3290,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"9596:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3287,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"9577:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3292,"nodeType":"EmitStatement","src":"9572:32:16"},{"expression":{"id":3293,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"9622:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3217,"id":3294,"nodeType":"Return","src":"9615:11:16"}]},"documentation":{"id":3207,"nodeType":"StructuredDocumentation","src":"8251:582:16","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":3296,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:16","nodeType":"FunctionDefinition","parameters":{"id":3214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3209,"mutability":"mutable","name":"to","nameLocation":"8863:2:16","nodeType":"VariableDeclaration","scope":3296,"src":"8855:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3208,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3211,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:16","nodeType":"VariableDeclaration","scope":3296,"src":"8867:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3213,"mutability":"mutable","name":"auth","nameLocation":"8892:4:16","nodeType":"VariableDeclaration","scope":3296,"src":"8884:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3212,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:16"},"returnParameters":{"id":3217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3296,"src":"8924:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3215,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:16"},"scope":3739,"src":"8838:795:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3345,"nodeType":"Block","src":"10008:274:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3304,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"10022:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3305,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:16","typeDescriptions":{}}},"id":3308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3318,"nodeType":"IfStatement","src":"10018:87:16","trueBody":{"id":3317,"nodeType":"Block","src":"10040:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3311,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:16","typeDescriptions":{}}},"id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3310,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"10061:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3316,"nodeType":"RevertStatement","src":"10054:40:16"}]}},{"assignments":[3320],"declarations":[{"constant":false,"id":3320,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:16","nodeType":"VariableDeclaration","scope":3345,"src":"10114:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3319,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3329,"initialValue":{"arguments":[{"id":3322,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"10146:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3323,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3301,"src":"10150:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3324,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:16","typeDescriptions":{}}},"id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3321,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"10138:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3330,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"10184:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3331,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:16","typeDescriptions":{}}},"id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3344,"nodeType":"IfStatement","src":"10180:96:16","trueBody":{"id":3343,"nodeType":"Block","src":"10213:63:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3337,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:16","typeDescriptions":{}}},"id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3336,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"10234:19:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3342,"nodeType":"RevertStatement","src":"10227:38:16"}]}}]},"documentation":{"id":3297,"nodeType":"StructuredDocumentation","src":"9639:311:16","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":3346,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:16","nodeType":"FunctionDefinition","parameters":{"id":3302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3299,"mutability":"mutable","name":"to","nameLocation":"9978:2:16","nodeType":"VariableDeclaration","scope":3346,"src":"9970:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3298,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3301,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:16","nodeType":"VariableDeclaration","scope":3346,"src":"9982:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3300,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:16"},"returnParameters":{"id":3303,"nodeType":"ParameterList","parameters":[],"src":"10008:0:16"},"scope":3739,"src":"9955:327:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3360,"nodeType":"Block","src":"10690:43:16","statements":[{"expression":{"arguments":[{"id":3355,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"10710:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3356,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3351,"src":"10714:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3354,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[3361,3387],"referencedDeclaration":3387,"src":"10700:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":3358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3359,"nodeType":"ExpressionStatement","src":"10700:26:16"}]},"documentation":{"id":3347,"nodeType":"StructuredDocumentation","src":"10288:340:16","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3361,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:16","nodeType":"FunctionDefinition","parameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3349,"mutability":"mutable","name":"to","nameLocation":"10660:2:16","nodeType":"VariableDeclaration","scope":3361,"src":"10652:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3348,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3351,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:16","nodeType":"VariableDeclaration","scope":3361,"src":"10664:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3350,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:16"},"returnParameters":{"id":3353,"nodeType":"ParameterList","parameters":[],"src":"10690:0:16"},"scope":3739,"src":"10633:100:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3386,"nodeType":"Block","src":"11038:98:16","statements":[{"expression":{"arguments":[{"id":3372,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"11054:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3373,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"11058:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3371,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"11048:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3375,"nodeType":"ExpressionStatement","src":"11048:18:16"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3378,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:16","typeDescriptions":{}}},"id":3380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3381,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3364,"src":"11111:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3382,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3366,"src":"11115:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3383,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3368,"src":"11124:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3376,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"11076:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3385,"nodeType":"ExpressionStatement","src":"11076:53:16"}]},"documentation":{"id":3362,"nodeType":"StructuredDocumentation","src":"10739:210:16","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":3387,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:16","nodeType":"FunctionDefinition","parameters":{"id":3369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3364,"mutability":"mutable","name":"to","nameLocation":"10981:2:16","nodeType":"VariableDeclaration","scope":3387,"src":"10973:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3363,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3366,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:16","nodeType":"VariableDeclaration","scope":3387,"src":"10985:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3368,"mutability":"mutable","name":"data","nameLocation":"11015:4:16","nodeType":"VariableDeclaration","scope":3387,"src":"11002:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3367,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:16"},"returnParameters":{"id":3370,"nodeType":"ParameterList","parameters":[],"src":"11038:0:16"},"scope":3739,"src":"10954:182:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3419,"nodeType":"Block","src":"11503:186:16","statements":[{"assignments":[3394],"declarations":[{"constant":false,"id":3394,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:16","nodeType":"VariableDeclaration","scope":3419,"src":"11513:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3393,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3406,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3396,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:16","typeDescriptions":{}}},"id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3400,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"11557:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3402,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3401,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:16","typeDescriptions":{}}},"id":3404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3395,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"11537:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3407,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3394,"src":"11591:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3408,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:16","typeDescriptions":{}}},"id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3418,"nodeType":"IfStatement","src":"11587:96:16","trueBody":{"id":3417,"nodeType":"Block","src":"11620:63:16","statements":[{"errorCall":{"arguments":[{"id":3414,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"11664:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3413,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"11641:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3416,"nodeType":"RevertStatement","src":"11634:38:16"}]}}]},"documentation":{"id":3388,"nodeType":"StructuredDocumentation","src":"11142:315:16","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":3420,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:16","nodeType":"FunctionDefinition","parameters":{"id":3391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3390,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:16","nodeType":"VariableDeclaration","scope":3420,"src":"11477:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3389,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:16"},"returnParameters":{"id":3392,"nodeType":"ParameterList","parameters":[],"src":"11503:0:16"},"scope":3739,"src":"11462:227:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3479,"nodeType":"Block","src":"12084:389:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3430,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"12098:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3431,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:16","typeDescriptions":{}}},"id":3434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3444,"nodeType":"IfStatement","src":"12094:87:16","trueBody":{"id":3443,"nodeType":"Block","src":"12116:65:16","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3437,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:16","typeDescriptions":{}}},"id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3436,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"12137:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3442,"nodeType":"RevertStatement","src":"12130:40:16"}]}},{"assignments":[3446],"declarations":[{"constant":false,"id":3446,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:16","nodeType":"VariableDeclaration","scope":3479,"src":"12190:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3445,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3455,"initialValue":{"arguments":[{"id":3448,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"12222:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3449,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"12226:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3450,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:16","typeDescriptions":{}}},"id":3453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3447,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"12214:7:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3456,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"12260:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:16","typeDescriptions":{}}},"id":3460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3467,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"12362:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3468,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"12379:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3477,"nodeType":"IfStatement","src":"12358:109:16","trueBody":{"id":3476,"nodeType":"Block","src":"12385:82:16","statements":[{"errorCall":{"arguments":[{"id":3471,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"12427:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3472,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"12433:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3473,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3446,"src":"12442:13:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3470,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"12406:20:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3475,"nodeType":"RevertStatement","src":"12399:57:16"}]}},"id":3478,"nodeType":"IfStatement","src":"12256:211:16","trueBody":{"id":3466,"nodeType":"Block","src":"12289:63:16","statements":[{"errorCall":{"arguments":[{"id":3463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"12333:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3462,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"12310:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3465,"nodeType":"RevertStatement","src":"12303:38:16"}]}}]},"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"11695:313:16","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":3480,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:16","nodeType":"FunctionDefinition","parameters":{"id":3428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"from","nameLocation":"12040:4:16","nodeType":"VariableDeclaration","scope":3480,"src":"12032:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3422,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3425,"mutability":"mutable","name":"to","nameLocation":"12054:2:16","nodeType":"VariableDeclaration","scope":3480,"src":"12046:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3424,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3427,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:16","nodeType":"VariableDeclaration","scope":3480,"src":"12058:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3426,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:16"},"returnParameters":{"id":3429,"nodeType":"ParameterList","parameters":[],"src":"12084:0:16"},"scope":3739,"src":"12013:460:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3497,"nodeType":"Block","src":"13481:53:16","statements":[{"expression":{"arguments":[{"id":3491,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"13505:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3485,"src":"13511:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3487,"src":"13515:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":3490,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[3498,3524],"referencedDeclaration":3524,"src":"13491:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3496,"nodeType":"ExpressionStatement","src":"13491:36:16"}]},"documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"12479:922:16","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":3498,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:16","nodeType":"FunctionDefinition","parameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3483,"mutability":"mutable","name":"from","nameLocation":"13437:4:16","nodeType":"VariableDeclaration","scope":3498,"src":"13429:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3482,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3485,"mutability":"mutable","name":"to","nameLocation":"13451:2:16","nodeType":"VariableDeclaration","scope":3498,"src":"13443:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3484,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3487,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:16","nodeType":"VariableDeclaration","scope":3498,"src":"13455:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3486,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:16"},"returnParameters":{"id":3489,"nodeType":"ParameterList","parameters":[],"src":"13481:0:16"},"scope":3739,"src":"13406:128:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3523,"nodeType":"Block","src":"13873:102:16","statements":[{"expression":{"arguments":[{"id":3511,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13893:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3512,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"13899:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3513,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"13903:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3510,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"13883:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3515,"nodeType":"ExpressionStatement","src":"13883:28:16"},{"expression":{"arguments":[{"id":3517,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"13944:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3518,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"13950:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"13954:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3520,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3507,"src":"13963:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3516,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"13921:22:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3522,"nodeType":"ExpressionStatement","src":"13921:47:16"}]},"documentation":{"id":3499,"nodeType":"StructuredDocumentation","src":"13540:226:16","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":3524,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:16","nodeType":"FunctionDefinition","parameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3501,"mutability":"mutable","name":"from","nameLocation":"13802:4:16","nodeType":"VariableDeclaration","scope":3524,"src":"13794:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3500,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3503,"mutability":"mutable","name":"to","nameLocation":"13816:2:16","nodeType":"VariableDeclaration","scope":3524,"src":"13808:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3502,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3505,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:16","nodeType":"VariableDeclaration","scope":3524,"src":"13820:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3504,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3507,"mutability":"mutable","name":"data","nameLocation":"13850:4:16","nodeType":"VariableDeclaration","scope":3524,"src":"13837:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3506,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:16"},"returnParameters":{"id":3509,"nodeType":"ParameterList","parameters":[],"src":"13873:0:16"},"scope":3739,"src":"13771:204:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3541,"nodeType":"Block","src":"14488:50:16","statements":[{"expression":{"arguments":[{"id":3535,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3527,"src":"14507:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3536,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"14511:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3537,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3531,"src":"14520:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":3538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3534,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[3542,3608],"referencedDeclaration":3608,"src":"14498:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3540,"nodeType":"ExpressionStatement","src":"14498:33:16"}]},"documentation":{"id":3525,"nodeType":"StructuredDocumentation","src":"13981:432:16","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":3542,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:16","nodeType":"FunctionDefinition","parameters":{"id":3532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3527,"mutability":"mutable","name":"to","nameLocation":"14444:2:16","nodeType":"VariableDeclaration","scope":3542,"src":"14436:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3526,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:16","nodeType":"VariableDeclaration","scope":3542,"src":"14448:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3528,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3531,"mutability":"mutable","name":"auth","nameLocation":"14473:4:16","nodeType":"VariableDeclaration","scope":3542,"src":"14465:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3530,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:16"},"returnParameters":{"id":3533,"nodeType":"ParameterList","parameters":[],"src":"14488:0:16"},"scope":3739,"src":"14418:120:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3607,"nodeType":"Block","src":"14814:568:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3554,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"14880:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3555,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"14893:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3556,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:16","typeDescriptions":{}}},"id":3559,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3600,"nodeType":"IfStatement","src":"14876:460:16","trueBody":{"id":3599,"nodeType":"Block","src":"14913:423:16","statements":[{"assignments":[3563],"declarations":[{"constant":false,"id":3563,"mutability":"mutable","name":"owner","nameLocation":"14935:5:16","nodeType":"VariableDeclaration","scope":3599,"src":"14927:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3562,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3567,"initialValue":{"arguments":[{"id":3565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"14957:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3564,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"14943:13:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3568,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"15093:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3569,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:16","typeDescriptions":{}}},"id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3574,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"15115:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3575,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"15124:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:16","subExpression":{"arguments":[{"id":3579,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"15150:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3580,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"15157:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3578,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3001,"src":"15133:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":3581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3589,"nodeType":"IfStatement","src":"15089:142:16","trueBody":{"id":3588,"nodeType":"Block","src":"15164:67:16","statements":[{"errorCall":{"arguments":[{"id":3585,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3549,"src":"15211:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3584,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2677,"src":"15189:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3587,"nodeType":"RevertStatement","src":"15182:34:16"}]}},{"condition":{"id":3590,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3551,"src":"15249:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3598,"nodeType":"IfStatement","src":"15245:81:16","trueBody":{"id":3597,"nodeType":"Block","src":"15260:66:16","statements":[{"eventCall":{"arguments":[{"id":3592,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"15292:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3593,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"15299:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3594,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"15303:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3591,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"15283:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3596,"nodeType":"EmitStatement","src":"15278:33:16"}]}}]}},{"expression":{"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3601,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2777,"src":"15346:15:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3603,"indexExpression":{"id":3602,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"15362:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3604,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"15373:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3606,"nodeType":"ExpressionStatement","src":"15346:29:16"}]},"documentation":{"id":3543,"nodeType":"StructuredDocumentation","src":"14544:171:16","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":3608,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:16","nodeType":"FunctionDefinition","parameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3545,"mutability":"mutable","name":"to","nameLocation":"14746:2:16","nodeType":"VariableDeclaration","scope":3608,"src":"14738:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3544,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:16","nodeType":"VariableDeclaration","scope":3608,"src":"14750:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3546,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"auth","nameLocation":"14775:4:16","nodeType":"VariableDeclaration","scope":3608,"src":"14767:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3548,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3551,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:16","nodeType":"VariableDeclaration","scope":3608,"src":"14781:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3550,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:16"},"returnParameters":{"id":3553,"nodeType":"ParameterList","parameters":[],"src":"14814:0:16"},"scope":3739,"src":"14720:662:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3644,"nodeType":"Block","src":"15684:219:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3618,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"15698:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:16","typeDescriptions":{}}},"id":3622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3629,"nodeType":"IfStatement","src":"15694:91:16","trueBody":{"id":3628,"nodeType":"Block","src":"15722:63:16","statements":[{"errorCall":{"arguments":[{"id":3625,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"15765:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3624,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"15743:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3627,"nodeType":"RevertStatement","src":"15736:38:16"}]}},{"expression":{"id":3636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3630,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"15794:18:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3633,"indexExpression":{"id":3631,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"15813:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3634,"indexExpression":{"id":3632,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"15820:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3635,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"15832:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3637,"nodeType":"ExpressionStatement","src":"15794:46:16"},{"eventCall":{"arguments":[{"id":3639,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"15870:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3640,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"15877:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3641,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"15887:8:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3638,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3773,"src":"15855:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3643,"nodeType":"EmitStatement","src":"15850:46:16"}]},"documentation":{"id":3609,"nodeType":"StructuredDocumentation","src":"15388:198:16","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":3645,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:16","nodeType":"FunctionDefinition","parameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3611,"mutability":"mutable","name":"owner","nameLocation":"15627:5:16","nodeType":"VariableDeclaration","scope":3645,"src":"15619:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3610,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3613,"mutability":"mutable","name":"operator","nameLocation":"15642:8:16","nodeType":"VariableDeclaration","scope":3645,"src":"15634:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3612,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3615,"mutability":"mutable","name":"approved","nameLocation":"15657:8:16","nodeType":"VariableDeclaration","scope":3645,"src":"15652:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3614,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:16"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[],"src":"15684:0:16"},"scope":3739,"src":"15591:312:16","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3673,"nodeType":"Block","src":"16210:169:16","statements":[{"assignments":[3654],"declarations":[{"constant":false,"id":3654,"mutability":"mutable","name":"owner","nameLocation":"16228:5:16","nodeType":"VariableDeclaration","scope":3673,"src":"16220:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3653,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3658,"initialValue":{"arguments":[{"id":3656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"16245:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3655,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3104,"src":"16236:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:16"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"16267:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3660,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:16","typeDescriptions":{}}},"id":3663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3670,"nodeType":"IfStatement","src":"16263:88:16","trueBody":{"id":3669,"nodeType":"Block","src":"16288:63:16","statements":[{"errorCall":{"arguments":[{"id":3666,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"16332:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3665,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"16309:22:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3668,"nodeType":"RevertStatement","src":"16302:38:16"}]}},{"expression":{"id":3671,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3654,"src":"16367:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3652,"id":3672,"nodeType":"Return","src":"16360:12:16"}]},"documentation":{"id":3646,"nodeType":"StructuredDocumentation","src":"15909:224:16","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":3674,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:16","nodeType":"FunctionDefinition","parameters":{"id":3649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3648,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:16","nodeType":"VariableDeclaration","scope":3674,"src":"16161:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3647,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:16"},"returnParameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3674,"src":"16201:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3650,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:16"},"scope":3739,"src":"16138:241:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3737,"nodeType":"Block","src":"17020:680:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3686,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"17034:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:16","memberName":"code","nodeType":"MemberAccess","src":"17034:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:16","memberName":"length","nodeType":"MemberAccess","src":"17034:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3736,"nodeType":"IfStatement","src":"17030:664:16","trueBody":{"id":3735,"nodeType":"Block","src":"17054:640:16","statements":[{"clauses":[{"block":{"id":3715,"nodeType":"Block","src":"17168:162:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3704,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"17190:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":3705,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17200:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$3874_$","typeString":"type(contract IERC721Receiver)"}},"id":3706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:16","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":3873,"src":"17200:32:16","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":3707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:16","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3714,"nodeType":"IfStatement","src":"17186:130:16","trueBody":{"id":3713,"nodeType":"Block","src":"17243:73:16","statements":[{"errorCall":{"arguments":[{"id":3710,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"17294:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3709,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"17272:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3712,"nodeType":"RevertStatement","src":"17265:32:16"}]}}]},"errorName":"","id":3716,"nodeType":"TryCatchClause","parameters":{"id":3703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"retval","nameLocation":"17160:6:16","nodeType":"VariableDeclaration","scope":3716,"src":"17153:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3701,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:16"},"src":"17144:186:16"},{"block":{"id":3732,"nodeType":"Block","src":"17359:325:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3720,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3718,"src":"17381:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:16","memberName":"length","nodeType":"MemberAccess","src":"17381:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3730,"nodeType":"Block","src":"17480:190:16","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:16","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:16","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:16"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:16"},"nodeType":"YulFunctionCall","src":"17599:15:16"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:16"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:16"},"nodeType":"YulFunctionCall","src":"17616:13:16"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:16"},"nodeType":"YulFunctionCall","src":"17592:38:16"},"nodeType":"YulExpressionStatement","src":"17592:38:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3718,"isOffset":false,"isSlot":false,"src":"17607:6:16","valueSize":1},{"declaration":3718,"isOffset":false,"isSlot":false,"src":"17622:6:16","valueSize":1}],"id":3729,"nodeType":"InlineAssembly","src":"17557:95:16"}]},"id":3731,"nodeType":"IfStatement","src":"17377:293:16","trueBody":{"id":3728,"nodeType":"Block","src":"17401:73:16","statements":[{"errorCall":{"arguments":[{"id":3725,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"17452:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3724,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"17430:21:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3727,"nodeType":"RevertStatement","src":"17423:32:16"}]}}]},"errorName":"","id":3733,"nodeType":"TryCatchClause","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"reason","nameLocation":"17351:6:16","nodeType":"VariableDeclaration","scope":3733,"src":"17338:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3717,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:16"},"src":"17331:353:16"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3695,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3914,"src":"17109:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3697,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"17123:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3698,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3681,"src":"17129:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3699,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"17138:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3692,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"17088:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3691,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3874,"src":"17072:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$3874_$","typeString":"type(contract IERC721Receiver)"}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$3874","typeString":"contract IERC721Receiver"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:16","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":3873,"src":"17072:36:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:16","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3734,"nodeType":"TryStatement","src":"17068:616:16"}]}}]},"documentation":{"id":3675,"nodeType":"StructuredDocumentation","src":"16385:528:16","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":3738,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:16","nodeType":"FunctionDefinition","parameters":{"id":3684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3677,"mutability":"mutable","name":"from","nameLocation":"16958:4:16","nodeType":"VariableDeclaration","scope":3738,"src":"16950:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3676,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3679,"mutability":"mutable","name":"to","nameLocation":"16972:2:16","nodeType":"VariableDeclaration","scope":3738,"src":"16964:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3678,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3681,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:16","nodeType":"VariableDeclaration","scope":3738,"src":"16976:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3680,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3683,"mutability":"mutable","name":"data","nameLocation":"17006:4:16","nodeType":"VariableDeclaration","scope":3738,"src":"16993:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3682,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:16"},"returnParameters":{"id":3685,"nodeType":"ParameterList","parameters":[],"src":"17020:0:16"},"scope":3739,"src":"16918:782:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3740,"src":"776:16926:16","usedErrors":[2641,2646,2655,2660,2665,2672,2677,2682],"usedEvents":[3755,3764,3773]}],"src":"107:17596:16"},"id":16},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[4223],"IERC721":[3856]},"id":3857,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3741,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:17"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":3743,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3857,"sourceUnit":4224,"src":"134:62:17","symbolAliases":[{"foreign":{"id":3742,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"142:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3745,"name":"IERC165","nameLocations":["287:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":4223,"src":"287:7:17"},"id":3746,"nodeType":"InheritanceSpecifier","src":"287:7:17"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":3744,"nodeType":"StructuredDocumentation","src":"198:67:17","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":3856,"linearizedBaseContracts":[3856,4223],"name":"IERC721","nameLocation":"276:7:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3747,"nodeType":"StructuredDocumentation","src":"301:88:17","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3755,"name":"Transfer","nameLocation":"400:8:17","nodeType":"EventDefinition","parameters":{"id":3754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:17","nodeType":"VariableDeclaration","scope":3755,"src":"409:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3748,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3751,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:17","nodeType":"VariableDeclaration","scope":3755,"src":"431:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3750,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3753,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:17","nodeType":"VariableDeclaration","scope":3755,"src":"451:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3752,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:17"},"src":"394:82:17"},{"anonymous":false,"documentation":{"id":3756,"nodeType":"StructuredDocumentation","src":"482:94:17","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3764,"name":"Approval","nameLocation":"587:8:17","nodeType":"EventDefinition","parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3758,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:17","nodeType":"VariableDeclaration","scope":3764,"src":"596:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3757,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3760,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:17","nodeType":"VariableDeclaration","scope":3764,"src":"619:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3759,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3762,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:17","nodeType":"VariableDeclaration","scope":3764,"src":"645:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3761,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:17"},"src":"581:89:17"},{"anonymous":false,"documentation":{"id":3765,"nodeType":"StructuredDocumentation","src":"676:117:17","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3773,"name":"ApprovalForAll","nameLocation":"804:14:17","nodeType":"EventDefinition","parameters":{"id":3772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3767,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:17","nodeType":"VariableDeclaration","scope":3773,"src":"819:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3766,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3769,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:17","nodeType":"VariableDeclaration","scope":3773,"src":"842:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3768,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3771,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:17","nodeType":"VariableDeclaration","scope":3773,"src":"868:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3770,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:17"},"src":"798:85:17"},{"documentation":{"id":3774,"nodeType":"StructuredDocumentation","src":"889:76:17","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":3781,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:17","nodeType":"FunctionDefinition","parameters":{"id":3777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3776,"mutability":"mutable","name":"owner","nameLocation":"997:5:17","nodeType":"VariableDeclaration","scope":3781,"src":"989:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3775,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:17"},"returnParameters":{"id":3780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"balance","nameLocation":"1035:7:17","nodeType":"VariableDeclaration","scope":3781,"src":"1027:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:17"},"scope":3856,"src":"970:74:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3782,"nodeType":"StructuredDocumentation","src":"1050:131:17","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":3789,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:17","nodeType":"FunctionDefinition","parameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3784,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:17","nodeType":"VariableDeclaration","scope":3789,"src":"1203:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3783,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:17"},"returnParameters":{"id":3788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"owner","nameLocation":"1251:5:17","nodeType":"VariableDeclaration","scope":3789,"src":"1243:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3786,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:17"},"scope":3856,"src":"1186:72:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3790,"nodeType":"StructuredDocumentation","src":"1264:565:17","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":3801,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:17","nodeType":"FunctionDefinition","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3792,"mutability":"mutable","name":"from","nameLocation":"1868:4:17","nodeType":"VariableDeclaration","scope":3801,"src":"1860:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3791,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3794,"mutability":"mutable","name":"to","nameLocation":"1882:2:17","nodeType":"VariableDeclaration","scope":3801,"src":"1874:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3793,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3796,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:17","nodeType":"VariableDeclaration","scope":3801,"src":"1886:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3798,"mutability":"mutable","name":"data","nameLocation":"1918:4:17","nodeType":"VariableDeclaration","scope":3801,"src":"1903:19:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3797,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:17"},"returnParameters":{"id":3800,"nodeType":"ParameterList","parameters":[],"src":"1932:0:17"},"scope":3856,"src":"1834:99:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3802,"nodeType":"StructuredDocumentation","src":"1939:705:17","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":3811,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:17","nodeType":"FunctionDefinition","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"mutability":"mutable","name":"from","nameLocation":"2683:4:17","nodeType":"VariableDeclaration","scope":3811,"src":"2675:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3803,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3806,"mutability":"mutable","name":"to","nameLocation":"2697:2:17","nodeType":"VariableDeclaration","scope":3811,"src":"2689:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3805,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3808,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:17","nodeType":"VariableDeclaration","scope":3811,"src":"2701:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3807,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:17"},"returnParameters":{"id":3810,"nodeType":"ParameterList","parameters":[],"src":"2726:0:17"},"scope":3856,"src":"2649:78:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3812,"nodeType":"StructuredDocumentation","src":"2733:732:17","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3821,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:17","nodeType":"FunctionDefinition","parameters":{"id":3819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"from","nameLocation":"3500:4:17","nodeType":"VariableDeclaration","scope":3821,"src":"3492:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3813,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3816,"mutability":"mutable","name":"to","nameLocation":"3514:2:17","nodeType":"VariableDeclaration","scope":3821,"src":"3506:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3815,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3818,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:17","nodeType":"VariableDeclaration","scope":3821,"src":"3518:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3817,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:17"},"returnParameters":{"id":3820,"nodeType":"ParameterList","parameters":[],"src":"3543:0:17"},"scope":3856,"src":"3470:74:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3822,"nodeType":"StructuredDocumentation","src":"3550:452:17","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3829,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:17","nodeType":"FunctionDefinition","parameters":{"id":3827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"mutability":"mutable","name":"to","nameLocation":"4032:2:17","nodeType":"VariableDeclaration","scope":3829,"src":"4024:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3823,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3826,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:17","nodeType":"VariableDeclaration","scope":3829,"src":"4036:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:17"},"returnParameters":{"id":3828,"nodeType":"ParameterList","parameters":[],"src":"4061:0:17"},"scope":3856,"src":"4007:55:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3830,"nodeType":"StructuredDocumentation","src":"4068:315:17","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":3837,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:17","nodeType":"FunctionDefinition","parameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3832,"mutability":"mutable","name":"operator","nameLocation":"4423:8:17","nodeType":"VariableDeclaration","scope":3837,"src":"4415:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3831,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3834,"mutability":"mutable","name":"approved","nameLocation":"4438:8:17","nodeType":"VariableDeclaration","scope":3837,"src":"4433:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3833,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:17"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[],"src":"4456:0:17"},"scope":3856,"src":"4388:69:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3838,"nodeType":"StructuredDocumentation","src":"4463:139:17","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":3845,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:17","nodeType":"FunctionDefinition","parameters":{"id":3841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3840,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:17","nodeType":"VariableDeclaration","scope":3845,"src":"4628:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3839,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:17"},"returnParameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3843,"mutability":"mutable","name":"operator","nameLocation":"4676:8:17","nodeType":"VariableDeclaration","scope":3845,"src":"4668:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3842,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:17"},"scope":3856,"src":"4607:79:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3846,"nodeType":"StructuredDocumentation","src":"4692:138:17","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":3855,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:17","nodeType":"FunctionDefinition","parameters":{"id":3851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3848,"mutability":"mutable","name":"owner","nameLocation":"4869:5:17","nodeType":"VariableDeclaration","scope":3855,"src":"4861:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3847,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3850,"mutability":"mutable","name":"operator","nameLocation":"4884:8:17","nodeType":"VariableDeclaration","scope":3855,"src":"4876:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3849,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:17"},"returnParameters":{"id":3854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3855,"src":"4917:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3852,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:17"},"scope":3856,"src":"4835:88:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3857,"src":"266:4659:17","usedErrors":[],"usedEvents":[3755,3764,3773]}],"src":"108:4818:17"},"id":17},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[3874]},"id":3875,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3858,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3859,"nodeType":"StructuredDocumentation","src":"142:152:18","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":3874,"linearizedBaseContracts":[3874],"name":"IERC721Receiver","nameLocation":"305:15:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3860,"nodeType":"StructuredDocumentation","src":"327:500:18","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":3873,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:18","nodeType":"FunctionDefinition","parameters":{"id":3869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"mutability":"mutable","name":"operator","nameLocation":"875:8:18","nodeType":"VariableDeclaration","scope":3873,"src":"867:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3861,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3864,"mutability":"mutable","name":"from","nameLocation":"901:4:18","nodeType":"VariableDeclaration","scope":3873,"src":"893:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3863,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3866,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:18","nodeType":"VariableDeclaration","scope":3873,"src":"915:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3865,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3868,"mutability":"mutable","name":"data","nameLocation":"955:4:18","nodeType":"VariableDeclaration","scope":3873,"src":"940:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3867,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:18"},"returnParameters":{"id":3872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3873,"src":"984:6:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3870,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:18"},"scope":3874,"src":"832:160:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3875,"src":"295:699:18","usedErrors":[],"usedEvents":[]}],"src":"116:879:18"},"id":18},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[3856],"IERC721Metadata":[3902]},"id":3903,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3876,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":3878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3903,"sourceUnit":3857,"src":"153:39:19","symbolAliases":[{"foreign":{"id":3877,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3856,"src":"161:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3880,"name":"IERC721","nameLocations":["357:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3856,"src":"357:7:19"},"id":3881,"nodeType":"InheritanceSpecifier","src":"357:7:19"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":3879,"nodeType":"StructuredDocumentation","src":"194:133:19","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":3902,"linearizedBaseContracts":[3902,3856,4223],"name":"IERC721Metadata","nameLocation":"338:15:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3882,"nodeType":"StructuredDocumentation","src":"371:58:19","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":3887,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:19","nodeType":"FunctionDefinition","parameters":{"id":3883,"nodeType":"ParameterList","parameters":[],"src":"447:2:19"},"returnParameters":{"id":3886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3887,"src":"473:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3884,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:19"},"scope":3902,"src":"434:54:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3888,"nodeType":"StructuredDocumentation","src":"494:60:19","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":3893,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:19","nodeType":"FunctionDefinition","parameters":{"id":3889,"nodeType":"ParameterList","parameters":[],"src":"574:2:19"},"returnParameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3893,"src":"600:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3890,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:19"},"scope":3902,"src":"559:56:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3894,"nodeType":"StructuredDocumentation","src":"621:90:19","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":3901,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:19","nodeType":"FunctionDefinition","parameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:19","nodeType":"VariableDeclaration","scope":3901,"src":"734:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:19"},"returnParameters":{"id":3900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3899,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3901,"src":"774:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3898,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:19"},"scope":3902,"src":"716:73:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3903,"src":"328:463:19","usedErrors":[],"usedEvents":[3755,3764,3773]}],"src":"127:665:19"},"id":19},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3932]},"id":3933,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3904,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:20"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3905,"nodeType":"StructuredDocumentation","src":"127:496:20","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3932,"linearizedBaseContracts":[3932],"name":"Context","nameLocation":"642:7:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":3913,"nodeType":"Block","src":"718:34:20","statements":[{"expression":{"expression":{"id":3910,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"735:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:20","memberName":"sender","nodeType":"MemberAccess","src":"735:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3909,"id":3912,"nodeType":"Return","src":"728:17:20"}]},"id":3914,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:20","nodeType":"FunctionDefinition","parameters":{"id":3906,"nodeType":"ParameterList","parameters":[],"src":"675:2:20"},"returnParameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3914,"src":"709:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3907,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:20"},"scope":3932,"src":"656:96:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3922,"nodeType":"Block","src":"825:32:20","statements":[{"expression":{"expression":{"id":3919,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967281,"src":"842:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:20","memberName":"data","nodeType":"MemberAccess","src":"842:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3918,"id":3921,"nodeType":"Return","src":"835:15:20"}]},"id":3923,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:20","nodeType":"FunctionDefinition","parameters":{"id":3915,"nodeType":"ParameterList","parameters":[],"src":"775:2:20"},"returnParameters":{"id":3918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3917,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3923,"src":"809:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3916,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:20"},"scope":3932,"src":"758:99:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3930,"nodeType":"Block","src":"935:25:20","statements":[{"expression":{"hexValue":"30","id":3928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3927,"id":3929,"nodeType":"Return","src":"945:8:20"}]},"id":3931,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:20","nodeType":"FunctionDefinition","parameters":{"id":3924,"nodeType":"ParameterList","parameters":[],"src":"892:2:20"},"returnParameters":{"id":3927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3931,"src":"926:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3925,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:20"},"scope":3932,"src":"863:97:20","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3933,"src":"624:338:20","usedErrors":[],"usedEvents":[]}],"src":"101:862:20"},"id":20},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[5277],"SignedMath":[5382],"Strings":[4187]},"id":4188,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3934,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:21"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3936,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4188,"sourceUnit":5278,"src":"127:37:21","symbolAliases":[{"foreign":{"id":3935,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5277,"src":"135:4:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4188,"sourceUnit":5383,"src":"165:49:21","symbolAliases":[{"foreign":{"id":3937,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"173:10:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3939,"nodeType":"StructuredDocumentation","src":"216:34:21","text":" @dev String operations."},"fullyImplemented":true,"id":4187,"linearizedBaseContracts":[4187],"name":"Strings","nameLocation":"259:7:21","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3942,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:21","nodeType":"VariableDeclaration","scope":4187,"src":"273:56:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3940,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3945,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:21","nodeType":"VariableDeclaration","scope":4187,"src":"335:42:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3943,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":3946,"nodeType":"StructuredDocumentation","src":"384:81:21","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":3952,"name":"StringsInsufficientHexLength","nameLocation":"476:28:21","nodeType":"ErrorDefinition","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3948,"mutability":"mutable","name":"value","nameLocation":"513:5:21","nodeType":"VariableDeclaration","scope":3952,"src":"505:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3950,"mutability":"mutable","name":"length","nameLocation":"528:6:21","nodeType":"VariableDeclaration","scope":3952,"src":"520:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:21"},"src":"470:66:21"},{"body":{"id":3999,"nodeType":"Block","src":"708:627:21","statements":[{"id":3998,"nodeType":"UncheckedBlock","src":"718:611:21","statements":[{"assignments":[3961],"declarations":[{"constant":false,"id":3961,"mutability":"mutable","name":"length","nameLocation":"750:6:21","nodeType":"VariableDeclaration","scope":3998,"src":"742:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3960,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3968,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3964,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"770:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3962,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5277,"src":"759:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5277_$","typeString":"type(library Math)"}},"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:21","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":5097,"src":"759:10:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:21"},{"assignments":[3970],"declarations":[{"constant":false,"id":3970,"mutability":"mutable","name":"buffer","nameLocation":"808:6:21","nodeType":"VariableDeclaration","scope":3998,"src":"794:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3969,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3975,"initialValue":{"arguments":[{"id":3973,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"828:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3972,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3971,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:21"},{"assignments":[3977],"declarations":[{"constant":false,"id":3977,"mutability":"mutable","name":"ptr","nameLocation":"857:3:21","nodeType":"VariableDeclaration","scope":3998,"src":"849:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3976,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3978,"nodeType":"VariableDeclarationStatement","src":"849:11:21"},{"AST":{"nodeType":"YulBlock","src":"930:67:21","statements":[{"nodeType":"YulAssignment","src":"948:35:21","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:21","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:21"},"nodeType":"YulFunctionCall","src":"967:15:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:21"},"nodeType":"YulFunctionCall","src":"955:28:21"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:21"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3970,"isOffset":false,"isSlot":false,"src":"959:6:21","valueSize":1},{"declaration":3961,"isOffset":false,"isSlot":false,"src":"975:6:21","valueSize":1},{"declaration":3977,"isOffset":false,"isSlot":false,"src":"948:3:21","valueSize":1}],"id":3979,"nodeType":"InlineAssembly","src":"921:76:21"},{"body":{"id":3994,"nodeType":"Block","src":"1023:269:21","statements":[{"expression":{"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:21","subExpression":{"id":3981,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3977,"src":"1041:3:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3983,"nodeType":"ExpressionStatement","src":"1041:5:21"},{"AST":{"nodeType":"YulBlock","src":"1124:86:21","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:21","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:21"},"nodeType":"YulFunctionCall","src":"1164:14:21"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:21"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:21"},"nodeType":"YulFunctionCall","src":"1159:32:21"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:21"},"nodeType":"YulFunctionCall","src":"1146:46:21"},"nodeType":"YulExpressionStatement","src":"1146:46:21"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3942,"isOffset":false,"isSlot":false,"src":"1180:10:21","valueSize":1},{"declaration":3977,"isOffset":false,"isSlot":false,"src":"1154:3:21","valueSize":1},{"declaration":3955,"isOffset":false,"isSlot":false,"src":"1168:5:21","valueSize":1}],"id":3984,"nodeType":"InlineAssembly","src":"1115:95:21"},{"expression":{"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"1227:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3988,"nodeType":"ExpressionStatement","src":"1227:11:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3955,"src":"1260:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3993,"nodeType":"IfStatement","src":"1256:21:21","trueBody":{"id":3992,"nodeType":"Break","src":"1272:5:21"}}]},"condition":{"hexValue":"74727565","id":3980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3995,"nodeType":"WhileStatement","src":"1010:282:21"},{"expression":{"id":3996,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"1312:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3959,"id":3997,"nodeType":"Return","src":"1305:13:21"}]}]},"documentation":{"id":3953,"nodeType":"StructuredDocumentation","src":"542:90:21","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":4000,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:21","nodeType":"FunctionDefinition","parameters":{"id":3956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3955,"mutability":"mutable","name":"value","nameLocation":"663:5:21","nodeType":"VariableDeclaration","scope":4000,"src":"655:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3954,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:21"},"returnParameters":{"id":3959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4000,"src":"693:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3957,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:21"},"scope":4187,"src":"637:698:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4025,"nodeType":"Block","src":"1511:92:21","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"1542:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":4012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:21","trueExpression":{"hexValue":"2d","id":4014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":4020,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"1588:5:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":4018,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5382,"src":"1573:10:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$5382_$","typeString":"type(library SignedMath)"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:21","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":5381,"src":"1573:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4017,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"1564:8:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4008,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:21","typeDescriptions":{}}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:21","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:21","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4007,"id":4024,"nodeType":"Return","src":"1521:75:21"}]},"documentation":{"id":4001,"nodeType":"StructuredDocumentation","src":"1341:89:21","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:21","nodeType":"FunctionDefinition","parameters":{"id":4004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4003,"mutability":"mutable","name":"value","nameLocation":"1466:5:21","nodeType":"VariableDeclaration","scope":4026,"src":"1459:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4002,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:21"},"returnParameters":{"id":4007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4026,"src":"1496:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4005,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:21"},"scope":4187,"src":"1435:168:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4045,"nodeType":"Block","src":"1782:100:21","statements":[{"id":4044,"nodeType":"UncheckedBlock","src":"1792:84:21","statements":[{"expression":{"arguments":[{"id":4035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1835:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4038,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4029,"src":"1854:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4036,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5277,"src":"1842:4:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$5277_$","typeString":"type(library Math)"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:21","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":5219,"src":"1842:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4034,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[4046,4129,4149],"referencedDeclaration":4129,"src":"1823:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4033,"id":4043,"nodeType":"Return","src":"1816:49:21"}]}]},"documentation":{"id":4027,"nodeType":"StructuredDocumentation","src":"1609:94:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":4046,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:21","nodeType":"FunctionDefinition","parameters":{"id":4030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4029,"mutability":"mutable","name":"value","nameLocation":"1737:5:21","nodeType":"VariableDeclaration","scope":4046,"src":"1729:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4028,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:21"},"returnParameters":{"id":4033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4046,"src":"1767:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4031,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:21"},"scope":4187,"src":"1708:174:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4128,"nodeType":"Block","src":"2095:435:21","statements":[{"assignments":[4057],"declarations":[{"constant":false,"id":4057,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:21","nodeType":"VariableDeclaration","scope":4128,"src":"2105:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4056,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4059,"initialValue":{"id":4058,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2126:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:21"},{"assignments":[4061],"declarations":[{"constant":false,"id":4061,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:21","nodeType":"VariableDeclaration","scope":4128,"src":"2141:19:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4060,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4070,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4065,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"2177:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:21","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4062,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:21"},{"expression":{"id":4075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4071,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2198:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4073,"indexExpression":{"hexValue":"30","id":4072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4076,"nodeType":"ExpressionStatement","src":"2198:15:21"},{"expression":{"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4077,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2223:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4079,"indexExpression":{"hexValue":"31","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":4080,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:21","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4082,"nodeType":"ExpressionStatement","src":"2223:15:21"},{"body":{"id":4111,"nodeType":"Block","src":"2293:95:21","statements":[{"expression":{"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4097,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2307:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4099,"indexExpression":{"id":4098,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"2314:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4100,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"2319:10:21","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":4104,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4101,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2330:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":4102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:21","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:21","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4106,"nodeType":"ExpressionStatement","src":"2307:40:21"},{"expression":{"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4107,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2361:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4110,"nodeType":"ExpressionStatement","src":"2361:16:21"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4091,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"2281:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":4092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4112,"initializationExpression":{"assignments":[4084],"declarations":[{"constant":false,"id":4084,"mutability":"mutable","name":"i","nameLocation":"2261:1:21","nodeType":"VariableDeclaration","scope":4112,"src":"2253:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4083,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4090,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4086,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"2269:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:21"},"loopExpression":{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:21","subExpression":{"id":4094,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"2290:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4096,"nodeType":"ExpressionStatement","src":"2288:3:21"},"nodeType":"ForStatement","src":"2248:140:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4113,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4057,"src":"2401:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4122,"nodeType":"IfStatement","src":"2397:96:21","trueBody":{"id":4121,"nodeType":"Block","src":"2418:75:21","statements":[{"errorCall":{"arguments":[{"id":4117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2468:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4118,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"2475:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4116,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"2439:28:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4120,"nodeType":"RevertStatement","src":"2432:50:21"}]}},{"expression":{"arguments":[{"id":4125,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2516:6:21","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4123,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:21","typeDescriptions":{}}},"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4055,"id":4127,"nodeType":"Return","src":"2502:21:21"}]},"documentation":{"id":4047,"nodeType":"StructuredDocumentation","src":"1888:112:21","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":4129,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:21","nodeType":"FunctionDefinition","parameters":{"id":4052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"mutability":"mutable","name":"value","nameLocation":"2034:5:21","nodeType":"VariableDeclaration","scope":4129,"src":"2026:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4048,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4051,"mutability":"mutable","name":"length","nameLocation":"2049:6:21","nodeType":"VariableDeclaration","scope":4129,"src":"2041:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4050,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:21"},"returnParameters":{"id":4055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4054,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4129,"src":"2080:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4053,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:21"},"scope":4187,"src":"2005:525:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4148,"nodeType":"Block","src":"2762:75:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4142,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4132,"src":"2807:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4141,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4140,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:21","typeDescriptions":{}}},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4138,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:21","typeDescriptions":{}}},"id":4144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4145,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"2815:14:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4137,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[4046,4129,4149],"referencedDeclaration":4129,"src":"2779:11:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4136,"id":4147,"nodeType":"Return","src":"2772:58:21"}]},"documentation":{"id":4130,"nodeType":"StructuredDocumentation","src":"2536:148:21","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":4149,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:21","nodeType":"FunctionDefinition","parameters":{"id":4133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4132,"mutability":"mutable","name":"addr","nameLocation":"2718:4:21","nodeType":"VariableDeclaration","scope":4149,"src":"2710:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4131,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:21"},"returnParameters":{"id":4136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4135,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4149,"src":"2747:13:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4134,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:21"},"scope":4187,"src":"2689:148:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4185,"nodeType":"Block","src":"2992:104:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4161,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"3015:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4159,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:21","typeDescriptions":{}}},"id":4162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:21","memberName":"length","nodeType":"MemberAccess","src":"3009:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4166,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3034:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4164,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:21","typeDescriptions":{}}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:21","memberName":"length","nodeType":"MemberAccess","src":"3028:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4173,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4152,"src":"3063:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4171,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:21","typeDescriptions":{}}},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4170,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3047:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":4179,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4154,"src":"3086:1:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4177,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:21","typeDescriptions":{}}},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967288,"src":"3070:9:21","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4158,"id":4184,"nodeType":"Return","src":"3002:87:21"}]},"documentation":{"id":4150,"nodeType":"StructuredDocumentation","src":"2843:66:21","text":" @dev Returns true if the two strings are equal."},"id":4186,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:21","nodeType":"FunctionDefinition","parameters":{"id":4155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4152,"mutability":"mutable","name":"a","nameLocation":"2943:1:21","nodeType":"VariableDeclaration","scope":4186,"src":"2929:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4151,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4154,"mutability":"mutable","name":"b","nameLocation":"2960:1:21","nodeType":"VariableDeclaration","scope":4186,"src":"2946:15:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4153,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:21"},"returnParameters":{"id":4158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4186,"src":"2986:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4156,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:21"},"scope":4187,"src":"2914:182:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4188,"src":"251:2847:21","usedErrors":[3952],"usedEvents":[]}],"src":"101:2998:21"},"id":21},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[4211],"IERC165":[4223]},"id":4212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4189,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:22"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":4191,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4212,"sourceUnit":4224,"src":"140:38:22","symbolAliases":[{"foreign":{"id":4190,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"148:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4193,"name":"IERC165","nameLocations":["687:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":4223,"src":"687:7:22"},"id":4194,"nodeType":"InheritanceSpecifier","src":"687:7:22"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"180:478:22","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":4211,"linearizedBaseContracts":[4211,4223],"name":"ERC165","nameLocation":"677:6:22","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[4222],"body":{"id":4209,"nodeType":"Block","src":"844:64:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4202,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"861:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":4204,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"881:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$4223_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$4223_$","typeString":"type(contract IERC165)"}],"id":4203,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967269,"src":"876:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":4205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$4223","typeString":"type(contract IERC165)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4201,"id":4208,"nodeType":"Return","src":"854:47:22"}]},"documentation":{"id":4195,"nodeType":"StructuredDocumentation","src":"701:56:22","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":4210,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:22","nodeType":"FunctionDefinition","parameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4197,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:22","nodeType":"VariableDeclaration","scope":4210,"src":"789:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4196,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:22"},"returnParameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4210,"src":"838:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4199,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:22"},"scope":4211,"src":"762:146:22","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":4212,"src":"659:251:22","usedErrors":[],"usedEvents":[]}],"src":"114:797:22"},"id":22},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[4223]},"id":4224,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4213,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":4214,"nodeType":"StructuredDocumentation","src":"141:279:23","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":4223,"linearizedBaseContracts":[4223],"name":"IERC165","nameLocation":"431:7:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4215,"nodeType":"StructuredDocumentation","src":"445:340:23","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":4222,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:23","nodeType":"FunctionDefinition","parameters":{"id":4218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4217,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:23","nodeType":"VariableDeclaration","scope":4222,"src":"817:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4216,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:23","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:23"},"returnParameters":{"id":4221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4222,"src":"860:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4219,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:23"},"scope":4223,"src":"790:76:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4224,"src":"421:447:23","usedErrors":[],"usedEvents":[]}],"src":"115:754:23"},"id":23},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[5277]},"id":5278,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4225,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":4226,"nodeType":"StructuredDocumentation","src":"129:73:24","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5277,"linearizedBaseContracts":[5277],"name":"Math","nameLocation":"211:4:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4227,"nodeType":"StructuredDocumentation","src":"222:50:24","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":4229,"name":"MathOverflowedMulDiv","nameLocation":"283:20:24","nodeType":"ErrorDefinition","parameters":{"id":4228,"nodeType":"ParameterList","parameters":[],"src":"303:2:24"},"src":"277:29:24"},{"canonicalName":"Math.Rounding","id":4234,"members":[{"id":4230,"name":"Floor","nameLocation":"336:5:24","nodeType":"EnumValue","src":"336:5:24"},{"id":4231,"name":"Ceil","nameLocation":"379:4:24","nodeType":"EnumValue","src":"379:4:24"},{"id":4232,"name":"Trunc","nameLocation":"421:5:24","nodeType":"EnumValue","src":"421:5:24"},{"id":4233,"name":"Expand","nameLocation":"451:6:24","nodeType":"EnumValue","src":"451:6:24"}],"name":"Rounding","nameLocation":"317:8:24","nodeType":"EnumDefinition","src":"312:169:24"},{"body":{"id":4265,"nodeType":"Block","src":"661:140:24","statements":[{"id":4264,"nodeType":"UncheckedBlock","src":"671:124:24","statements":[{"assignments":[4247],"declarations":[{"constant":false,"id":4247,"mutability":"mutable","name":"c","nameLocation":"703:1:24","nodeType":"VariableDeclaration","scope":4264,"src":"695:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4246,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4251,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4248,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"707:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4249,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"711:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4252,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"730:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4253,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"734:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4259,"nodeType":"IfStatement","src":"726:28:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4257,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4245,"id":4258,"nodeType":"Return","src":"737:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4261,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4247,"src":"782:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4245,"id":4263,"nodeType":"Return","src":"768:16:24"}]}]},"documentation":{"id":4235,"nodeType":"StructuredDocumentation","src":"487:93:24","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":4266,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:24","nodeType":"FunctionDefinition","parameters":{"id":4240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"a","nameLocation":"609:1:24","nodeType":"VariableDeclaration","scope":4266,"src":"601:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4236,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4239,"mutability":"mutable","name":"b","nameLocation":"620:1:24","nodeType":"VariableDeclaration","scope":4266,"src":"612:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4238,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:24"},"returnParameters":{"id":4245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"646:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4241,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4266,"src":"652:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:24"},"scope":5277,"src":"585:216:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4293,"nodeType":"Block","src":"984:113:24","statements":[{"id":4292,"nodeType":"UncheckedBlock","src":"994:97:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4278,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"1022:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4279,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"1026:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4285,"nodeType":"IfStatement","src":"1018:28:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4277,"id":4284,"nodeType":"Return","src":"1029:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4287,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"1074:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4288,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4271,"src":"1078:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4277,"id":4291,"nodeType":"Return","src":"1060:20:24"}]}]},"documentation":{"id":4267,"nodeType":"StructuredDocumentation","src":"807:96:24","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":4294,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:24","nodeType":"FunctionDefinition","parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4269,"mutability":"mutable","name":"a","nameLocation":"932:1:24","nodeType":"VariableDeclaration","scope":4294,"src":"924:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4271,"mutability":"mutable","name":"b","nameLocation":"943:1:24","nodeType":"VariableDeclaration","scope":4294,"src":"935:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4270,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:24"},"returnParameters":{"id":4277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4294,"src":"969:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4273,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4294,"src":"975:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4275,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:24"},"scope":5277,"src":"908:189:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4335,"nodeType":"Block","src":"1283:417:24","statements":[{"id":4334,"nodeType":"UncheckedBlock","src":"1293:401:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4306,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"1551:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4313,"nodeType":"IfStatement","src":"1547:28:24","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":4310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4311,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4305,"id":4312,"nodeType":"Return","src":"1559:16:24"}},{"assignments":[4315],"declarations":[{"constant":false,"id":4315,"mutability":"mutable","name":"c","nameLocation":"1597:1:24","nodeType":"VariableDeclaration","scope":4334,"src":"1589:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4314,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4319,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4316,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"1601:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4317,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"1605:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4320,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4315,"src":"1624:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4321,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"1628:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4323,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"1633:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4329,"nodeType":"IfStatement","src":"1620:33:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4327,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4305,"id":4328,"nodeType":"Return","src":"1636:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4331,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4315,"src":"1681:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4332,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4305,"id":4333,"nodeType":"Return","src":"1667:16:24"}]}]},"documentation":{"id":4295,"nodeType":"StructuredDocumentation","src":"1103:99:24","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":4336,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:24","nodeType":"FunctionDefinition","parameters":{"id":4300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4297,"mutability":"mutable","name":"a","nameLocation":"1231:1:24","nodeType":"VariableDeclaration","scope":4336,"src":"1223:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4299,"mutability":"mutable","name":"b","nameLocation":"1242:1:24","nodeType":"VariableDeclaration","scope":4336,"src":"1234:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4298,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:24"},"returnParameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4336,"src":"1268:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4301,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4336,"src":"1274:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:24"},"scope":5277,"src":"1207:493:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4363,"nodeType":"Block","src":"1887:114:24","statements":[{"id":4362,"nodeType":"UncheckedBlock","src":"1897:98:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"1925:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4355,"nodeType":"IfStatement","src":"1921:29:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4353,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4347,"id":4354,"nodeType":"Return","src":"1933:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4357,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"1978:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4358,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"1982:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4360,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4347,"id":4361,"nodeType":"Return","src":"1964:20:24"}]}]},"documentation":{"id":4337,"nodeType":"StructuredDocumentation","src":"1706:100:24","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":4364,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:24","nodeType":"FunctionDefinition","parameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"a","nameLocation":"1835:1:24","nodeType":"VariableDeclaration","scope":4364,"src":"1827:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4338,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4341,"mutability":"mutable","name":"b","nameLocation":"1846:1:24","nodeType":"VariableDeclaration","scope":4364,"src":"1838:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4340,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:24"},"returnParameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4364,"src":"1872:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4343,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4364,"src":"1878:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4345,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:24"},"scope":5277,"src":"1811:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4391,"nodeType":"Block","src":"2198:114:24","statements":[{"id":4390,"nodeType":"UncheckedBlock","src":"2208:98:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4376,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2236:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4383,"nodeType":"IfStatement","src":"2232:29:24","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":4379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":4380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4381,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":4375,"id":4382,"nodeType":"Return","src":"2244:17:24"}},{"expression":{"components":[{"hexValue":"74727565","id":4384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4385,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2289:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4386,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2293:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4388,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:24","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":4375,"id":4389,"nodeType":"Return","src":"2275:20:24"}]}]},"documentation":{"id":4365,"nodeType":"StructuredDocumentation","src":"2007:110:24","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":4392,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:24","nodeType":"FunctionDefinition","parameters":{"id":4370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4367,"mutability":"mutable","name":"a","nameLocation":"2146:1:24","nodeType":"VariableDeclaration","scope":4392,"src":"2138:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4366,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4369,"mutability":"mutable","name":"b","nameLocation":"2157:1:24","nodeType":"VariableDeclaration","scope":4392,"src":"2149:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4368,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:24"},"returnParameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4392,"src":"2183:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4371,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4392,"src":"2189:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4373,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:24"},"scope":5277,"src":"2122:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4409,"nodeType":"Block","src":"2449:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4402,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2466:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4403,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"2470:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4406,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"2478:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:24","trueExpression":{"id":4405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4395,"src":"2474:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4401,"id":4408,"nodeType":"Return","src":"2459:20:24"}]},"documentation":{"id":4393,"nodeType":"StructuredDocumentation","src":"2318:59:24","text":" @dev Returns the largest of two numbers."},"id":4410,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:24","nodeType":"FunctionDefinition","parameters":{"id":4398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4395,"mutability":"mutable","name":"a","nameLocation":"2403:1:24","nodeType":"VariableDeclaration","scope":4410,"src":"2395:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4394,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4397,"mutability":"mutable","name":"b","nameLocation":"2414:1:24","nodeType":"VariableDeclaration","scope":4410,"src":"2406:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4396,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:24"},"returnParameters":{"id":4401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4410,"src":"2440:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4399,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:24"},"scope":5277,"src":"2382:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4427,"nodeType":"Block","src":"2624:37:24","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4420,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"2641:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4421,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"2645:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4424,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4415,"src":"2653:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:24","trueExpression":{"id":4423,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4413,"src":"2649:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4419,"id":4426,"nodeType":"Return","src":"2634:20:24"}]},"documentation":{"id":4411,"nodeType":"StructuredDocumentation","src":"2492:60:24","text":" @dev Returns the smallest of two numbers."},"id":4428,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:24","nodeType":"FunctionDefinition","parameters":{"id":4416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4413,"mutability":"mutable","name":"a","nameLocation":"2578:1:24","nodeType":"VariableDeclaration","scope":4428,"src":"2570:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4412,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4415,"mutability":"mutable","name":"b","nameLocation":"2589:1:24","nodeType":"VariableDeclaration","scope":4428,"src":"2581:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4414,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:24"},"returnParameters":{"id":4419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4428,"src":"2615:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4417,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:24"},"scope":5277,"src":"2557:104:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4450,"nodeType":"Block","src":"2845:82:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4438,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"2900:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4439,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"2904:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4442,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4431,"src":"2910:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4443,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"2914:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4445,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":4446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4437,"id":4449,"nodeType":"Return","src":"2892:28:24"}]},"documentation":{"id":4429,"nodeType":"StructuredDocumentation","src":"2667:102:24","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":4451,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:24","nodeType":"FunctionDefinition","parameters":{"id":4434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4431,"mutability":"mutable","name":"a","nameLocation":"2799:1:24","nodeType":"VariableDeclaration","scope":4451,"src":"2791:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4430,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4433,"mutability":"mutable","name":"b","nameLocation":"2810:1:24","nodeType":"VariableDeclaration","scope":4451,"src":"2802:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:24"},"returnParameters":{"id":4437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4451,"src":"2836:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4435,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:24"},"scope":5277,"src":"2774:153:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4484,"nodeType":"Block","src":"3219:260:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4461,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"3233:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4469,"nodeType":"IfStatement","src":"3229:127:24","trueBody":{"id":4468,"nodeType":"Block","src":"3241:115:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4464,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"3340:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4465,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"3344:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4460,"id":4467,"nodeType":"Return","src":"3333:12:24"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4470,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"3444:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4474,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4454,"src":"3458:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":4475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4478,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4456,"src":"3467:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:24","trueExpression":{"hexValue":"30","id":4473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4460,"id":4483,"nodeType":"Return","src":"3437:35:24"}]},"documentation":{"id":4452,"nodeType":"StructuredDocumentation","src":"2933:210:24","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":4485,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:24","nodeType":"FunctionDefinition","parameters":{"id":4457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4454,"mutability":"mutable","name":"a","nameLocation":"3173:1:24","nodeType":"VariableDeclaration","scope":4485,"src":"3165:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4453,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4456,"mutability":"mutable","name":"b","nameLocation":"3184:1:24","nodeType":"VariableDeclaration","scope":4485,"src":"3176:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4455,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:24"},"returnParameters":{"id":4460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4485,"src":"3210:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4458,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:24"},"scope":5277,"src":"3148:331:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4610,"nodeType":"Block","src":"3901:4018:24","statements":[{"id":4609,"nodeType":"UncheckedBlock","src":"3911:4002:24","statements":[{"assignments":[4498],"declarations":[{"constant":false,"id":4498,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:24","nodeType":"VariableDeclaration","scope":4609,"src":"4232:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4497,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4502,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4499,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"4248:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4500,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4490,"src":"4252:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:24"},{"assignments":[4504],"declarations":[{"constant":false,"id":4504,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:24","nodeType":"VariableDeclaration","scope":4609,"src":"4312:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4503,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4505,"nodeType":"VariableDeclarationStatement","src":"4312:13:24"},{"AST":{"nodeType":"YulBlock","src":"4392:122:24","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:24"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:24","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:24"},"nodeType":"YulFunctionCall","src":"4433:6:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:24"},"nodeType":"YulFunctionCall","src":"4420:20:24"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:24","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:24","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:24"},"nodeType":"YulFunctionCall","src":"4470:14:24"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:24"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:24"},"nodeType":"YulFunctionCall","src":"4486:13:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:24"},"nodeType":"YulFunctionCall","src":"4466:34:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4498,"isOffset":false,"isSlot":false,"src":"4478:5:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"4493:5:24","valueSize":1},{"declaration":4504,"isOffset":false,"isSlot":false,"src":"4457:5:24","valueSize":1},{"declaration":4488,"isOffset":false,"isSlot":false,"src":"4427:1:24","valueSize":1},{"declaration":4490,"isOffset":false,"isSlot":false,"src":"4430:1:24","valueSize":1}],"id":4506,"nodeType":"InlineAssembly","src":"4383:131:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4507,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"4595:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4515,"nodeType":"IfStatement","src":"4591:368:24","trueBody":{"id":4514,"nodeType":"Block","src":"4607:352:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4510,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"4925:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4511,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"4933:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4496,"id":4513,"nodeType":"Return","src":"4918:26:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4516,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"5065:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":4517,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"5080:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4523,"nodeType":"IfStatement","src":"5061:88:24","trueBody":{"id":4522,"nodeType":"Block","src":"5087:62:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4519,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4229,"src":"5112:20:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4521,"nodeType":"RevertStatement","src":"5105:29:24"}]}},{"assignments":[4525],"declarations":[{"constant":false,"id":4525,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:24","nodeType":"VariableDeclaration","scope":4609,"src":"5404:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4524,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4526,"nodeType":"VariableDeclarationStatement","src":"5404:17:24"},{"AST":{"nodeType":"YulBlock","src":"5444:291:24","statements":[{"nodeType":"YulAssignment","src":"5513:38:24","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:24"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:24"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:24"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:24"},"nodeType":"YulFunctionCall","src":"5526:25:24"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:24"}]},{"nodeType":"YulAssignment","src":"5633:41:24","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:24"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:24"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:24"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:24"},"nodeType":"YulFunctionCall","src":"5653:20:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:24"},"nodeType":"YulFunctionCall","src":"5642:32:24"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:24"}]},{"nodeType":"YulAssignment","src":"5691:30:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:24"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:24"},"nodeType":"YulFunctionCall","src":"5700:21:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4492,"isOffset":false,"isSlot":false,"src":"5539:11:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"5667:5:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"5691:5:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"5704:5:24","valueSize":1},{"declaration":4504,"isOffset":false,"isSlot":false,"src":"5633:5:24","valueSize":1},{"declaration":4504,"isOffset":false,"isSlot":false,"src":"5646:5:24","valueSize":1},{"declaration":4525,"isOffset":false,"isSlot":false,"src":"5513:9:24","valueSize":1},{"declaration":4525,"isOffset":false,"isSlot":false,"src":"5656:9:24","valueSize":1},{"declaration":4525,"isOffset":false,"isSlot":false,"src":"5711:9:24","valueSize":1},{"declaration":4488,"isOffset":false,"isSlot":false,"src":"5533:1:24","valueSize":1},{"declaration":4490,"isOffset":false,"isSlot":false,"src":"5536:1:24","valueSize":1}],"id":4527,"nodeType":"InlineAssembly","src":"5435:300:24"},{"assignments":[4529],"declarations":[{"constant":false,"id":4529,"mutability":"mutable","name":"twos","nameLocation":"5947:4:24","nodeType":"VariableDeclaration","scope":4609,"src":"5939:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4528,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4536,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4530,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"5954:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":4531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4532,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"5973:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:24"},{"AST":{"nodeType":"YulBlock","src":"6008:362:24","statements":[{"nodeType":"YulAssignment","src":"6073:37:24","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:24"},"nodeType":"YulFunctionCall","src":"6088:22:24"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:24"}]},{"nodeType":"YulAssignment","src":"6177:25:24","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:24"},"nodeType":"YulFunctionCall","src":"6186:16:24"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:24"}]},{"nodeType":"YulAssignment","src":"6317:39:24","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:24","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:24"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:24"},"nodeType":"YulFunctionCall","src":"6333:12:24"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:24"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:24"},"nodeType":"YulFunctionCall","src":"6329:23:24"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:24","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:24"},"nodeType":"YulFunctionCall","src":"6325:31:24"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4492,"isOffset":false,"isSlot":false,"src":"6073:11:24","valueSize":1},{"declaration":4492,"isOffset":false,"isSlot":false,"src":"6092:11:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"6177:5:24","valueSize":1},{"declaration":4498,"isOffset":false,"isSlot":false,"src":"6190:5:24","valueSize":1},{"declaration":4529,"isOffset":false,"isSlot":false,"src":"6105:4:24","valueSize":1},{"declaration":4529,"isOffset":false,"isSlot":false,"src":"6197:4:24","valueSize":1},{"declaration":4529,"isOffset":false,"isSlot":false,"src":"6317:4:24","valueSize":1},{"declaration":4529,"isOffset":false,"isSlot":false,"src":"6340:4:24","valueSize":1},{"declaration":4529,"isOffset":false,"isSlot":false,"src":"6347:4:24","valueSize":1}],"id":4537,"nodeType":"InlineAssembly","src":"5999:371:24"},{"expression":{"id":4542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4538,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"6436:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4539,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4504,"src":"6445:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4540,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4529,"src":"6453:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4543,"nodeType":"ExpressionStatement","src":"6436:21:24"},{"assignments":[4545],"declarations":[{"constant":false,"id":4545,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:24","nodeType":"VariableDeclaration","scope":4609,"src":"6775:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4544,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4552,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4547,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"6798:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4549,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":4550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:24"},{"expression":{"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4553,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7031:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4555,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7046:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4556,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7060:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4560,"nodeType":"ExpressionStatement","src":"7031:36:24"},{"expression":{"id":4567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4561,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7100:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4563,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7115:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4564,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7129:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4568,"nodeType":"ExpressionStatement","src":"7100:36:24"},{"expression":{"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4569,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7170:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4571,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7185:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4572,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7199:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4576,"nodeType":"ExpressionStatement","src":"7170:36:24"},{"expression":{"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4577,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7240:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4579,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7255:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4580,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7269:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4584,"nodeType":"ExpressionStatement","src":"7240:36:24"},{"expression":{"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4585,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7310:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4587,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7325:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4588,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7339:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4592,"nodeType":"ExpressionStatement","src":"7310:36:24"},{"expression":{"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4593,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7381:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4595,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4492,"src":"7396:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4596,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7410:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4600,"nodeType":"ExpressionStatement","src":"7381:36:24"},{"expression":{"id":4605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"7851:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4602,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4498,"src":"7860:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4603,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4545,"src":"7868:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4606,"nodeType":"ExpressionStatement","src":"7851:24:24"},{"expression":{"id":4607,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4495,"src":"7896:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4496,"id":4608,"nodeType":"Return","src":"7889:13:24"}]}]},"documentation":{"id":4486,"nodeType":"StructuredDocumentation","src":"3485:313:24","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":4611,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:24","nodeType":"FunctionDefinition","parameters":{"id":4493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4488,"mutability":"mutable","name":"x","nameLocation":"3827:1:24","nodeType":"VariableDeclaration","scope":4611,"src":"3819:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4487,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4490,"mutability":"mutable","name":"y","nameLocation":"3838:1:24","nodeType":"VariableDeclaration","scope":4611,"src":"3830:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4492,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:24","nodeType":"VariableDeclaration","scope":4611,"src":"3841:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4491,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:24"},"returnParameters":{"id":4496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4495,"mutability":"mutable","name":"result","nameLocation":"3893:6:24","nodeType":"VariableDeclaration","scope":4611,"src":"3885:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4494,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:24"},"scope":5277,"src":"3803:4116:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4653,"nodeType":"Block","src":"8161:192:24","statements":[{"assignments":[4627],"declarations":[{"constant":false,"id":4627,"mutability":"mutable","name":"result","nameLocation":"8179:6:24","nodeType":"VariableDeclaration","scope":4653,"src":"8171:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4626,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4633,"initialValue":{"arguments":[{"id":4629,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"8195:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4630,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"8198:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4631,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"8201:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4628,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4611,4654],"referencedDeclaration":4611,"src":"8188:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4635,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"8244:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":4634,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"8227:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4234_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4638,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4614,"src":"8264:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4639,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"8267:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4640,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4618,"src":"8270:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4637,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4294967280,"src":"8257:6:24","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4650,"nodeType":"IfStatement","src":"8223:101:24","trueBody":{"id":4649,"nodeType":"Block","src":"8288:36:24","statements":[{"expression":{"id":4647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"8302:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4648,"nodeType":"ExpressionStatement","src":"8302:11:24"}]}},{"expression":{"id":4651,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4627,"src":"8340:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4625,"id":4652,"nodeType":"Return","src":"8333:13:24"}]},"documentation":{"id":4612,"nodeType":"StructuredDocumentation","src":"7925:121:24","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4654,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:24","nodeType":"FunctionDefinition","parameters":{"id":4622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4614,"mutability":"mutable","name":"x","nameLocation":"8075:1:24","nodeType":"VariableDeclaration","scope":4654,"src":"8067:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4613,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4616,"mutability":"mutable","name":"y","nameLocation":"8086:1:24","nodeType":"VariableDeclaration","scope":4654,"src":"8078:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4615,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4618,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:24","nodeType":"VariableDeclaration","scope":4654,"src":"8089:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4617,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4621,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:24","nodeType":"VariableDeclaration","scope":4654,"src":"8110:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":4620,"nodeType":"UserDefinedTypeName","pathNode":{"id":4619,"name":"Rounding","nameLocations":["8110:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"8110:8:24"},"referencedDeclaration":4234,"src":"8110:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:24"},"returnParameters":{"id":4625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4624,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4654,"src":"8152:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4623,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:24"},"scope":5277,"src":"8051:302:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4765,"nodeType":"Block","src":"8644:1585:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4662,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"8658:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4668,"nodeType":"IfStatement","src":"8654:45:24","trueBody":{"id":4667,"nodeType":"Block","src":"8666:33:24","statements":[{"expression":{"hexValue":"30","id":4665,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4661,"id":4666,"nodeType":"Return","src":"8680:8:24"}]}},{"assignments":[4670],"declarations":[{"constant":false,"id":4670,"mutability":"mutable","name":"result","nameLocation":"9386:6:24","nodeType":"VariableDeclaration","scope":4765,"src":"9378:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4669,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4679,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4673,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"9406:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4672,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4933,4968],"referencedDeclaration":4933,"src":"9401:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:24"},{"id":4764,"nodeType":"UncheckedBlock","src":"9815:408:24","statements":[{"expression":{"id":4689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9839:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9849:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4682,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"9858:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4683,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9862:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4686,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4690,"nodeType":"ExpressionStatement","src":"9839:35:24"},{"expression":{"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9888:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4692,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9898:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4693,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"9907:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9911:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4697,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4701,"nodeType":"ExpressionStatement","src":"9888:35:24"},{"expression":{"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4702,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9937:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4703,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9947:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4704,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"9956:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9960:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4708,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4712,"nodeType":"ExpressionStatement","src":"9937:35:24"},{"expression":{"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4713,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9986:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4714,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"9996:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4715,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10005:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10009:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4719,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4723,"nodeType":"ExpressionStatement","src":"9986:35:24"},{"expression":{"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4724,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10035:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4725,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10045:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4726,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10054:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10058:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4734,"nodeType":"ExpressionStatement","src":"10035:35:24"},{"expression":{"id":4744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4735,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10084:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4736,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10094:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10103:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10107:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4745,"nodeType":"ExpressionStatement","src":"10084:35:24"},{"expression":{"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4746,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10133:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4747,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10143:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4748,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10152:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4749,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10156:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4752,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4756,"nodeType":"ExpressionStatement","src":"10133:35:24"},{"expression":{"arguments":[{"id":4758,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10193:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4759,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4657,"src":"10201:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4760,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"10205:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4757,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4428,"src":"10189:3:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4661,"id":4763,"nodeType":"Return","src":"10182:30:24"}]}]},"documentation":{"id":4655,"nodeType":"StructuredDocumentation","src":"8359:223:24","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4766,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:24","nodeType":"FunctionDefinition","parameters":{"id":4658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4657,"mutability":"mutable","name":"a","nameLocation":"8609:1:24","nodeType":"VariableDeclaration","scope":4766,"src":"8601:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4656,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:24"},"returnParameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4766,"src":"8635:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:24"},"scope":5277,"src":"8587:1642:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4800,"nodeType":"Block","src":"10405:164:24","statements":[{"id":4799,"nodeType":"UncheckedBlock","src":"10415:148:24","statements":[{"assignments":[4778],"declarations":[{"constant":false,"id":4778,"mutability":"mutable","name":"result","nameLocation":"10447:6:24","nodeType":"VariableDeclaration","scope":4799,"src":"10439:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4777,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4782,"initialValue":{"arguments":[{"id":4780,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"10461:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4779,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4766,4801],"referencedDeclaration":4766,"src":"10456:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"10484:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4785,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4772,"src":"10511:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":4784,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"10494:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4234_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4787,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"10524:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4788,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4778,"src":"10533:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4790,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4769,"src":"10542:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:24","trueExpression":{"hexValue":"31","id":4793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4796,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4776,"id":4798,"nodeType":"Return","src":"10477:75:24"}]}]},"documentation":{"id":4767,"nodeType":"StructuredDocumentation","src":"10235:89:24","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4801,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:24","nodeType":"FunctionDefinition","parameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4769,"mutability":"mutable","name":"a","nameLocation":"10351:1:24","nodeType":"VariableDeclaration","scope":4801,"src":"10343:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4768,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4772,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:24","nodeType":"VariableDeclaration","scope":4801,"src":"10354:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":4771,"nodeType":"UserDefinedTypeName","pathNode":{"id":4770,"name":"Rounding","nameLocations":["10354:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"10354:8:24"},"referencedDeclaration":4234,"src":"10354:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:24"},"returnParameters":{"id":4776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4801,"src":"10396:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4774,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:24"},"scope":5277,"src":"10329:240:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4932,"nodeType":"Block","src":"10760:922:24","statements":[{"assignments":[4810],"declarations":[{"constant":false,"id":4810,"mutability":"mutable","name":"result","nameLocation":"10778:6:24","nodeType":"VariableDeclaration","scope":4932,"src":"10770:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4809,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4812,"initialValue":{"hexValue":"30","id":4811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:24"},{"id":4929,"nodeType":"UncheckedBlock","src":"10798:855:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4813,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"10826:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4827,"nodeType":"IfStatement","src":"10822:99:24","trueBody":{"id":4826,"nodeType":"Block","src":"10844:77:24","statements":[{"expression":{"id":4820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"10862:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4821,"nodeType":"ExpressionStatement","src":"10862:13:24"},{"expression":{"id":4824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4822,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"10893:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4825,"nodeType":"ExpressionStatement","src":"10893:13:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4828,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"10938:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4842,"nodeType":"IfStatement","src":"10934:96:24","trueBody":{"id":4841,"nodeType":"Block","src":"10955:75:24","statements":[{"expression":{"id":4835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4833,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"10973:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4836,"nodeType":"ExpressionStatement","src":"10973:12:24"},{"expression":{"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4837,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11003:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4840,"nodeType":"ExpressionStatement","src":"11003:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4843,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11047:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4857,"nodeType":"IfStatement","src":"11043:96:24","trueBody":{"id":4856,"nodeType":"Block","src":"11064:75:24","statements":[{"expression":{"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11082:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4851,"nodeType":"ExpressionStatement","src":"11082:12:24"},{"expression":{"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4852,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11112:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4855,"nodeType":"ExpressionStatement","src":"11112:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11156:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4872,"nodeType":"IfStatement","src":"11152:96:24","trueBody":{"id":4871,"nodeType":"Block","src":"11173:75:24","statements":[{"expression":{"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4863,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11191:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4866,"nodeType":"ExpressionStatement","src":"11191:12:24"},{"expression":{"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4867,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11221:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4870,"nodeType":"ExpressionStatement","src":"11221:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4873,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11265:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4887,"nodeType":"IfStatement","src":"11261:93:24","trueBody":{"id":4886,"nodeType":"Block","src":"11281:73:24","statements":[{"expression":{"id":4880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4878,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11299:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4881,"nodeType":"ExpressionStatement","src":"11299:11:24"},{"expression":{"id":4884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4882,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11328:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4885,"nodeType":"ExpressionStatement","src":"11328:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4888,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11371:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4902,"nodeType":"IfStatement","src":"11367:93:24","trueBody":{"id":4901,"nodeType":"Block","src":"11387:73:24","statements":[{"expression":{"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11405:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4896,"nodeType":"ExpressionStatement","src":"11405:11:24"},{"expression":{"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4897,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11434:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4900,"nodeType":"ExpressionStatement","src":"11434:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4903,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11477:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4917,"nodeType":"IfStatement","src":"11473:93:24","trueBody":{"id":4916,"nodeType":"Block","src":"11493:73:24","statements":[{"expression":{"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11511:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4911,"nodeType":"ExpressionStatement","src":"11511:11:24"},{"expression":{"id":4914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4912,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11540:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4915,"nodeType":"ExpressionStatement","src":"11540:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"11583:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4928,"nodeType":"IfStatement","src":"11579:64:24","trueBody":{"id":4927,"nodeType":"Block","src":"11599:44:24","statements":[{"expression":{"id":4925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4923,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11617:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4926,"nodeType":"ExpressionStatement","src":"11617:11:24"}]}}]},{"expression":{"id":4930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"11669:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4808,"id":4931,"nodeType":"Return","src":"11662:13:24"}]},"documentation":{"id":4802,"nodeType":"StructuredDocumentation","src":"10575:119:24","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4933,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:24","nodeType":"FunctionDefinition","parameters":{"id":4805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4804,"mutability":"mutable","name":"value","nameLocation":"10721:5:24","nodeType":"VariableDeclaration","scope":4933,"src":"10713:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4803,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:24"},"returnParameters":{"id":4808,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4807,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4933,"src":"10751:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4806,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:24"},"scope":5277,"src":"10699:983:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4967,"nodeType":"Block","src":"11915:168:24","statements":[{"id":4966,"nodeType":"UncheckedBlock","src":"11925:152:24","statements":[{"assignments":[4945],"declarations":[{"constant":false,"id":4945,"mutability":"mutable","name":"result","nameLocation":"11957:6:24","nodeType":"VariableDeclaration","scope":4966,"src":"11949:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4944,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4949,"initialValue":{"arguments":[{"id":4947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"11971:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4946,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4933,4968],"referencedDeclaration":4933,"src":"11966:4:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4948,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"11998:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4952,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"12025:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":4951,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"12008:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4234_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4955,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"12043:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4936,"src":"12052:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:24","trueExpression":{"hexValue":"31","id":4960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4963,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4943,"id":4965,"nodeType":"Return","src":"11991:75:24"}]}]},"documentation":{"id":4934,"nodeType":"StructuredDocumentation","src":"11688:142:24","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4968,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:24","nodeType":"FunctionDefinition","parameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4936,"mutability":"mutable","name":"value","nameLocation":"11857:5:24","nodeType":"VariableDeclaration","scope":4968,"src":"11849:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4935,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4939,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:24","nodeType":"VariableDeclaration","scope":4968,"src":"11864:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":4938,"nodeType":"UserDefinedTypeName","pathNode":{"id":4937,"name":"Rounding","nameLocations":["11864:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"11864:8:24"},"referencedDeclaration":4234,"src":"11864:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:24"},"returnParameters":{"id":4943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4968,"src":"11906:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4941,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:24"},"scope":5277,"src":"11835:248:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5096,"nodeType":"Block","src":"12276:854:24","statements":[{"assignments":[4977],"declarations":[{"constant":false,"id":4977,"mutability":"mutable","name":"result","nameLocation":"12294:6:24","nodeType":"VariableDeclaration","scope":5096,"src":"12286:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4976,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4979,"initialValue":{"hexValue":"30","id":4978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:24"},{"id":5093,"nodeType":"UncheckedBlock","src":"12314:787:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4980,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12342:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4983,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4996,"nodeType":"IfStatement","src":"12338:103:24","trueBody":{"id":4995,"nodeType":"Block","src":"12361:80:24","statements":[{"expression":{"id":4989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4985,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12379:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4990,"nodeType":"ExpressionStatement","src":"12379:17:24"},{"expression":{"id":4993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4991,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12414:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4992,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4994,"nodeType":"ExpressionStatement","src":"12414:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12458:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5013,"nodeType":"IfStatement","src":"12454:103:24","trueBody":{"id":5012,"nodeType":"Block","src":"12477:80:24","statements":[{"expression":{"id":5006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5002,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12495:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":5005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":5004,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5007,"nodeType":"ExpressionStatement","src":"12495:17:24"},{"expression":{"id":5010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5008,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12530:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":5009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5011,"nodeType":"ExpressionStatement","src":"12530:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5014,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12574:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5030,"nodeType":"IfStatement","src":"12570:103:24","trueBody":{"id":5029,"nodeType":"Block","src":"12593:80:24","statements":[{"expression":{"id":5023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12611:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":5022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":5021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:24","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5024,"nodeType":"ExpressionStatement","src":"12611:17:24"},{"expression":{"id":5027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12646:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5028,"nodeType":"ExpressionStatement","src":"12646:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5031,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12690:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5047,"nodeType":"IfStatement","src":"12686:100:24","trueBody":{"id":5046,"nodeType":"Block","src":"12708:78:24","statements":[{"expression":{"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12726:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":5039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":5038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5041,"nodeType":"ExpressionStatement","src":"12726:16:24"},{"expression":{"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5042,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12760:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5045,"nodeType":"ExpressionStatement","src":"12760:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5048,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12803:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5051,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5064,"nodeType":"IfStatement","src":"12799:100:24","trueBody":{"id":5063,"nodeType":"Block","src":"12821:78:24","statements":[{"expression":{"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12839:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":5056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":5055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5058,"nodeType":"ExpressionStatement","src":"12839:16:24"},{"expression":{"id":5061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5059,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12873:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5062,"nodeType":"ExpressionStatement","src":"12873:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5065,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12916:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5068,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5081,"nodeType":"IfStatement","src":"12912:100:24","trueBody":{"id":5080,"nodeType":"Block","src":"12934:78:24","statements":[{"expression":{"id":5074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5070,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"12952:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":5073,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":5072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5075,"nodeType":"ExpressionStatement","src":"12952:16:24"},{"expression":{"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"12986:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5079,"nodeType":"ExpressionStatement","src":"12986:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4971,"src":"13029:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":5085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":5084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5092,"nodeType":"IfStatement","src":"13025:66:24","trueBody":{"id":5091,"nodeType":"Block","src":"13047:44:24","statements":[{"expression":{"id":5089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5087,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"13065:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5090,"nodeType":"ExpressionStatement","src":"13065:11:24"}]}}]},{"expression":{"id":5094,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4977,"src":"13117:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4975,"id":5095,"nodeType":"Return","src":"13110:13:24"}]},"documentation":{"id":4969,"nodeType":"StructuredDocumentation","src":"12089:120:24","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":5097,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:24","nodeType":"FunctionDefinition","parameters":{"id":4972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4971,"mutability":"mutable","name":"value","nameLocation":"12237:5:24","nodeType":"VariableDeclaration","scope":5097,"src":"12229:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4970,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:24"},"returnParameters":{"id":4975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5097,"src":"12267:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4973,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:24"},"scope":5277,"src":"12214:916:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5131,"nodeType":"Block","src":"13365:170:24","statements":[{"id":5130,"nodeType":"UncheckedBlock","src":"13375:154:24","statements":[{"assignments":[5109],"declarations":[{"constant":false,"id":5109,"mutability":"mutable","name":"result","nameLocation":"13407:6:24","nodeType":"VariableDeclaration","scope":5130,"src":"13399:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5108,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5113,"initialValue":{"arguments":[{"id":5111,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"13422:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5110,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[5097,5132],"referencedDeclaration":5097,"src":"13416:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5109,"src":"13449:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5116,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5103,"src":"13476:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":5115,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"13459:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4234_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":5118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":5119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5109,"src":"13495:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5100,"src":"13504:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:24","trueExpression":{"hexValue":"31","id":5124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5127,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5107,"id":5129,"nodeType":"Return","src":"13442:76:24"}]}]},"documentation":{"id":5098,"nodeType":"StructuredDocumentation","src":"13136:143:24","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5132,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:24","nodeType":"FunctionDefinition","parameters":{"id":5104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5100,"mutability":"mutable","name":"value","nameLocation":"13307:5:24","nodeType":"VariableDeclaration","scope":5132,"src":"13299:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5099,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5103,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:24","nodeType":"VariableDeclaration","scope":5132,"src":"13314:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":5102,"nodeType":"UserDefinedTypeName","pathNode":{"id":5101,"name":"Rounding","nameLocations":["13314:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"13314:8:24"},"referencedDeclaration":4234,"src":"13314:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:24"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5106,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5132,"src":"13356:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5105,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:24"},"scope":5277,"src":"13284:251:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5218,"nodeType":"Block","src":"13855:600:24","statements":[{"assignments":[5141],"declarations":[{"constant":false,"id":5141,"mutability":"mutable","name":"result","nameLocation":"13873:6:24","nodeType":"VariableDeclaration","scope":5218,"src":"13865:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5140,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5143,"initialValue":{"hexValue":"30","id":5142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:24"},{"id":5215,"nodeType":"UncheckedBlock","src":"13893:533:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5144,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"13921:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":5145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5158,"nodeType":"IfStatement","src":"13917:98:24","trueBody":{"id":5157,"nodeType":"Block","src":"13939:76:24","statements":[{"expression":{"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"13957:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":5150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:24","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5152,"nodeType":"ExpressionStatement","src":"13957:13:24"},{"expression":{"id":5155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5153,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"13988:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":5154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5156,"nodeType":"ExpressionStatement","src":"13988:12:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14032:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":5160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5173,"nodeType":"IfStatement","src":"14028:95:24","trueBody":{"id":5172,"nodeType":"Block","src":"14049:74:24","statements":[{"expression":{"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14067:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":5165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:24","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5167,"nodeType":"ExpressionStatement","src":"14067:12:24"},{"expression":{"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5168,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"14097:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":5169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5171,"nodeType":"ExpressionStatement","src":"14097:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5174,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14140:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":5175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5188,"nodeType":"IfStatement","src":"14136:95:24","trueBody":{"id":5187,"nodeType":"Block","src":"14157:74:24","statements":[{"expression":{"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5179,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14175:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":5180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:24","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5182,"nodeType":"ExpressionStatement","src":"14175:12:24"},{"expression":{"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"14205:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":5184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:24","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5186,"nodeType":"ExpressionStatement","src":"14205:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14248:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":5190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5203,"nodeType":"IfStatement","src":"14244:95:24","trueBody":{"id":5202,"nodeType":"Block","src":"14265:74:24","statements":[{"expression":{"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14283:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":5195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:24","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5197,"nodeType":"ExpressionStatement","src":"14283:12:24"},{"expression":{"id":5200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5198,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"14313:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":5199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5201,"nodeType":"ExpressionStatement","src":"14313:11:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5204,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"14356:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":5205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:24","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5214,"nodeType":"IfStatement","src":"14352:64:24","trueBody":{"id":5213,"nodeType":"Block","src":"14372:44:24","statements":[{"expression":{"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5209,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"14390:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":5210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5212,"nodeType":"ExpressionStatement","src":"14390:11:24"}]}}]},{"expression":{"id":5216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5141,"src":"14442:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5139,"id":5217,"nodeType":"Return","src":"14435:13:24"}]},"documentation":{"id":5133,"nodeType":"StructuredDocumentation","src":"13541:246:24","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":5219,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:24","nodeType":"FunctionDefinition","parameters":{"id":5136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5135,"mutability":"mutable","name":"value","nameLocation":"13816:5:24","nodeType":"VariableDeclaration","scope":5219,"src":"13808:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5134,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:24"},"returnParameters":{"id":5139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5219,"src":"13846:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5137,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:24"},"scope":5277,"src":"13792:663:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5256,"nodeType":"Block","src":"14692:177:24","statements":[{"id":5255,"nodeType":"UncheckedBlock","src":"14702:161:24","statements":[{"assignments":[5231],"declarations":[{"constant":false,"id":5231,"mutability":"mutable","name":"result","nameLocation":"14734:6:24","nodeType":"VariableDeclaration","scope":5255,"src":"14726:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5230,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5235,"initialValue":{"arguments":[{"id":5233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"14750:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5232,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[5219,5257],"referencedDeclaration":5219,"src":"14743:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":5234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5236,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"14777:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5238,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5225,"src":"14804:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":5237,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5276,"src":"14787:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$4234_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":5239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":5240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5241,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5231,"src":"14823:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":5242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5244,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"14838:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:24","trueExpression":{"hexValue":"31","id":5249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":5252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5229,"id":5254,"nodeType":"Return","src":"14770:82:24"}]}]},"documentation":{"id":5220,"nodeType":"StructuredDocumentation","src":"14461:144:24","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":5257,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:24","nodeType":"FunctionDefinition","parameters":{"id":5226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5222,"mutability":"mutable","name":"value","nameLocation":"14634:5:24","nodeType":"VariableDeclaration","scope":5257,"src":"14626:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5225,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:24","nodeType":"VariableDeclaration","scope":5257,"src":"14641:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":5224,"nodeType":"UserDefinedTypeName","pathNode":{"id":5223,"name":"Rounding","nameLocations":["14641:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"14641:8:24"},"referencedDeclaration":4234,"src":"14641:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:24"},"returnParameters":{"id":5229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5257,"src":"14683:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5227,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:24"},"scope":5277,"src":"14610:259:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5275,"nodeType":"Block","src":"15067:48:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":5271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5268,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5261,"src":"15090:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}],"id":5267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5266,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:24","typeDescriptions":{}}},"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":5270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:24","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":5272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5265,"id":5274,"nodeType":"Return","src":"15077:31:24"}]},"documentation":{"id":5258,"nodeType":"StructuredDocumentation","src":"14875:113:24","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":5276,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:24","nodeType":"FunctionDefinition","parameters":{"id":5262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5261,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:24","nodeType":"VariableDeclaration","scope":5276,"src":"15019:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"},"typeName":{"id":5260,"nodeType":"UserDefinedTypeName","pathNode":{"id":5259,"name":"Rounding","nameLocations":["15019:8:24"],"nodeType":"IdentifierPath","referencedDeclaration":4234,"src":"15019:8:24"},"referencedDeclaration":4234,"src":"15019:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$4234","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:24"},"returnParameters":{"id":5265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5264,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5276,"src":"15061:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5263,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:24"},"scope":5277,"src":"14993:122:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5278,"src":"203:14914:24","usedErrors":[4229],"usedEvents":[]}],"src":"103:15015:24"},"id":24},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[5382]},"id":5383,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5279,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":5280,"nodeType":"StructuredDocumentation","src":"135:80:25","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":5382,"linearizedBaseContracts":[5382],"name":"SignedMath","nameLocation":"224:10:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":5297,"nodeType":"Block","src":"376:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5290,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"393:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5291,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"397:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5294,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5285,"src":"405:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:25","trueExpression":{"id":5293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5283,"src":"401:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5289,"id":5296,"nodeType":"Return","src":"386:20:25"}]},"documentation":{"id":5281,"nodeType":"StructuredDocumentation","src":"241:66:25","text":" @dev Returns the largest of two signed numbers."},"id":5298,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:25","nodeType":"FunctionDefinition","parameters":{"id":5286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5283,"mutability":"mutable","name":"a","nameLocation":"332:1:25","nodeType":"VariableDeclaration","scope":5298,"src":"325:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5282,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5285,"mutability":"mutable","name":"b","nameLocation":"342:1:25","nodeType":"VariableDeclaration","scope":5298,"src":"335:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5284,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:25"},"returnParameters":{"id":5289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5298,"src":"368:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5287,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:25"},"scope":5382,"src":"312:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5315,"nodeType":"Block","src":"555:37:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5308,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"572:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5309,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"576:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5312,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5303,"src":"584:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:25","trueExpression":{"id":5311,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5301,"src":"580:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5307,"id":5314,"nodeType":"Return","src":"565:20:25"}]},"documentation":{"id":5299,"nodeType":"StructuredDocumentation","src":"419:67:25","text":" @dev Returns the smallest of two signed numbers."},"id":5316,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:25","nodeType":"FunctionDefinition","parameters":{"id":5304,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5301,"mutability":"mutable","name":"a","nameLocation":"511:1:25","nodeType":"VariableDeclaration","scope":5316,"src":"504:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5300,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5303,"mutability":"mutable","name":"b","nameLocation":"521:1:25","nodeType":"VariableDeclaration","scope":5316,"src":"514:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5302,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:25"},"returnParameters":{"id":5307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5316,"src":"547:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5305,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:25"},"scope":5382,"src":"491:101:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5359,"nodeType":"Block","src":"797:162:25","statements":[{"assignments":[5327],"declarations":[{"constant":false,"id":5327,"mutability":"mutable","name":"x","nameLocation":"866:1:25","nodeType":"VariableDeclaration","scope":5359,"src":"859:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5326,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":5340,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5328,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"871:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":5329,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"875:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5332,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"882:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5333,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"886:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5335,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":5336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5338,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:25"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5341,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"911:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5346,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"931:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5344,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:25","typeDescriptions":{}}},"id":5347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":5348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:25","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":5342,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:25","typeDescriptions":{}}},"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5351,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5319,"src":"945:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":5352,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5321,"src":"949:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5354,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":5356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":5325,"id":5358,"nodeType":"Return","src":"904:48:25"}]},"documentation":{"id":5317,"nodeType":"StructuredDocumentation","src":"598:126:25","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":5360,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:25","nodeType":"FunctionDefinition","parameters":{"id":5322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5319,"mutability":"mutable","name":"a","nameLocation":"753:1:25","nodeType":"VariableDeclaration","scope":5360,"src":"746:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5318,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":5321,"mutability":"mutable","name":"b","nameLocation":"763:1:25","nodeType":"VariableDeclaration","scope":5360,"src":"756:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5320,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:25"},"returnParameters":{"id":5325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5324,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5360,"src":"789:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5323,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:25"},"scope":5382,"src":"729:230:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5380,"nodeType":"Block","src":"1103:158:25","statements":[{"id":5379,"nodeType":"UncheckedBlock","src":"1113:142:25","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5370,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"1228:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":5371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:25","subExpression":{"id":5374,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"1242:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":5376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:25","trueExpression":{"id":5373,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5363,"src":"1237:1:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":5369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":5368,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:25","typeDescriptions":{}}},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5367,"id":5378,"nodeType":"Return","src":"1213:31:25"}]}]},"documentation":{"id":5361,"nodeType":"StructuredDocumentation","src":"965:78:25","text":" @dev Returns the absolute unsigned value of a signed value."},"id":5381,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:25","nodeType":"FunctionDefinition","parameters":{"id":5364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5363,"mutability":"mutable","name":"n","nameLocation":"1068:1:25","nodeType":"VariableDeclaration","scope":5381,"src":"1061:8:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":5362,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:25","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:25"},"returnParameters":{"id":5367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5381,"src":"1094:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5365,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:25"},"scope":5382,"src":"1048:213:25","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":5383,"src":"216:1047:25","usedErrors":[],"usedEvents":[]}],"src":"109:1155:25"},"id":25},"contracts/EnterTheChainlinkNFTMultiverse.sol":{"ast":{"absolutePath":"contracts/EnterTheChainlinkNFTMultiverse.sol","exportedSymbols":{"ConfirmedOwner":[807],"Context":[3932],"ERC165":[4211],"ERC721":[3739],"EnterTheChainlinkNFTMultiverse":[5876],"FunctionsClient":[117],"FunctionsRequest":[728],"IERC165":[4223],"IERC721":[3856],"IERC721Errors":[2683],"IERC721Metadata":[3902],"IERC721Receiver":[3874],"Strings":[4187],"VRFConsumerBaseV2Plus":[2430],"VRFV2PlusClient":[2593]},"id":5877,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5384,"literals":["solidity","0.8",".20"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol","file":"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol","id":5386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":118,"src":"57:99:26","symbolAliases":[{"foreign":{"id":5385,"name":"FunctionsClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"65:15:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","file":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","id":5388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":808,"src":"157:94:26","symbolAliases":[{"foreign":{"id":5387,"name":"ConfirmedOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"165:14:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol","file":"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol","id":5390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":729,"src":"252:111:26","symbolAliases":[{"foreign":{"id":5389,"name":"FunctionsRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"260:16:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol","file":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol","id":5392,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":2431,"src":"365:102:26","symbolAliases":[{"foreign":{"id":5391,"name":"VRFConsumerBaseV2Plus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"373:21:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol","file":"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol","id":5394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":2594,"src":"468:100:26","symbolAliases":[{"foreign":{"id":5393,"name":"VRFV2PlusClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"476:15:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":5395,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5877,"sourceUnit":3740,"src":"570:57:26","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":5396,"name":"ERC721","nameLocations":["676:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":3739,"src":"676:6:26"},"id":5397,"nodeType":"InheritanceSpecifier","src":"676:6:26"},{"baseName":{"id":5398,"name":"FunctionsClient","nameLocations":["688:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":117,"src":"688:15:26"},"id":5399,"nodeType":"InheritanceSpecifier","src":"688:15:26"},{"baseName":{"id":5400,"name":"VRFConsumerBaseV2Plus","nameLocations":["709:21:26"],"nodeType":"IdentifierPath","referencedDeclaration":2430,"src":"709:21:26"},"id":5401,"nodeType":"InheritanceSpecifier","src":"709:21:26"}],"canonicalName":"EnterTheChainlinkNFTMultiverse","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5876,"linearizedBaseContracts":[5876,2430,807,970,986,2462,117,131,3739,2683,3902,3856,4211,4223,3932],"name":"EnterTheChainlinkNFTMultiverse","nameLocation":"638:30:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":5405,"libraryName":{"id":5402,"name":"FunctionsRequest","nameLocations":["743:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":728,"src":"743:16:26"},"nodeType":"UsingForDirective","src":"737:52:26","typeName":{"id":5404,"nodeType":"UserDefinedTypeName","pathNode":{"id":5403,"name":"FunctionsRequest.Request","nameLocations":["764:16:26","781:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"764:24:26"},"referencedDeclaration":306,"src":"764:24:26","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}}},{"canonicalName":"EnterTheChainlinkNFTMultiverse.VRFRequestStatus","documentation":{"id":5406,"nodeType":"StructuredDocumentation","src":"795:14:26","text":"STRUCTS "},"id":5418,"members":[{"constant":false,"id":5408,"mutability":"mutable","name":"fulfilled","nameLocation":"854:9:26","nodeType":"VariableDeclaration","scope":5418,"src":"849:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5407,"name":"bool","nodeType":"ElementaryTypeName","src":"849:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5410,"mutability":"mutable","name":"exists","nameLocation":"878:6:26","nodeType":"VariableDeclaration","scope":5418,"src":"873:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5409,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":5412,"mutability":"mutable","name":"tokenId","nameLocation":"902:7:26","nodeType":"VariableDeclaration","scope":5418,"src":"894:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5411,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5414,"mutability":"mutable","name":"userWallet","nameLocation":"927:10:26","nodeType":"VariableDeclaration","scope":5418,"src":"919:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5413,"name":"address","nodeType":"ElementaryTypeName","src":"919:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5417,"mutability":"mutable","name":"randomWords","nameLocation":"957:11:26","nodeType":"VariableDeclaration","scope":5418,"src":"947:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5415,"name":"uint256","nodeType":"ElementaryTypeName","src":"947:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5416,"nodeType":"ArrayTypeName","src":"947:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"name":"VRFRequestStatus","nameLocation":"822:16:26","nodeType":"StructDefinition","scope":5876,"src":"815:160:26","visibility":"public"},{"canonicalName":"EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo","id":5425,"members":[{"constant":false,"id":5420,"mutability":"mutable","name":"tokenId","nameLocation":"1027:7:26","nodeType":"VariableDeclaration","scope":5425,"src":"1019:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5419,"name":"uint256","nodeType":"ElementaryTypeName","src":"1019:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5422,"mutability":"mutable","name":"userWallet","nameLocation":"1052:10:26","nodeType":"VariableDeclaration","scope":5425,"src":"1044:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5421,"name":"address","nodeType":"ElementaryTypeName","src":"1044:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5424,"mutability":"mutable","name":"isPending","nameLocation":"1077:9:26","nodeType":"VariableDeclaration","scope":5425,"src":"1072:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5423,"name":"bool","nodeType":"ElementaryTypeName","src":"1072:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"FunctionsRequestInfo","nameLocation":"988:20:26","nodeType":"StructDefinition","scope":5876,"src":"981:112:26","visibility":"public"},{"constant":false,"documentation":{"id":5426,"nodeType":"StructuredDocumentation","src":"1099:20:26","text":"NFT VARIABLES "},"functionSelector":"b187bd26","id":5428,"mutability":"mutable","name":"isPaused","nameLocation":"1137:8:26","nodeType":"VariableDeclaration","scope":5876,"src":"1125:20:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5427,"name":"bool","nodeType":"ElementaryTypeName","src":"1125:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"functionSelector":"98bdf6f5","id":5430,"mutability":"mutable","name":"tokenIdCounter","nameLocation":"1167:14:26","nodeType":"VariableDeclaration","scope":5876,"src":"1152:29:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5429,"name":"uint256","nodeType":"ElementaryTypeName","src":"1152:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"cfd30a6e","id":5433,"mutability":"mutable","name":"multiverseApiSources","nameLocation":"1204:20:26","nodeType":"VariableDeclaration","scope":5876,"src":"1188:36:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":5431,"name":"string","nodeType":"ElementaryTypeName","src":"1188:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":5432,"nodeType":"ArrayTypeName","src":"1188:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"public"},{"constant":false,"functionSelector":"849e0312","id":5435,"mutability":"mutable","name":"lastFunctionCallbackStringResult","nameLocation":"1245:32:26","nodeType":"VariableDeclaration","scope":5876,"src":"1231:46:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5434,"name":"string","nodeType":"ElementaryTypeName","src":"1231:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"6f2f418e","id":5439,"mutability":"mutable","name":"tokenIdToNFTData","nameLocation":"1318:16:26","nodeType":"VariableDeclaration","scope":5876,"src":"1284:50:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":5438,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5436,"name":"uint256","nodeType":"ElementaryTypeName","src":"1292:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1284:26:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5437,"name":"string","nodeType":"ElementaryTypeName","src":"1303:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"constant":false,"documentation":{"id":5440,"nodeType":"StructuredDocumentation","src":"1341:36:26","text":"CHAINLINK FUNCTIONS VARIABLES "},"id":5443,"mutability":"mutable","name":"functionsSubscriptionId","nameLocation":"1465:23:26","nodeType":"VariableDeclaration","scope":5876,"src":"1458:35:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":5441,"name":"uint64","nodeType":"ElementaryTypeName","src":"1458:6:26","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"3637","id":5442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1491:2:26","typeDescriptions":{"typeIdentifier":"t_rational_67_by_1","typeString":"int_const 67"},"value":"67"},"visibility":"internal"},{"constant":false,"functionSelector":"ff712d02","id":5448,"mutability":"mutable","name":"chainlinkFunctionsRequestIdTracker","nameLocation":"1667:34:26","nodeType":"VariableDeclaration","scope":5876,"src":"1611:90:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo)"},"typeName":{"id":5447,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1619:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1611:40:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5446,"nodeType":"UserDefinedTypeName","pathNode":{"id":5445,"name":"FunctionsRequestInfo","nameLocations":["1630:20:26"],"nodeType":"IdentifierPath","referencedDeclaration":5425,"src":"1630:20:26"},"referencedDeclaration":5425,"src":"1630:20:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo"}}},"visibility":"public"},{"constant":false,"functionSelector":"f887ea40","id":5451,"mutability":"mutable","name":"router","nameLocation":"1786:6:26","nodeType":"VariableDeclaration","scope":5876,"src":"1771:66:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5449,"name":"address","nodeType":"ElementaryTypeName","src":"1771:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307832333461356662354264363134613741413246664142323434443630336162464130416335433543","id":5450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1795:42:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x234a5fb5Bd614a7AA2FfAB244D603abFA0Ac5C5C"},"visibility":"public"},{"constant":false,"id":5454,"mutability":"mutable","name":"donId","nameLocation":"1915:5:26","nodeType":"VariableDeclaration","scope":5876,"src":"1907:90:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1907:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307836363735366532643631373236323639373437323735366432643733363537303666366336393631326433313030303030303030303030303030303030303030","id":5453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1931:66:26","typeDescriptions":{"typeIdentifier":"t_rational_46343392077630336878048714497730444752871115003929837516402919242763780227072_by_1","typeString":"int_const 4634...(69 digits omitted)...7072"},"value":"0x66756e2d617262697472756d2d7365706f6c69612d3100000000000000000000"},"visibility":"internal"},{"constant":false,"functionSelector":"e1e16379","id":5456,"mutability":"mutable","name":"functionCallbackLastRequestId","nameLocation":"2074:29:26","nodeType":"VariableDeclaration","scope":5876,"src":"2059:44:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2059:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"265d1fa3","id":5458,"mutability":"mutable","name":"functionCallbackLastResponse","nameLocation":"2122:28:26","nodeType":"VariableDeclaration","scope":5876,"src":"2109:41:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":5457,"name":"bytes","nodeType":"ElementaryTypeName","src":"2109:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"public"},{"constant":false,"functionSelector":"6250fb2b","id":5460,"mutability":"mutable","name":"functionCallbackLastError","nameLocation":"2169:25:26","nodeType":"VariableDeclaration","scope":5876,"src":"2156:38:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":5459,"name":"bytes","nodeType":"ElementaryTypeName","src":"2156:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"public"},{"constant":false,"functionSelector":"cf2a1a0e","id":5463,"mutability":"mutable","name":"functionGasLimit","nameLocation":"2214:16:26","nodeType":"VariableDeclaration","scope":5876,"src":"2200:39:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5461,"name":"uint32","nodeType":"ElementaryTypeName","src":"2200:6:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"333030303030","id":5462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2233:6:26","typeDescriptions":{"typeIdentifier":"t_rational_300000_by_1","typeString":"int_const 300000"},"value":"300000"},"visibility":"public"},{"constant":false,"documentation":{"id":5464,"nodeType":"StructuredDocumentation","src":"2246:30:26","text":"CHAINLINK VRF VARIABLES "},"functionSelector":"ed647d21","id":5467,"mutability":"mutable","name":"vrfSubscriptionId","nameLocation":"2372:17:26","nodeType":"VariableDeclaration","scope":5876,"src":"2357:120:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5465,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3430313936313334373631323931373435363235353533303139313439363130303331303430323431383839343431333236353235313137313238383130313633373537333532383830373637","id":5466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2400:77:26","typeDescriptions":{"typeIdentifier":"t_rational_40196134761291745625553019149610031040241889441326525117128810163757352880767_by_1","typeString":"int_const 4019...(69 digits omitted)...0767"},"value":"40196134761291745625553019149610031040241889441326525117128810163757352880767"},"visibility":"public"},{"constant":false,"functionSelector":"5846d682","id":5472,"mutability":"mutable","name":"chainlinkVRFRequestIdTracker","nameLocation":"2633:28:26","nodeType":"VariableDeclaration","scope":5876,"src":"2589:72:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VRFRequestStatus_$5418_storage_$","typeString":"mapping(uint256 => struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus)"},"typeName":{"id":5471,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":5468,"name":"uint256","nodeType":"ElementaryTypeName","src":"2597:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2589:36:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VRFRequestStatus_$5418_storage_$","typeString":"mapping(uint256 => struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":5470,"nodeType":"UserDefinedTypeName","pathNode":{"id":5469,"name":"VRFRequestStatus","nameLocations":["2608:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":5418,"src":"2608:16:26"},"referencedDeclaration":5418,"src":"2608:16:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus"}}},"visibility":"public"},{"constant":false,"functionSelector":"2af60523","id":5475,"mutability":"mutable","name":"arbitrumSepoliaKeyHash","nameLocation":"2754:22:26","nodeType":"VariableDeclaration","scope":5876,"src":"2739:114:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5473,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2739:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307830323766393466663134363562333532356639666330336539666637643664326330393533343832323436646436616530373537306334356436363331343134","id":5474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2787:66:26","typeDescriptions":{"typeIdentifier":"t_rational_1130043609787195695877878258229449261329130791240325722934729024641872106516_by_1","typeString":"int_const 1130...(68 digits omitted)...6516"},"value":"0x027f94ff1465b3525f9fc03e9ff7d6d2c0953482246dd6ae07570c45d6631414"},"visibility":"public"},{"constant":false,"functionSelector":"598bc486","id":5478,"mutability":"mutable","name":"vrfRequestConfirmations","nameLocation":"2930:23:26","nodeType":"VariableDeclaration","scope":5876,"src":"2916:41:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":5476,"name":"uint16","nodeType":"ElementaryTypeName","src":"2916:6:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"31","id":5477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2956:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"5151804a","id":5481,"mutability":"mutable","name":"vrfNumWords","nameLocation":"2977:11:26","nodeType":"VariableDeclaration","scope":5876,"src":"2963:29:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5479,"name":"uint32","nodeType":"ElementaryTypeName","src":"2963:6:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":5480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2991:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":false,"functionSelector":"425c9fa2","id":5484,"mutability":"mutable","name":"vrfRequestIds","nameLocation":"3015:13:26","nodeType":"VariableDeclaration","scope":5876,"src":"2998:30:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":5482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2998:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5483,"nodeType":"ArrayTypeName","src":"2998:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"functionSelector":"7d058d4f","id":5486,"mutability":"mutable","name":"vrfLastRequestId","nameLocation":"3049:16:26","nodeType":"VariableDeclaration","scope":5876,"src":"3034:31:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5485,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"3b7ed734","id":5489,"mutability":"mutable","name":"vrfCallbackGasLimit","nameLocation":"3085:19:26","nodeType":"VariableDeclaration","scope":5876,"src":"3071:42:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5487,"name":"uint32","nodeType":"ElementaryTypeName","src":"3071:6:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"313030303030","id":5488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3107:6:26","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"visibility":"public"},{"constant":false,"functionSelector":"a3e56fa8","id":5492,"mutability":"mutable","name":"vrfCoordinator","nameLocation":"3241:14:26","nodeType":"VariableDeclaration","scope":5876,"src":"3226:74:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5490,"name":"address","nodeType":"ElementaryTypeName","src":"3226:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"hexValue":"307835434538443541324243383462656232326133393843434135313939364637393330333133443631","id":5491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3258:42:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0x5CE8D5A2BC84beb22a398CCA51996F7930313D61"},"visibility":"public"},{"anonymous":false,"documentation":{"id":5493,"nodeType":"StructuredDocumentation","src":"3346:27:26","text":"CHAINLINK VRF EVENTS "},"eventSelector":"cc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee","id":5499,"name":"RequestSent","nameLocation":"3385:11:26","nodeType":"EventDefinition","parameters":{"id":5498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5495,"indexed":false,"mutability":"mutable","name":"requestId","nameLocation":"3405:9:26","nodeType":"VariableDeclaration","scope":5499,"src":"3397:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5494,"name":"uint256","nodeType":"ElementaryTypeName","src":"3397:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5497,"indexed":false,"mutability":"mutable","name":"numWords","nameLocation":"3423:8:26","nodeType":"VariableDeclaration","scope":5499,"src":"3416:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5496,"name":"uint32","nodeType":"ElementaryTypeName","src":"3416:6:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3396:36:26"},"src":"3379:54:26"},{"anonymous":false,"eventSelector":"fe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d","id":5506,"name":"RequestFulfilled","nameLocation":"3444:16:26","nodeType":"EventDefinition","parameters":{"id":5505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5501,"indexed":false,"mutability":"mutable","name":"requestId","nameLocation":"3469:9:26","nodeType":"VariableDeclaration","scope":5506,"src":"3461:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5500,"name":"uint256","nodeType":"ElementaryTypeName","src":"3461:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5504,"indexed":false,"mutability":"mutable","name":"randomWords","nameLocation":"3490:11:26","nodeType":"VariableDeclaration","scope":5506,"src":"3480:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5502,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5503,"nodeType":"ArrayTypeName","src":"3480:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3460:42:26"},"src":"3438:65:26"},{"documentation":{"id":5507,"nodeType":"StructuredDocumentation","src":"3509:13:26","text":"ERRORS "},"errorSelector":"d068bf5b","id":5511,"name":"UnexpectedRequestID","nameLocation":"3534:19:26","nodeType":"ErrorDefinition","parameters":{"id":5510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5509,"mutability":"mutable","name":"requestId","nameLocation":"3562:9:26","nodeType":"VariableDeclaration","scope":5511,"src":"3554:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5508,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3554:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3553:19:26"},"src":"3528:45:26"},{"constant":false,"documentation":{"id":5512,"nodeType":"StructuredDocumentation","src":"3579:65:26","text":"API Sources , hardcoded but can be updated through helpers "},"functionSelector":"a969a403","id":5515,"mutability":"mutable","name":"gameOfThronesSource","nameLocation":"3664:19:26","nodeType":"VariableDeclaration","scope":5876,"src":"3650:424:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5513,"name":"string","nodeType":"ElementaryTypeName","src":"3650:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"636f6e737420676f7455524c203d206068747470733a2f2f7468726f6e65736170692e636f6d2f6170692f76322f43686172616374657273603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203530293b636f6e737420676f7452657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a20676f7455524c2c6d6574686f643a2060474554602c7d293b636f6e737420676f74526573706f6e7365203d20617761697420676f74526571756573743b636f6e737420676f7444617461203d20676f74526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a20676f74446174615b72616e645d2e66756c6c4e616d652c696d6167653a20676f74446174615b72616e645d2e696d61676555726c2c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b","id":5514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3694:380:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_b356ab60852b9c7bf6afc3d7d78ca8abe7559386790bd006f6b1aacc633bceb4","typeString":"literal_string \"const gotURL = `https://thronesapi.com/api/v2/Characters`;const rand = Math.floor(Math.random() * 50);const gotRequest = Functions.makeHttpRequest({url: gotURL,method: `GET`,});const gotResponse = await gotRequest;const gotData = gotResponse.data;const myData = {name: gotData[rand].fullName,image: gotData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\""},"value":"const gotURL = `https://thronesapi.com/api/v2/Characters`;const rand = Math.floor(Math.random() * 50);const gotRequest = Functions.makeHttpRequest({url: gotURL,method: `GET`,});const gotResponse = await gotRequest;const gotData = gotResponse.data;const myData = {name: gotData[rand].fullName,image: gotData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));"},"visibility":"public"},{"constant":false,"functionSelector":"ab6eef52","id":5518,"mutability":"mutable","name":"pokeSource","nameLocation":"4094:10:26","nodeType":"VariableDeclaration","scope":5876,"src":"4080:487:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5516,"name":"string","nodeType":"ElementaryTypeName","src":"4080:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"636f6e737420706f6b6955524c203d206068747470733a2f2f706f6b656170692e636f2f6170692f76322f706f6b656d6f6e603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a2031303030293b636f6e737420706f6b656d6f6e436861726163746572203d2072616e643b636f6e737420706f6b6952657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a2060247b706f6b6955524c7d2f247b706f6b656d6f6e4368617261637465727d602c6d6574686f643a2060474554602c7d293b636f6e737420706f6b69526573706f6e7365203d20617761697420706f6b69526571756573743b636f6e73742072657144617461203d20706f6b69526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a20726571446174612e737065636965732e6e616d652c696d6167653a20726571446174612e737072697465732e6f746865722e686f6d652e66726f6e745f64656661756c742c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b","id":5517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4115:452:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_536fcc283258a48b0fe0891686860f03ae5000f592b6eb3f03b5b9997a6d9264","typeString":"literal_string \"const pokiURL = `https://pokeapi.co/api/v2/pokemon`;const rand = Math.floor(Math.random() * 1000);const pokemonCharacter = rand;const pokiRequest = Functions.makeHttpRequest({url: `${pokiURL}/${pokemonCharacter}`,method: `GET`,});const pokiResponse = await pokiRequest;const reqData = pokiResponse.data;const myData = {name: reqData.species.name,image: reqData.sprites.other.home.front_default,};return Functions.encodeString(JSON.stringify(myData));\""},"value":"const pokiURL = `https://pokeapi.co/api/v2/pokemon`;const rand = Math.floor(Math.random() * 1000);const pokemonCharacter = rand;const pokiRequest = Functions.makeHttpRequest({url: `${pokiURL}/${pokemonCharacter}`,method: `GET`,});const pokiResponse = await pokiRequest;const reqData = pokiResponse.data;const myData = {name: reqData.species.name,image: reqData.sprites.other.home.front_default,};return Functions.encodeString(JSON.stringify(myData));"},"visibility":"public"},{"constant":false,"functionSelector":"35d46d5c","id":5521,"mutability":"mutable","name":"disneySource","nameLocation":"4587:12:26","nodeType":"VariableDeclaration","scope":5876,"src":"4573:440:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5519,"name":"string","nodeType":"ElementaryTypeName","src":"4573:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"636f6e7374206469736e657955524c203d206068747470733a2f2f6170692e6469736e65796170692e6465762f636861726163746572603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203530293b636f6e7374206469736e657952657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206469736e657955524c2c6d6574686f643a2060474554602c7d293b636f6e7374206469736e6579526573706f6e7365203d206177616974206469736e6579526571756573743b636f6e7374206469736e657944617461203d206469736e6579526573706f6e73652e646174612e646174613b636f6e7374206d7944617461203d207b6e616d653a206469736e6579446174615b72616e645d2e6e616d652c696d6167653a206469736e6579446174615b72616e645d2e696d61676555726c2c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b","id":5520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4610:403:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_50dca9b6375f4560177d7c845b25eac0a35e165c01e8973ee0565d2ef1bf9ad7","typeString":"literal_string \"const disneyURL = `https://api.disneyapi.dev/character`;const rand = Math.floor(Math.random() * 50);const disneyRequest = Functions.makeHttpRequest({url: disneyURL,method: `GET`,});const disneyResponse = await disneyRequest;const disneyData = disneyResponse.data.data;const myData = {name: disneyData[rand].name,image: disneyData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\""},"value":"const disneyURL = `https://api.disneyapi.dev/character`;const rand = Math.floor(Math.random() * 50);const disneyRequest = Functions.makeHttpRequest({url: disneyURL,method: `GET`,});const disneyResponse = await disneyRequest;const disneyData = disneyResponse.data.data;const myData = {name: disneyData[rand].name,image: disneyData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));"},"visibility":"public"},{"constant":false,"functionSelector":"8a0ec9d2","id":5524,"mutability":"mutable","name":"hpSource","nameLocation":"5033:8:26","nodeType":"VariableDeclaration","scope":5876,"src":"5019:399:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":5522,"name":"string","nodeType":"ElementaryTypeName","src":"5019:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"636f6e737420687055524c203d206068747470733a2f2f68702d6170692e6f6e72656e6465722e636f6d2f6170692f63686172616374657273603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203230293b636f6e737420687052657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a20687055524c2c6d6574686f643a2060474554602c7d293b636f6e7374206870526573706f6e7365203d206177616974206870526571756573743b636f6e737420687044617461203d206870526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a206870446174615b72616e645d2e6e616d652c696d6167653a206870446174615b72616e645d2e696d6167652c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b","id":5523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5052:366:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_b8e30c79a6bd6323b25af152585c1d72b5f1774d3e10a72af2c5f2b529522c05","typeString":"literal_string \"const hpURL = `https://hp-api.onrender.com/api/characters`;const rand = Math.floor(Math.random() * 20);const hpRequest = Functions.makeHttpRequest({url: hpURL,method: `GET`,});const hpResponse = await hpRequest;const hpData = hpResponse.data;const myData = {name: hpData[rand].name,image: hpData[rand].image,};return Functions.encodeString(JSON.stringify(myData));\""},"value":"const hpURL = `https://hp-api.onrender.com/api/characters`;const rand = Math.floor(Math.random() * 20);const hpRequest = Functions.makeHttpRequest({url: hpURL,method: `GET`,});const hpResponse = await hpRequest;const hpData = hpResponse.data;const myData = {name: hpData[rand].name,image: hpData[rand].image,};return Functions.encodeString(JSON.stringify(myData));"},"visibility":"public"},{"body":{"id":5562,"nodeType":"Block","src":"5688:272:26","statements":[{"expression":{"arguments":[{"id":5541,"name":"gameOfThronesSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5515,"src":"5792:19:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":5538,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5766:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5787:4:26","memberName":"push","nodeType":"MemberAccess","src":"5766:25:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":5542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5766:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5543,"nodeType":"ExpressionStatement","src":"5766:46:26"},{"expression":{"arguments":[{"id":5547,"name":"pokeSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5518,"src":"5848:10:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":5544,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5822:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5843:4:26","memberName":"push","nodeType":"MemberAccess","src":"5822:25:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":5548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5822:37:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5549,"nodeType":"ExpressionStatement","src":"5822:37:26"},{"expression":{"arguments":[{"id":5553,"name":"disneySource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5521,"src":"5895:12:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":5550,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5869:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5890:4:26","memberName":"push","nodeType":"MemberAccess","src":"5869:25:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5869:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5555,"nodeType":"ExpressionStatement","src":"5869:39:26"},{"expression":{"arguments":[{"id":5559,"name":"hpSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5524,"src":"5944:8:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":5556,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"5918:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5939:4:26","memberName":"push","nodeType":"MemberAccess","src":"5918:25:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5918:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5561,"nodeType":"ExpressionStatement","src":"5918:35:26"}]},"documentation":{"id":5525,"nodeType":"StructuredDocumentation","src":"5425:18:26","text":"CONSTRUCTOR "},"id":5563,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"436861696e6c696e6b4d756c74697665727365","id":5528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5576:21:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_6232a429f73545df1dfc8a7c06942d3ebad42bfb045d49a2efa1be6b999c29cc","typeString":"literal_string \"ChainlinkMultiverse\""},"value":"ChainlinkMultiverse"},{"hexValue":"434c4d","id":5529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5599:5:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_28ee354526cd27a1b3b9ff3f67eb1227960123f63bb9a02e06ca92256bd370b7","typeString":"literal_string \"CLM\""},"value":"CLM"}],"id":5530,"kind":"baseConstructorSpecifier","modifierName":{"id":5527,"name":"ERC721","nameLocations":["5569:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":3739,"src":"5569:6:26"},"nodeType":"ModifierInvocation","src":"5569:36:26"},{"arguments":[{"id":5532,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5451,"src":"5630:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5533,"kind":"baseConstructorSpecifier","modifierName":{"id":5531,"name":"FunctionsClient","nameLocations":["5614:15:26"],"nodeType":"IdentifierPath","referencedDeclaration":117,"src":"5614:15:26"},"nodeType":"ModifierInvocation","src":"5614:23:26"},{"arguments":[{"id":5535,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5492,"src":"5668:14:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":5536,"kind":"baseConstructorSpecifier","modifierName":{"id":5534,"name":"VRFConsumerBaseV2Plus","nameLocations":["5646:21:26"],"nodeType":"IdentifierPath","referencedDeclaration":2430,"src":"5646:21:26"},"nodeType":"ModifierInvocation","src":"5646:37:26"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":5526,"nodeType":"ParameterList","parameters":[],"src":"5558:2:26"},"returnParameters":{"id":5537,"nodeType":"ParameterList","parameters":[],"src":"5688:0:26"},"scope":5876,"src":"5547:413:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5630,"nodeType":"Block","src":"6148:1203:26","statements":[{"expression":{"arguments":[{"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6166:9:26","subExpression":{"id":5570,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"6167:8:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f6e747261637420697320706175736564","id":5572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6177:20:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_e55600974a468a5baf1f1454a24481ec68f787ee02cd9f1d97c35ce2a8d2093d","typeString":"literal_string \"Contract is paused\""},"value":"Contract is paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e55600974a468a5baf1f1454a24481ec68f787ee02cd9f1d97c35ce2a8d2093d","typeString":"literal_string \"Contract is paused\""}],"id":5569,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"6158:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6158:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5574,"nodeType":"ExpressionStatement","src":"6158:40:26"},{"expression":{"id":5576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6293:16:26","subExpression":{"id":5575,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"6293:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5577,"nodeType":"ExpressionStatement","src":"6293:16:26"},{"assignments":[5579],"declarations":[{"constant":false,"id":5579,"mutability":"mutable","name":"requestId","nameLocation":"6393:9:26","nodeType":"VariableDeclaration","scope":5630,"src":"6385:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5578,"name":"uint256","nodeType":"ElementaryTypeName","src":"6385:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5598,"initialValue":{"arguments":[{"arguments":[{"id":5584,"name":"arbitrumSepoliaKeyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5475,"src":"6516:22:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5585,"name":"vrfSubscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5467,"src":"6563:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5586,"name":"vrfRequestConfirmations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5478,"src":"6620:23:26","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":5587,"name":"vrfCallbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5489,"src":"6679:19:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5588,"name":"vrfNumWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"6726:11:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"arguments":[{"hexValue":"66616c7365","id":5593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6860:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":5591,"name":"VRFV2PlusClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"6816:15:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFV2PlusClient_$2593_$","typeString":"type(library VRFV2PlusClient)"}},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6832:11:26","memberName":"ExtraArgsV1","nodeType":"MemberAccess","referencedDeclaration":2564,"src":"6816:27:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExtraArgsV1_$2564_storage_ptr_$","typeString":"type(struct VRFV2PlusClient.ExtraArgsV1 storage pointer)"}},"id":5594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6845:13:26"],"names":["nativePayment"],"nodeType":"FunctionCall","src":"6816:51:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_memory_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1 memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExtraArgsV1_$2564_memory_ptr","typeString":"struct VRFV2PlusClient.ExtraArgsV1 memory"}],"expression":{"id":5589,"name":"VRFV2PlusClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"6766:15:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFV2PlusClient_$2593_$","typeString":"type(library VRFV2PlusClient)"}},"id":5590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6782:12:26","memberName":"_argsToBytes","nodeType":"MemberAccess","referencedDeclaration":2592,"src":"6766:28:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_ExtraArgsV1_$2564_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct VRFV2PlusClient.ExtraArgsV1 memory) pure returns (bytes memory)"}},"id":5595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:119:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":5582,"name":"VRFV2PlusClient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"6454:15:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFV2PlusClient_$2593_$","typeString":"type(library VRFV2PlusClient)"}},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6470:18:26","memberName":"RandomWordsRequest","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"6454:34:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_RandomWordsRequest_$2577_storage_ptr_$","typeString":"type(struct VRFV2PlusClient.RandomWordsRequest storage pointer)"}},"id":5596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6507:7:26","6556:5:26","6598:20:26","6661:16:26","6716:8:26","6755:9:26"],"names":["keyHash","subId","requestConfirmations","callbackGasLimit","numWords","extraArgs"],"nodeType":"FunctionCall","src":"6454:446:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_RandomWordsRequest_$2577_memory_ptr","typeString":"struct VRFV2PlusClient.RandomWordsRequest memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_RandomWordsRequest_$2577_memory_ptr","typeString":"struct VRFV2PlusClient.RandomWordsRequest memory"}],"expression":{"id":5580,"name":"s_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"6405:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IVRFCoordinatorV2Plus_$2448","typeString":"contract IVRFCoordinatorV2Plus"}},"id":5581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6422:18:26","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":2447,"src":"6405:35:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_struct$_RandomWordsRequest_$2577_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct VRFV2PlusClient.RandomWordsRequest memory) external returns (uint256)"}},"id":5597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6405:505:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6385:525:26"},{"expression":{"id":5613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5599,"name":"chainlinkVRFRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"6975:28:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VRFRequestStatus_$5418_storage_$","typeString":"mapping(uint256 => struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage ref)"}},"id":5601,"indexExpression":{"id":5600,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"7004:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6975:39:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"hexValue":"30","id":5606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7075:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7061:13:26","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":5603,"name":"uint256","nodeType":"ElementaryTypeName","src":"7065:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5604,"nodeType":"ArrayTypeName","src":"7065:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":5607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7061:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"hexValue":"74727565","id":5608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7099:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":5609,"name":"tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5430,"src":"7126:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5610,"name":"userWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5566,"src":"7166:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":5611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7201:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5602,"name":"VRFRequestStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5418,"src":"7017:16:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_VRFRequestStatus_$5418_storage_ptr_$","typeString":"type(struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage pointer)"}},"id":5612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["7048:11:26","7091:6:26","7117:7:26","7154:10:26","7190:9:26"],"names":["randomWords","exists","tokenId","userWallet","fulfilled"],"nodeType":"FunctionCall","src":"7017:200:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_memory_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus memory"}},"src":"6975:242:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage ref"}},"id":5614,"nodeType":"ExpressionStatement","src":"6975:242:26"},{"expression":{"arguments":[{"id":5618,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"7246:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5615,"name":"vrfRequestIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5484,"src":"7227:13:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7241:4:26","memberName":"push","nodeType":"MemberAccess","src":"7227:18:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$attached_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7227:29:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5620,"nodeType":"ExpressionStatement","src":"7227:29:26"},{"expression":{"id":5623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5621,"name":"vrfLastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"7266:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5622,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"7285:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7266:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5624,"nodeType":"ExpressionStatement","src":"7266:28:26"},{"eventCall":{"arguments":[{"id":5626,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"7321:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5627,"name":"vrfNumWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5481,"src":"7332:11:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":5625,"name":"RequestSent","nodeType":"Identifier","overloadedDeclarations":[5499,21],"referencedDeclaration":5499,"src":"7309:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint32_$returns$__$","typeString":"function (uint256,uint32)"}},"id":5628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7309:35:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5629,"nodeType":"EmitStatement","src":"7304:40:26"}]},"documentation":{"id":5564,"nodeType":"StructuredDocumentation","src":"5987:97:26","text":" @notice Entry point for the user to mint an NFT, will kick off the VRF request"},"functionSelector":"48e9687a","id":5631,"implemented":true,"kind":"function","modifiers":[],"name":"mintRandomNFTRequest","nameLocation":"6098:20:26","nodeType":"FunctionDefinition","parameters":{"id":5567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5566,"mutability":"mutable","name":"userWallet","nameLocation":"6127:10:26","nodeType":"VariableDeclaration","scope":5631,"src":"6119:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5565,"name":"address","nodeType":"ElementaryTypeName","src":"6119:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6118:20:26"},"returnParameters":{"id":5568,"nodeType":"ParameterList","parameters":[],"src":"6148:0:26"},"scope":5876,"src":"6089:1262:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2336],"body":{"id":5715,"nodeType":"Block","src":"7673:1376:26","statements":[{"assignments":[5643],"declarations":[{"constant":false,"id":5643,"mutability":"mutable","name":"request","nameLocation":"7749:7:26","nodeType":"VariableDeclaration","scope":5715,"src":"7724:32:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus"},"typeName":{"id":5642,"nodeType":"UserDefinedTypeName","pathNode":{"id":5641,"name":"VRFRequestStatus","nameLocations":["7724:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":5418,"src":"7724:16:26"},"referencedDeclaration":5418,"src":"7724:16:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus"}},"visibility":"internal"}],"id":5647,"initialValue":{"baseExpression":{"id":5644,"name":"chainlinkVRFRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5472,"src":"7759:28:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_VRFRequestStatus_$5418_storage_$","typeString":"mapping(uint256 => struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage ref)"}},"id":5646,"indexExpression":{"id":5645,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5634,"src":"7801:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7759:61:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7724:96:26"},{"expression":{"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5648,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"7830:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage pointer"}},"id":5650,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7838:11:26","memberName":"randomWords","nodeType":"MemberAccess","referencedDeclaration":5417,"src":"7830:19:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5651,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5637,"src":"7852:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"src":"7830:33:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":5653,"nodeType":"ExpressionStatement","src":"7830:33:26"},{"expression":{"id":5658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5654,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"7873:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage pointer"}},"id":5656,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7881:9:26","memberName":"fulfilled","nodeType":"MemberAccess","referencedDeclaration":5408,"src":"7873:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7893:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7873:24:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5659,"nodeType":"ExpressionStatement","src":"7873:24:26"},{"assignments":[5661],"declarations":[{"constant":false,"id":5661,"mutability":"mutable","name":"randomNumber","nameLocation":"7977:12:26","nodeType":"VariableDeclaration","scope":5715,"src":"7969:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5660,"name":"uint256","nodeType":"ElementaryTypeName","src":"7969:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5668,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5662,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5637,"src":"7992:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5664,"indexExpression":{"hexValue":"30","id":5663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8004:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7992:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":5665,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"8009:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8030:6:26","memberName":"length","nodeType":"MemberAccess","src":"8009:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7992:44:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7969:67:26"},{"assignments":[5670],"declarations":[{"constant":false,"id":5670,"mutability":"mutable","name":"randomApiSource","nameLocation":"8123:15:26","nodeType":"VariableDeclaration","scope":5715,"src":"8109:29:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5669,"name":"string","nodeType":"ElementaryTypeName","src":"8109:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":5674,"initialValue":{"baseExpression":{"id":5671,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"8141:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5673,"indexExpression":{"id":5672,"name":"randomNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5661,"src":"8162:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8141:34:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8109:66:26"},{"assignments":[5679],"declarations":[{"constant":false,"id":5679,"mutability":"mutable","name":"req","nameLocation":"8338:3:26","nodeType":"VariableDeclaration","scope":5715,"src":"8306:35:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request"},"typeName":{"id":5678,"nodeType":"UserDefinedTypeName","pathNode":{"id":5677,"name":"FunctionsRequest.Request","nameLocations":["8306:16:26","8323:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":306,"src":"8306:24:26"},"referencedDeclaration":306,"src":"8306:24:26","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_storage_ptr","typeString":"struct FunctionsRequest.Request"}},"visibility":"internal"}],"id":5680,"nodeType":"VariableDeclarationStatement","src":"8306:35:26"},{"expression":{"arguments":[{"id":5684,"name":"randomApiSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"8392:15:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5681,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5679,"src":"8351:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":5683,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8355:36:26","memberName":"initializeRequestForInlineJavaScript","nodeType":"MemberAccess","referencedDeclaration":585,"src":"8351:40:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$306_memory_ptr_$_t_string_memory_ptr_$returns$__$attached_to$_t_struct$_Request_$306_memory_ptr_$","typeString":"function (struct FunctionsRequest.Request memory,string memory) pure"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8351:57:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5686,"nodeType":"ExpressionStatement","src":"8351:57:26"},{"expression":{"id":5696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5687,"name":"functionCallbackLastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"8464:29:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5689,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5679,"src":"8522:3:26","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$306_memory_ptr","typeString":"struct FunctionsRequest.Request memory"}},"id":5690,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8526:10:26","memberName":"encodeCBOR","nodeType":"MemberAccess","referencedDeclaration":521,"src":"8522:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Request_$306_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_struct$_Request_$306_memory_ptr_$","typeString":"function (struct FunctionsRequest.Request memory) pure returns (bytes memory)"}},"id":5691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8522:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":5692,"name":"functionsSubscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"8552:23:26","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":5693,"name":"functionGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5463,"src":"8589:16:26","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":5694,"name":"donId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5454,"src":"8619:5:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":5688,"name":"_sendRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"8496:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$_t_uint64_$_t_uint32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes memory,uint64,uint32,bytes32) returns (bytes32)"}},"id":5695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8496:138:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8464:170:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":5697,"nodeType":"ExpressionStatement","src":"8464:170:26"},{"expression":{"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5698,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"8711:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5700,"indexExpression":{"id":5699,"name":"functionCallbackLastRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"8759:29:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8711:87:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":5702,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"8845:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage pointer"}},"id":5703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8853:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5412,"src":"8845:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5704,"name":"request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"8886:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_VRFRequestStatus_$5418_storage_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus storage pointer"}},"id":5705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8894:10:26","memberName":"userWallet","nodeType":"MemberAccess","referencedDeclaration":5414,"src":"8886:18:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":5706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8929:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5701,"name":"FunctionsRequestInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"8801:20:26","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_FunctionsRequestInfo_$5425_storage_ptr_$","typeString":"type(struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage pointer)"}},"id":5707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["8836:7:26","8874:10:26","8918:9:26"],"names":["tokenId","userWallet","isPending"],"nodeType":"FunctionCall","src":"8801:143:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_memory_ptr","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo memory"}},"src":"8711:233:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5709,"nodeType":"ExpressionStatement","src":"8711:233:26"},{"eventCall":{"arguments":[{"id":5711,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5634,"src":"9019:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5712,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5637,"src":"9030:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"id":5710,"name":"RequestFulfilled","nodeType":"Identifier","overloadedDeclarations":[5506,25],"referencedDeclaration":5506,"src":"9002:16:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":5713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9002:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5714,"nodeType":"EmitStatement","src":"8997:45:26"}]},"documentation":{"id":5632,"nodeType":"StructuredDocumentation","src":"7403:146:26","text":" @notice Callback function used by VRF Coordinator\n @dev Use the RandomWordsRequest response to select a random api source"},"id":5716,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"7563:18:26","nodeType":"FunctionDefinition","overrides":{"id":5639,"nodeType":"OverrideSpecifier","overrides":[],"src":"7664:8:26"},"parameters":{"id":5638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5634,"mutability":"mutable","name":"requestId","nameLocation":"7599:9:26","nodeType":"VariableDeclaration","scope":5716,"src":"7591:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5633,"name":"uint256","nodeType":"ElementaryTypeName","src":"7591:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5637,"mutability":"mutable","name":"randomWords","nameLocation":"7637:11:26","nodeType":"VariableDeclaration","scope":5716,"src":"7618:30:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5635,"name":"uint256","nodeType":"ElementaryTypeName","src":"7618:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5636,"nodeType":"ArrayTypeName","src":"7618:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7581:73:26"},"returnParameters":{"id":5640,"nodeType":"ParameterList","parameters":[],"src":"7673:0:26"},"scope":5876,"src":"7554:1495:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[82],"body":{"id":5779,"nodeType":"Block","src":"9362:890:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":5728,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"9393:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5730,"indexExpression":{"id":5729,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"9428:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9393:45:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9439:9:26","memberName":"isPending","nodeType":"MemberAccess","referencedDeclaration":5424,"src":"9393:55:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"74727565","id":5732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9452:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"9393:63:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642072657175657374206964","id":5734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9470:20:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_0f5343873485c5c5ba9c972f367671af3745dc5cce720ddb197036ef7342b2b0","typeString":"literal_string \"Invalid request id\""},"value":"Invalid request id"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0f5343873485c5c5ba9c972f367671af3745dc5cce720ddb197036ef7342b2b0","typeString":"literal_string \"Invalid request id\""}],"id":5727,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"9372:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9372:128:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5736,"nodeType":"ExpressionStatement","src":"9372:128:26"},{"expression":{"id":5739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5737,"name":"functionCallbackLastError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5460,"src":"9559:25:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5738,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"9587:3:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"9559:31:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5740,"nodeType":"ExpressionStatement","src":"9559:31:26"},{"expression":{"id":5743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5741,"name":"functionCallbackLastResponse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5458,"src":"9600:28:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5742,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"9631:8:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"9600:39:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5744,"nodeType":"ExpressionStatement","src":"9600:39:26"},{"expression":{"id":5750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5745,"name":"lastFunctionCallbackStringResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"9696:32:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5748,"name":"response","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"9738:8:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":5747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9731:6:26","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":5746,"name":"string","nodeType":"ElementaryTypeName","src":"9731:6:26","typeDescriptions":{}}},"id":5749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9731:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"9696:51:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5751,"nodeType":"ExpressionStatement","src":"9696:51:26"},{"expression":{"id":5757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":5752,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"9807:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5754,"indexExpression":{"id":5753,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"9842:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9807:45:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9853:9:26","memberName":"isPending","nodeType":"MemberAccess","referencedDeclaration":5424,"src":"9807:55:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9865:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"9807:63:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5758,"nodeType":"ExpressionStatement","src":"9807:63:26"},{"expression":{"id":5766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5759,"name":"tokenIdToNFTData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5439,"src":"9927:16:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":5764,"indexExpression":{"expression":{"baseExpression":{"id":5760,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"9957:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5762,"indexExpression":{"id":5761,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"9992:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9957:45:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10003:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5420,"src":"9957:53:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9927:93:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5765,"name":"lastFunctionCallbackStringResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5435,"src":"10023:32:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"9927:128:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5767,"nodeType":"ExpressionStatement","src":"9927:128:26"},{"expression":{"arguments":[{"expression":{"baseExpression":{"id":5769,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"10112:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5771,"indexExpression":{"id":5770,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"10147:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10112:45:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10158:10:26","memberName":"userWallet","nodeType":"MemberAccess","referencedDeclaration":5422,"src":"10112:56:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":5773,"name":"chainlinkFunctionsRequestIdTracker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5448,"src":"10182:34:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_FunctionsRequestInfo_$5425_storage_$","typeString":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref)"}},"id":5775,"indexExpression":{"id":5774,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5719,"src":"10217:9:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10182:45:26","typeDescriptions":{"typeIdentifier":"t_struct$_FunctionsRequestInfo_$5425_storage","typeString":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo storage ref"}},"id":5776,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10228:7:26","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":5420,"src":"10182:53:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5768,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[3361,3387],"referencedDeclaration":3361,"src":"10089:9:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10089:156:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5778,"nodeType":"ExpressionStatement","src":"10089:156:26"}]},"documentation":{"id":5717,"nodeType":"StructuredDocumentation","src":"9055:170:26","text":" @notice Callback function used by Chainlink Functions node\n @dev Use the response to get the metadata for an NFT and execute the mint of that NFT"},"id":5780,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRequest","nameLocation":"9239:14:26","nodeType":"FunctionDefinition","overrides":{"id":5725,"nodeType":"OverrideSpecifier","overrides":[],"src":"9353:8:26"},"parameters":{"id":5724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5719,"mutability":"mutable","name":"requestId","nameLocation":"9271:9:26","nodeType":"VariableDeclaration","scope":5780,"src":"9263:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":5718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9263:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":5721,"mutability":"mutable","name":"response","nameLocation":"9303:8:26","nodeType":"VariableDeclaration","scope":5780,"src":"9290:21:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5720,"name":"bytes","nodeType":"ElementaryTypeName","src":"9290:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":5723,"mutability":"mutable","name":"err","nameLocation":"9334:3:26","nodeType":"VariableDeclaration","scope":5780,"src":"9321:16:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5722,"name":"bytes","nodeType":"ElementaryTypeName","src":"9321:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9253:90:26"},"returnParameters":{"id":5726,"nodeType":"ParameterList","parameters":[],"src":"9362:0:26"},"scope":5876,"src":"9230:1022:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5790,"nodeType":"Block","src":"10364:32:26","statements":[{"expression":{"id":5788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5786,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"10374:8:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10385:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10374:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5789,"nodeType":"ExpressionStatement","src":"10374:15:26"}]},"documentation":{"id":5781,"nodeType":"StructuredDocumentation","src":"10278:45:26","text":" @notice Pause the contract"},"functionSelector":"8456cb59","id":5791,"implemented":true,"kind":"function","modifiers":[{"id":5784,"kind":"modifierInvocation","modifierName":{"id":5783,"name":"onlyOwner","nameLocations":["10354:9:26"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"10354:9:26"},"nodeType":"ModifierInvocation","src":"10354:9:26"}],"name":"pause","nameLocation":"10337:5:26","nodeType":"FunctionDefinition","parameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"10342:2:26"},"returnParameters":{"id":5785,"nodeType":"ParameterList","parameters":[],"src":"10364:0:26"},"scope":5876,"src":"10328:68:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5801,"nodeType":"Block","src":"10492:33:26","statements":[{"expression":{"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5797,"name":"isPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5428,"src":"10502:8:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10513:5:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10502:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5800,"nodeType":"ExpressionStatement","src":"10502:16:26"}]},"documentation":{"id":5792,"nodeType":"StructuredDocumentation","src":"10402:47:26","text":" @notice Unpause the contract"},"functionSelector":"3f4ba83a","id":5802,"implemented":true,"kind":"function","modifiers":[{"id":5795,"kind":"modifierInvocation","modifierName":{"id":5794,"name":"onlyOwner","nameLocations":["10482:9:26"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"10482:9:26"},"nodeType":"ModifierInvocation","src":"10482:9:26"}],"name":"unpause","nameLocation":"10463:7:26","nodeType":"FunctionDefinition","parameters":{"id":5793,"nodeType":"ParameterList","parameters":[],"src":"10470:2:26"},"returnParameters":{"id":5796,"nodeType":"ParameterList","parameters":[],"src":"10492:0:26"},"scope":5876,"src":"10454:71:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5816,"nodeType":"Block","src":"10683:53:26","statements":[{"expression":{"arguments":[{"id":5813,"name":"apiSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"10719:9:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":5810,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"10693:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10714:4:26","memberName":"push","nodeType":"MemberAccess","src":"10693:25:26","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$_t_string_storage_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer,string storage ref)"}},"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10693:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5815,"nodeType":"ExpressionStatement","src":"10693:36:26"}]},"documentation":{"id":5803,"nodeType":"StructuredDocumentation","src":"10531:78:26","text":" @notice Add an API source to the multiverseApiSources array"},"functionSelector":"9443dec1","id":5817,"implemented":true,"kind":"function","modifiers":[{"id":5808,"kind":"modifierInvocation","modifierName":{"id":5807,"name":"onlyOwner","nameLocations":["10673:9:26"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"10673:9:26"},"nodeType":"ModifierInvocation","src":"10673:9:26"}],"name":"appendApiSource","nameLocation":"10623:15:26","nodeType":"FunctionDefinition","parameters":{"id":5806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5805,"mutability":"mutable","name":"apiSource","nameLocation":"10653:9:26","nodeType":"VariableDeclaration","scope":5817,"src":"10639:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5804,"name":"string","nodeType":"ElementaryTypeName","src":"10639:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"10638:25:26"},"returnParameters":{"id":5809,"nodeType":"ParameterList","parameters":[],"src":"10683:0:26"},"scope":5876,"src":"10614:122:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5849,"nodeType":"Block","src":"10873:235:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5826,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"10891:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5827,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"10899:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10920:6:26","memberName":"length","nodeType":"MemberAccess","src":"10899:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10891:35:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e646578206f7574206f6620626f756e6473","id":5830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10928:21:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""},"value":"Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""}],"id":5825,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"10883:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10883:67:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5832,"nodeType":"ExpressionStatement","src":"10883:67:26"},{"expression":{"id":5842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5833,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"10960:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5835,"indexExpression":{"id":5834,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"10981:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10960:27:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5836,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"10990:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5841,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5837,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"11024:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11045:6:26","memberName":"length","nodeType":"MemberAccess","src":"11024:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":5839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11054:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11024:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10990:75:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"src":"10960:105:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5843,"nodeType":"ExpressionStatement","src":"10960:105:26"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5844,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"11075:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11096:3:26","memberName":"pop","nodeType":"MemberAccess","src":"11075:24:26","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_string_storage_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_string_storage_$dyn_storage_ptr_$","typeString":"function (string storage ref[] storage pointer)"}},"id":5847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11075:26:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5848,"nodeType":"ExpressionStatement","src":"11075:26:26"}]},"documentation":{"id":5818,"nodeType":"StructuredDocumentation","src":"10742:67:26","text":" @notice Remove an API source at a specific index"},"functionSelector":"53cd456f","id":5850,"implemented":true,"kind":"function","modifiers":[{"id":5823,"kind":"modifierInvocation","modifierName":{"id":5822,"name":"onlyOwner","nameLocations":["10863:9:26"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"10863:9:26"},"nodeType":"ModifierInvocation","src":"10863:9:26"}],"name":"removeApiSource","nameLocation":"10823:15:26","nodeType":"FunctionDefinition","parameters":{"id":5821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5820,"mutability":"mutable","name":"index","nameLocation":"10847:5:26","nodeType":"VariableDeclaration","scope":5850,"src":"10839:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5819,"name":"uint256","nodeType":"ElementaryTypeName","src":"10839:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10838:15:26"},"returnParameters":{"id":5824,"nodeType":"ParameterList","parameters":[],"src":"10873:0:26"},"scope":5876,"src":"10814:294:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5874,"nodeType":"Block","src":"11292:133:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5861,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"11310:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5862,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"11318:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11339:6:26","memberName":"length","nodeType":"MemberAccess","src":"11318:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11310:35:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e646578206f7574206f6620626f756e6473","id":5865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11347:21:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""},"value":"Index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367","typeString":"literal_string \"Index out of bounds\""}],"id":5860,"name":"require","nodeType":"Identifier","overloadedDeclarations":[4294967278,4294967278],"referencedDeclaration":4294967278,"src":"11302:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11302:67:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5867,"nodeType":"ExpressionStatement","src":"11302:67:26"},{"expression":{"id":5872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5868,"name":"multiverseApiSources","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5433,"src":"11379:20:26","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":5870,"indexExpression":{"id":5869,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5853,"src":"11400:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11379:27:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5871,"name":"apiSource","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5855,"src":"11409:9:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"11379:39:26","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":5873,"nodeType":"ExpressionStatement","src":"11379:39:26"}]},"documentation":{"id":5851,"nodeType":"StructuredDocumentation","src":"11114:67:26","text":" @notice Update an API source at a specific index"},"functionSelector":"813ce42d","id":5875,"implemented":true,"kind":"function","modifiers":[{"id":5858,"kind":"modifierInvocation","modifierName":{"id":5857,"name":"onlyOwner","nameLocations":["11282:9:26"],"nodeType":"IdentifierPath","referencedDeclaration":969,"src":"11282:9:26"},"nodeType":"ModifierInvocation","src":"11282:9:26"}],"name":"updateApiSource","nameLocation":"11195:15:26","nodeType":"FunctionDefinition","parameters":{"id":5856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5853,"mutability":"mutable","name":"index","nameLocation":"11228:5:26","nodeType":"VariableDeclaration","scope":5875,"src":"11220:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5852,"name":"uint256","nodeType":"ElementaryTypeName","src":"11220:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5855,"mutability":"mutable","name":"apiSource","nameLocation":"11257:9:26","nodeType":"VariableDeclaration","scope":5875,"src":"11243:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5854,"name":"string","nodeType":"ElementaryTypeName","src":"11243:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"11210:62:26"},"returnParameters":{"id":5859,"nodeType":"ParameterList","parameters":[],"src":"11292:0:26"},"scope":5876,"src":"11186:239:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":5877,"src":"629:10798:26","usedErrors":[27,308,314,2286,2294,2296,2641,2646,2655,2660,2665,2672,2677,2682,5511],"usedEvents":[21,25,824,830,2455,3755,3764,3773,5499,5506]}],"src":"32:11396:26"},"id":26}},"contracts":{"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol":{"FunctionsClient":{"abi":[{"inputs":[],"name":"OnlyRouterCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}}},"title":"The Chainlink Functions client contract","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"title\":\"The Chainlink Functions client contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"notice\":\"Contract developers can inherit this contract in order to make Chainlink Functions requests\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":\"FunctionsClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."}},"notice":"Contract developers can inherit this contract in order to make Chainlink Functions requests","version":1}}},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol":{"IFunctionsClient":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}}},"title":"Chainlink Functions client interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}}},\"title\":\"Chainlink Functions client interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":\"IFunctionsClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."}},"version":1}}},"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol":{"IFunctionsRouter":{"abi":[{"inputs":[{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"},{"internalType":"uint96","name":"juelsPerGas","type":"uint96"},{"internalType":"uint96","name":"costWithoutFulfillment","type":"uint96"},{"internalType":"address","name":"transmitter","type":"address"},{"components":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"address","name":"coordinator","type":"address"},{"internalType":"uint96","name":"estimatedTotalCostJuels","type":"uint96"},{"internalType":"address","name":"client","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint72","name":"adminFee","type":"uint72"},{"internalType":"uint72","name":"donFee","type":"uint72"},{"internalType":"uint40","name":"gasOverheadBeforeCallback","type":"uint40"},{"internalType":"uint40","name":"gasOverheadAfterCallback","type":"uint40"},{"internalType":"uint32","name":"timeoutTimestamp","type":"uint32"}],"internalType":"struct FunctionsResponse.Commitment","name":"commitment","type":"tuple"}],"name":"fulfill","outputs":[{"internalType":"enum FunctionsResponse.FulfillResult","name":"","type":"uint8"},{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAdminFee","outputs":[{"internalType":"uint72","name":"adminFee","type":"uint72"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getAllowListId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getContractById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"getProposedContractById","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getProposedContractSet","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"},{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"name":"isValidCallbackGasLimit","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proposalSetIds","type":"bytes32[]"},{"internalType":"address[]","name":"proposalSetAddresses","type":"address[]"}],"name":"proposeContractsUpdate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint16","name":"dataVersion","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"bytes32","name":"donId","type":"bytes32"}],"name":"sendRequest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint16","name":"dataVersion","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"bytes32","name":"donId","type":"bytes32"}],"name":"sendRequestToProposed","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"allowListId","type":"bytes32"}],"name":"setAllowListId","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"updateContracts","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":{"details":"Only callable by the Coordinator contract that is saved in the commitment","params":{"commitment":"- The parameters of the request that must be held consistent between request and response time","costWithoutFulfillment":"- The cost of processing the request (in Juels of LINK ), without fulfillment","err":"error from DON consensus","juelsPerGas":"- current rate of juels/gas","response":"response data from DON consensus","transmitter":"- The Node that transmitted the OCR report"},"returns":{"_0":"fulfillResult -","_1":"callbackGasCostJuels -"}},"getAdminFee()":{"returns":{"adminFee":"adminFee"}},"getAllowListId()":{"returns":{"_0":"id - bytes32 id that can be passed to the \"getContractById\" of the Router"}},"getContractById(bytes32)":{"params":{"id":"A bytes32 identifier for the route"},"returns":{"_0":"contract The current contract address"}},"getProposedContractById(bytes32)":{"params":{"id":"A bytes32 identifier for the route"},"returns":{"_0":"contract The current or proposed contract address"}},"getProposedContractSet()":{"returns":{"_0":"ids The identifiers of the contracts to update","_1":"to The addresses of the contracts that will be updated to"}},"isValidCallbackGasLimit(uint64,uint32)":{"params":{"callbackGasLimit":"desired callback gas limit","subscriptionId":"subscription ID"}},"pause()":{"details":"Puts the system into an emergency stopped state.Only callable by owner"},"proposeContractsUpdate(bytes32[],address[])":{"details":"Only callable by owner"},"sendRequest(uint64,bytes,uint16,uint32,bytes32)":{"params":{"callbackGasLimit":"- Gas limit for the fulfillment callback","data":"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request","dataVersion":"- Gas limit for the fulfillment callback","donId":"- An identifier used to determine which route to send the request along","subscriptionId":"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"requestId - A unique request identifier"}},"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":{"params":{"callbackGasLimit":"- Gas limit for the fulfillment callback","data":"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request","dataVersion":"- Gas limit for the fulfillment callback","donId":"- An identifier used to determine which route to send the request along","subscriptionId":"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"},"returns":{"_0":"requestId - A unique request identifier"}},"unpause()":{"details":"Takes the system out of an emergency stopped state.Only callable by owner"},"updateContracts()":{"details":"Only callable by owner"}},"title":"Chainlink Functions Router interface.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":"33060529","getAdminFee()":"2a905ccc","getAllowListId()":"aab396bd","getContractById(bytes32)":"a9c9a918","getProposedContractById(bytes32)":"6a2215de","getProposedContractSet()":"badc3eb6","isValidCallbackGasLimit(uint64,uint32)":"10fc49c1","pause()":"8456cb59","proposeContractsUpdate(bytes32[],address[])":"3e871e4d","sendRequest(uint64,bytes,uint16,uint32,bytes32)":"461d2762","sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":"41db4ca3","setAllowListId(bytes32)":"ea320e0b","unpause()":"3f4ba83a","updateContracts()":"b734c0f4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"},{\"internalType\":\"uint96\",\"name\":\"juelsPerGas\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"costWithoutFulfillment\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"transmitter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"estimatedTotalCostJuels\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"donFee\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadBeforeCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadAfterCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct FunctionsResponse.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"name\":\"fulfill\",\"outputs\":[{\"internalType\":\"enum FunctionsResponse.FulfillResult\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminFee\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getContractById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getProposedContractById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProposedContractSet\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"isValidCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalSetIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"proposalSetAddresses\",\"type\":\"address[]\"}],\"name\":\"proposeContractsUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"dataVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint16\",\"name\":\"dataVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"donId\",\"type\":\"bytes32\"}],\"name\":\"sendRequestToProposed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allowListId\",\"type\":\"bytes32\"}],\"name\":\"setAllowListId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))\":{\"details\":\"Only callable by the Coordinator contract that is saved in the commitment\",\"params\":{\"commitment\":\"- The parameters of the request that must be held consistent between request and response time\",\"costWithoutFulfillment\":\"- The cost of processing the request (in Juels of LINK ), without fulfillment\",\"err\":\"error from DON consensus\",\"juelsPerGas\":\"- current rate of juels/gas\",\"response\":\"response data from DON consensus\",\"transmitter\":\"- The Node that transmitted the OCR report\"},\"returns\":{\"_0\":\"fulfillResult -\",\"_1\":\"callbackGasCostJuels -\"}},\"getAdminFee()\":{\"returns\":{\"adminFee\":\"adminFee\"}},\"getAllowListId()\":{\"returns\":{\"_0\":\"id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\"}},\"getContractById(bytes32)\":{\"params\":{\"id\":\"A bytes32 identifier for the route\"},\"returns\":{\"_0\":\"contract The current contract address\"}},\"getProposedContractById(bytes32)\":{\"params\":{\"id\":\"A bytes32 identifier for the route\"},\"returns\":{\"_0\":\"contract The current or proposed contract address\"}},\"getProposedContractSet()\":{\"returns\":{\"_0\":\"ids The identifiers of the contracts to update\",\"_1\":\"to The addresses of the contracts that will be updated to\"}},\"isValidCallbackGasLimit(uint64,uint32)\":{\"params\":{\"callbackGasLimit\":\"desired callback gas limit\",\"subscriptionId\":\"subscription ID\"}},\"pause()\":{\"details\":\"Puts the system into an emergency stopped state.Only callable by owner\"},\"proposeContractsUpdate(bytes32[],address[])\":{\"details\":\"Only callable by owner\"},\"sendRequest(uint64,bytes,uint16,uint32,bytes32)\":{\"params\":{\"callbackGasLimit\":\"- Gas limit for the fulfillment callback\",\"data\":\"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"dataVersion\":\"- Gas limit for the fulfillment callback\",\"donId\":\"- An identifier used to determine which route to send the request along\",\"subscriptionId\":\"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId - A unique request identifier\"}},\"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)\":{\"params\":{\"callbackGasLimit\":\"- Gas limit for the fulfillment callback\",\"data\":\"- CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"dataVersion\":\"- Gas limit for the fulfillment callback\",\"donId\":\"- An identifier used to determine which route to send the request along\",\"subscriptionId\":\"- A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId - A unique request identifier\"}},\"unpause()\":{\"details\":\"Takes the system out of an emergency stopped state.Only callable by owner\"},\"updateContracts()\":{\"details\":\"Only callable by owner\"}},\"title\":\"Chainlink Functions Router interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))\":{\"notice\":\"Fulfill the request by: - calling back the data that the Oracle returned to the client contract - pay the DON for processing the request\"},\"getAdminFee()\":{\"notice\":\"Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\"},\"getAllowListId()\":{\"notice\":\"The identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions\"},\"getContractById(bytes32)\":{\"notice\":\"Get the current contract given an ID\"},\"getProposedContractById(bytes32)\":{\"notice\":\"Get the proposed next contract given an ID\"},\"getProposedContractSet()\":{\"notice\":\"Return the latest proprosal set\"},\"isValidCallbackGasLimit(uint64,uint32)\":{\"notice\":\"Validate requested gas limit is below the subscription max.\"},\"proposeContractsUpdate(bytes32[],address[])\":{\"notice\":\"Proposes one or more updates to the contract routes\"},\"sendRequest(uint64,bytes,uint16,uint32,bytes32)\":{\"notice\":\"Sends a request using the provided subscriptionId\"},\"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)\":{\"notice\":\"Sends a request to the proposed contracts\"},\"setAllowListId(bytes32)\":{\"notice\":\"Set the identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions\"},\"updateContracts()\":{\"notice\":\"Updates the current contract routes to the proposed contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":\"IFunctionsRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"fulfill(bytes,bytes,uint96,uint96,address,(bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32))":{"notice":"Fulfill the request by: - calling back the data that the Oracle returned to the client contract - pay the DON for processing the request"},"getAdminFee()":{"notice":"Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network"},"getAllowListId()":{"notice":"The identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions"},"getContractById(bytes32)":{"notice":"Get the current contract given an ID"},"getProposedContractById(bytes32)":{"notice":"Get the proposed next contract given an ID"},"getProposedContractSet()":{"notice":"Return the latest proprosal set"},"isValidCallbackGasLimit(uint64,uint32)":{"notice":"Validate requested gas limit is below the subscription max."},"proposeContractsUpdate(bytes32[],address[])":{"notice":"Proposes one or more updates to the contract routes"},"sendRequest(uint64,bytes,uint16,uint32,bytes32)":{"notice":"Sends a request using the provided subscriptionId"},"sendRequestToProposed(uint64,bytes,uint16,uint32,bytes32)":{"notice":"Sends a request to the proposed contracts"},"setAllowListId(bytes32)":{"notice":"Set the identifier of the route to retrieve the address of the access control contract The access control contract controls which accounts can manage subscriptions"},"updateContracts()":{"notice":"Updates the current contract routes to the proposed contracts"}},"version":1}}},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol":{"FunctionsRequest":{"abi":[{"inputs":[],"name":"EmptyArgs","type":"error"},{"inputs":[],"name":"EmptySecrets","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"NoInlineSecrets","type":"error"},{"inputs":[],"name":"REQUEST_DATA_VERSION","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"Library for encoding the input data of a Functions request into CBOR","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608c610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80635d641dfc146038575b600080fd5b603f600181565b60405161ffff909116815260200160405180910390f3fea264697066735822122000ca6cb2b1ca6b2f1777462c6e43bf527457f5638cf66b482170e84da8737e7164736f6c63430008140033","opcodes":"PUSH1 0x8C PUSH2 0x38 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5D641DFC EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3F PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xCA PUSH13 0xB2B1CA6B2F1777462C6E43BF52 PUSH21 0x57F5638CF66B482170E84DA8737E7164736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"212:6086:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;212:6086:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@REQUEST_DATA_VERSION_277":{"entryPoint":null,"id":277,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:212:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"121:89:27","statements":[{"nodeType":"YulAssignment","src":"131:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"143:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"154:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"139:3:27"},"nodeType":"YulFunctionCall","src":"139:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"131:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"188:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"196:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"184:3:27"},"nodeType":"YulFunctionCall","src":"184:19:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:27"},"nodeType":"YulFunctionCall","src":"166:38:27"},"nodeType":"YulExpressionStatement","src":"166:38:27"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"90:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"101:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"112:4:27","type":""}],"src":"14:196:27"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80635d641dfc146038575b600080fd5b603f600181565b60405161ffff909116815260200160405180910390f3fea264697066735822122000ca6cb2b1ca6b2f1777462c6e43bf527457f5638cf66b482170e84da8737e7164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5D641DFC EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3F PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0xCA PUSH13 0xB2B1CA6B2F1777462C6E43BF52 PUSH21 0x57F5638CF66B482170E84DA8737E7164736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"212:6086:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;276:47;;322:1;276:47;;;;;196:6:27;184:19;;;166:38;;154:2;139:18;276:47:3;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"28000","executionCost":"112","totalCost":"28112"},"external":{"REQUEST_DATA_VERSION()":"154"},"internal":{"addDONHostedSecrets(struct FunctionsRequest.Request memory,uint8,uint64)":"infinite","addSecretsReference(struct FunctionsRequest.Request memory,bytes memory)":"infinite","encodeCBOR(struct FunctionsRequest.Request memory)":"infinite","initializeRequest(struct FunctionsRequest.Request memory,enum FunctionsRequest.Location,enum FunctionsRequest.CodeLanguage,string memory)":"infinite","initializeRequestForInlineJavaScript(struct FunctionsRequest.Request memory,string memory)":"infinite","setArgs(struct FunctionsRequest.Request memory,string memory[] memory)":"infinite","setBytesArgs(struct FunctionsRequest.Request memory,bytes memory[] memory)":"infinite"}},"methodIdentifiers":{"REQUEST_DATA_VERSION()":"5d641dfc"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REQUEST_DATA_VERSION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for encoding the input data of a Functions request into CBOR\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":\"FunctionsRequest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol":{"FunctionsResponse":{"abi":[],"devdoc":{"kind":"dev","methods":{},"title":"Library of types that are used for fulfillment of a Functions request","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220babfaef50835c9ed17d4d6bc184cf0b27ad867542b5409603672b33544fac38b64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xBF 0xAE CREATE2 ADDMOD CALLDATALOAD 0xC9 0xED OR 0xD4 0xD6 0xBC XOR 0x4C CREATE 0xB2 PUSH27 0xD867542B5409603672B33544FAC38B64736F6C6343000814003300 ","sourceMap":"139:3258:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;139:3258:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220babfaef50835c9ed17d4d6bc184cf0b27ad867542b5409603672b33544fac38b64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xBF 0xAE CREATE2 ADDMOD CALLDATALOAD 0xC9 0xED OR 0xD4 0xD6 0xBC XOR 0x4C CREATE 0xB2 PUSH27 0xD867542B5409603672B33544FAC38B64736F6C6343000814003300 ","sourceMap":"139:3258:4:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library of types that are used for fulfillment of a Functions request\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":\"FunctionsResponse\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_806":{"entryPoint":null,"id":806,"parameterSlots":1,"returnSlots":0},"@_864":{"entryPoint":null,"id":864,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_948":{"entryPoint":197,"id":948,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":366,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1011:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:27","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:27"},"nodeType":"YulFunctionCall","src":"143:12:27"},"nodeType":"YulExpressionStatement","src":"143:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:27"},"nodeType":"YulFunctionCall","src":"112:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:27"},"nodeType":"YulFunctionCall","src":"108:32:27"},"nodeType":"YulIf","src":"105:52:27"},{"nodeType":"YulVariableDeclaration","src":"166:29:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:27"},"nodeType":"YulFunctionCall","src":"179:16:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:27"},"nodeType":"YulFunctionCall","src":"260:12:27"},"nodeType":"YulExpressionStatement","src":"260:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:27"},"nodeType":"YulFunctionCall","src":"239:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:27"},"nodeType":"YulFunctionCall","src":"235:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:27"},"nodeType":"YulFunctionCall","src":"224:31:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:27"},"nodeType":"YulFunctionCall","src":"214:42:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:27"},"nodeType":"YulFunctionCall","src":"207:50:27"},"nodeType":"YulIf","src":"204:70:27"},{"nodeType":"YulAssignment","src":"283:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:27"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:27","type":""}],"src":"14:290:27"},{"body":{"nodeType":"YulBlock","src":"483:174:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"500:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"511:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:27"},"nodeType":"YulFunctionCall","src":"493:21:27"},"nodeType":"YulExpressionStatement","src":"493:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"534:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"545:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"530:3:27"},"nodeType":"YulFunctionCall","src":"530:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"550:2:27","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"523:6:27"},"nodeType":"YulFunctionCall","src":"523:30:27"},"nodeType":"YulExpressionStatement","src":"523:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"573:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"584:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"569:3:27"},"nodeType":"YulFunctionCall","src":"569:18:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"589:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"562:6:27"},"nodeType":"YulFunctionCall","src":"562:54:27"},"nodeType":"YulExpressionStatement","src":"562:54:27"},{"nodeType":"YulAssignment","src":"625:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"637:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"648:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"633:3:27"},"nodeType":"YulFunctionCall","src":"633:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"625:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"460:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"474:4:27","type":""}],"src":"309:348:27"},{"body":{"nodeType":"YulBlock","src":"836:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"864:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"846:6:27"},"nodeType":"YulFunctionCall","src":"846:21:27"},"nodeType":"YulExpressionStatement","src":"846:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"887:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"898:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"883:3:27"},"nodeType":"YulFunctionCall","src":"883:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"903:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"876:6:27"},"nodeType":"YulFunctionCall","src":"876:30:27"},"nodeType":"YulExpressionStatement","src":"876:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"926:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"937:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"922:3:27"},"nodeType":"YulFunctionCall","src":"922:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"942:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"915:6:27"},"nodeType":"YulFunctionCall","src":"915:53:27"},"nodeType":"YulExpressionStatement","src":"915:53:27"},{"nodeType":"YulAssignment","src":"977:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"989:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1000:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"985:3:27"},"nodeType":"YulFunctionCall","src":"985:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"977:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"827:4:27","type":""}],"src":"662:347:27"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161045638038061045683398101604081905261002f9161016e565b8060006001600160a01b03821661008d5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100bd576100bd816100c5565b50505061019e565b336001600160a01b0382160361011d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610084565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561018057600080fd5b81516001600160a01b038116811461019757600080fd5b9392505050565b6102a9806101ad6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610243565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101f25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561025557600080fd5b81356001600160a01b038116811461026c57600080fd5b939250505056fea26469706673582212209818f1afa995622e7a20726b30f1be968e5628ad2be85fdff264d245155b89c864736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x456 CODESIZE SUB DUP1 PUSH2 0x456 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x16E JUMP JUMPDEST DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBD JUMPI PUSH2 0xBD DUP2 PUSH2 0xC5 JUMP JUMPDEST POP POP POP PUSH2 0x19E JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x11D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x84 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2A9 DUP1 PUSH2 0x1AD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x243 JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 XOR CALL 0xAF 0xA9 SWAP6 PUSH3 0x2E7A20 PUSH19 0x6B30F1BE968E5628AD2BE85FDFF264D245155B DUP10 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"240:141:5:-:0;;;298:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;355:8;373:1;-1:-1:-1;;;;;598:22:6;;590:59;;;;-1:-1:-1;;;590:59:6;;511:2:27;590:59:6;;;493:21:27;550:2;530:18;;;523:30;589:26;569:18;;;562:54;633:18;;590:59:6;;;;;;;;;656:7;:18;;-1:-1:-1;;;;;;656:18:6;-1:-1:-1;;;;;656:18:6;;;;;;;;;;684:26;;;680:79;;720:32;739:12;720:18;:32::i;:::-;481:282;;298:81:5;240:141;;1536:239:6;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;864:2:27;1641:52:6;;;846:21:27;903:2;883:18;;;876:30;942:25;922:18;;;915:53;985:18;;1641:52:6;662:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;-1:-1:-1;1758:7:6;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;1731:39:6;1536:239;:::o;14:290:27:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:27;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:27:o;662:347::-;240:141:5;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_948":{"entryPoint":410,"id":948,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_961":{"entryPoint":325,"id":961,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_914":{"entryPoint":130,"id":914,"parameterSlots":0,"returnSlots":0},"@owner_924":{"entryPoint":null,"id":924,"parameterSlots":0,"returnSlots":1},"@transferOwnership_878":{"entryPoint":305,"id":878,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":579,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1564:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:27","statements":[{"nodeType":"YulAssignment","src":"125:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:27"},"nodeType":"YulFunctionCall","src":"133:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:27"},"nodeType":"YulFunctionCall","src":"194:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:27"},"nodeType":"YulFunctionCall","src":"190:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:27"},"nodeType":"YulFunctionCall","src":"178:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:27"},"nodeType":"YulFunctionCall","src":"160:51:27"},"nodeType":"YulExpressionStatement","src":"160:51:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:27","type":""}],"src":"14:203:27"},{"body":{"nodeType":"YulBlock","src":"292:216:27","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:27"},"nodeType":"YulFunctionCall","src":"340:12:27"},"nodeType":"YulExpressionStatement","src":"340:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:27"},"nodeType":"YulFunctionCall","src":"309:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:27"},"nodeType":"YulFunctionCall","src":"305:32:27"},"nodeType":"YulIf","src":"302:52:27"},{"nodeType":"YulVariableDeclaration","src":"363:36:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:27"},"nodeType":"YulFunctionCall","src":"376:23:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:27"},"nodeType":"YulFunctionCall","src":"464:12:27"},"nodeType":"YulExpressionStatement","src":"464:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:27"},"nodeType":"YulFunctionCall","src":"443:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:27"},"nodeType":"YulFunctionCall","src":"439:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:27"},"nodeType":"YulFunctionCall","src":"428:31:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:27"},"nodeType":"YulFunctionCall","src":"418:42:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:27"},"nodeType":"YulFunctionCall","src":"411:50:27"},"nodeType":"YulIf","src":"408:70:27"},{"nodeType":"YulAssignment","src":"487:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:27"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:27","type":""}],"src":"222:286:27"},{"body":{"nodeType":"YulBlock","src":"687:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:27"},"nodeType":"YulFunctionCall","src":"697:21:27"},"nodeType":"YulExpressionStatement","src":"697:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:27"},"nodeType":"YulFunctionCall","src":"734:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:27"},"nodeType":"YulFunctionCall","src":"727:30:27"},"nodeType":"YulExpressionStatement","src":"727:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:27"},"nodeType":"YulFunctionCall","src":"773:18:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:27"},"nodeType":"YulFunctionCall","src":"766:52:27"},"nodeType":"YulExpressionStatement","src":"766:52:27"},{"nodeType":"YulAssignment","src":"827:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"839:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"850:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"835:3:27"},"nodeType":"YulFunctionCall","src":"835:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"827:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:27","type":""}],"src":"513:346:27"},{"body":{"nodeType":"YulBlock","src":"1038:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1048:6:27"},"nodeType":"YulFunctionCall","src":"1048:21:27"},"nodeType":"YulExpressionStatement","src":"1048:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:27"},"nodeType":"YulFunctionCall","src":"1085:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"1105:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:27"},"nodeType":"YulFunctionCall","src":"1078:30:27"},"nodeType":"YulExpressionStatement","src":"1078:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1124:3:27"},"nodeType":"YulFunctionCall","src":"1124:18:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1144:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1117:6:27"},"nodeType":"YulFunctionCall","src":"1117:52:27"},"nodeType":"YulExpressionStatement","src":"1117:52:27"},{"nodeType":"YulAssignment","src":"1178:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1190:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1201:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:27"},"nodeType":"YulFunctionCall","src":"1186:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1178:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:27","type":""}],"src":"864:346:27"},{"body":{"nodeType":"YulBlock","src":"1389:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:27"},"nodeType":"YulFunctionCall","src":"1399:21:27"},"nodeType":"YulExpressionStatement","src":"1399:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1440:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1451:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1436:3:27"},"nodeType":"YulFunctionCall","src":"1436:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1429:6:27"},"nodeType":"YulFunctionCall","src":"1429:30:27"},"nodeType":"YulExpressionStatement","src":"1429:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1479:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1475:3:27"},"nodeType":"YulFunctionCall","src":"1475:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1495:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1468:6:27"},"nodeType":"YulFunctionCall","src":"1468:53:27"},"nodeType":"YulExpressionStatement","src":"1468:53:27"},{"nodeType":"YulAssignment","src":"1530:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1542:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1553:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1538:3:27"},"nodeType":"YulFunctionCall","src":"1538:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1530:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1380:4:27","type":""}],"src":"1215:347:27"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610243565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101f25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561025557600080fd5b81356001600160a01b038116811461026c57600080fd5b939250505056fea26469706673582212209818f1afa995622e7a20726b30f1be968e5628ad2be85fdff264d245155b89c864736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x243 JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 XOR CALL 0xAF 0xA9 SWAP6 PUSH3 0x2E7A20 PUSH19 0x6B30F1BE968E5628AD2BE85FDFF264D245155B DUP10 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"240:141:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316:6;;;:::i;:::-;;1382:81;1429:7;1451;1382:81;;;-1:-1:-1;;;;;1451:7:6;;;160:51:27;;1382:81:6;;;;;148:2:27;1382:81:6;;;847:98;;;;;;:::i;:::-;;:::i;1026:316::-;1150:14;;-1:-1:-1;;;;;1150:14:6;1136:10;:28;1128:63;;;;-1:-1:-1;;;1128:63:6;;715:2:27;1128:63:6;;;697:21:27;754:2;734:18;;;727:30;-1:-1:-1;;;773:18:27;;;766:52;835:18;;1128:63:6;;;;;;;;;1198:16;1217:7;;1240:10;-1:-1:-1;;;;;;1230:20:6;;;;;;;-1:-1:-1;1256:27:6;;;;;;;1295:42;;-1:-1:-1;;;;;1217:7:6;;;;1240:10;;1217:7;;1295:42;;;1071:271;1026:316::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;-1:-1:-1;;;;;1932:7:6;1918:10;:21;1910:56;;;;-1:-1:-1;;;1910:56:6;;1066:2:27;1910:56:6;;;1048:21:27;1105:2;1085:18;;;1078:30;-1:-1:-1;;;1124:18:27;;;1117:52;1186:18;;1910:56:6;864:346:27;1910:56:6;1809:162::o;1536:239::-;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;1417:2:27;1641:52:6;;;1399:21:27;1456:2;1436:18;;;1429:30;1495:25;1475:18;;;1468:53;1538:18;;1641:52:6;1215:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;-1:-1:-1;1758:7:6;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;1731:39:6;1536:239;:::o;222:286:27:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:27;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:27:o"},"gasEstimates":{"creation":{"codeDepositCost":"136200","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52277","owner()":"2292","transferOwnership(address)":"30423"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":816,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":818,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_864":{"entryPoint":null,"id":864,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_948":{"entryPoint":193,"id":948,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":362,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":390,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1196:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:27","statements":[{"nodeType":"YulAssignment","src":"84:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:27"},"nodeType":"YulFunctionCall","src":"93:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:27"}]},{"body":{"nodeType":"YulBlock","src":"169:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:27"},"nodeType":"YulFunctionCall","src":"171:12:27"},"nodeType":"YulExpressionStatement","src":"171:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:27"},"nodeType":"YulFunctionCall","src":"150:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:27"},"nodeType":"YulFunctionCall","src":"146:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:27"},"nodeType":"YulFunctionCall","src":"135:31:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:27"},"nodeType":"YulFunctionCall","src":"125:42:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:27"},"nodeType":"YulFunctionCall","src":"118:50:27"},"nodeType":"YulIf","src":"115:70:27"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:27","type":""}],"src":"14:177:27"},{"body":{"nodeType":"YulBlock","src":"294:195:27","statements":[{"body":{"nodeType":"YulBlock","src":"340:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"349:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"352:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"342:6:27"},"nodeType":"YulFunctionCall","src":"342:12:27"},"nodeType":"YulExpressionStatement","src":"342:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"315:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"324:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"311:3:27"},"nodeType":"YulFunctionCall","src":"311:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"336:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"307:3:27"},"nodeType":"YulFunctionCall","src":"307:32:27"},"nodeType":"YulIf","src":"304:52:27"},{"nodeType":"YulAssignment","src":"365:50:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"405:9:27"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"375:29:27"},"nodeType":"YulFunctionCall","src":"375:40:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"365:6:27"}]},{"nodeType":"YulAssignment","src":"424:59:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:27"},"nodeType":"YulFunctionCall","src":"464:18:27"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"434:29:27"},"nodeType":"YulFunctionCall","src":"434:49:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"424:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"252:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"263:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"275:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"283:6:27","type":""}],"src":"196:293:27"},{"body":{"nodeType":"YulBlock","src":"668:174:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"685:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"696:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"678:6:27"},"nodeType":"YulFunctionCall","src":"678:21:27"},"nodeType":"YulExpressionStatement","src":"678:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"719:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"730:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"715:3:27"},"nodeType":"YulFunctionCall","src":"715:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"735:2:27","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"708:6:27"},"nodeType":"YulFunctionCall","src":"708:30:27"},"nodeType":"YulExpressionStatement","src":"708:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"758:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"769:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"754:3:27"},"nodeType":"YulFunctionCall","src":"754:18:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"774:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"747:6:27"},"nodeType":"YulFunctionCall","src":"747:54:27"},"nodeType":"YulExpressionStatement","src":"747:54:27"},{"nodeType":"YulAssignment","src":"810:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"822:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"833:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"818:3:27"},"nodeType":"YulFunctionCall","src":"818:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"810:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"645:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"659:4:27","type":""}],"src":"494:348:27"},{"body":{"nodeType":"YulBlock","src":"1021:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1038:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1031:6:27"},"nodeType":"YulFunctionCall","src":"1031:21:27"},"nodeType":"YulExpressionStatement","src":"1031:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1072:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1083:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1068:3:27"},"nodeType":"YulFunctionCall","src":"1068:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"1088:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1061:6:27"},"nodeType":"YulFunctionCall","src":"1061:30:27"},"nodeType":"YulExpressionStatement","src":"1061:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1111:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1122:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1107:3:27"},"nodeType":"YulFunctionCall","src":"1107:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1127:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1100:6:27"},"nodeType":"YulFunctionCall","src":"1100:53:27"},"nodeType":"YulExpressionStatement","src":"1100:53:27"},{"nodeType":"YulAssignment","src":"1162:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1185:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1170:3:27"},"nodeType":"YulFunctionCall","src":"1170:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1162:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"998:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1012:4:27","type":""}],"src":"847:347:27"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b5060405161047138038061047183398101604081905261002f91610186565b6001600160a01b03821661008a5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156100ba576100ba816100c1565b50506101b9565b336001600160a01b038216036101195760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610081565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b038116811461018157600080fd5b919050565b6000806040838503121561019957600080fd5b6101a28361016a565b91506101b06020840161016a565b90509250929050565b6102a9806101c86000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610243565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101f25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561025557600080fd5b81356001600160a01b038116811461026c57600080fd5b939250505056fea2646970667358221220c2e20ec2d53e60d400ede1e90876f35cdce4f62de8ff3b3e6df5f62f3d9e8b9964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x471 CODESIZE SUB DUP1 PUSH2 0x471 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x186 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH2 0xBA JUMPI PUSH2 0xBA DUP2 PUSH2 0xC1 JUMP JUMPDEST POP POP PUSH2 0x1B9 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x119 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x81 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A2 DUP4 PUSH2 0x16A JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0 PUSH1 0x20 DUP5 ADD PUSH2 0x16A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A9 DUP1 PUSH2 0x1C8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x243 JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xE2 0xE 0xC2 0xD5 RETURNDATACOPY PUSH1 0xD4 STOP 0xED 0xE1 0xE9 ADDMOD PUSH23 0xF35CDCE4F62DE8FF3B3E6DF5F62F3D9E8B9964736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1893:6:-:0;;;481:282;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;598:22:6;;590:59;;;;-1:-1:-1;;;590:59:6;;696:2:27;590:59:6;;;678:21:27;735:2;715:18;;;708:30;774:26;754:18;;;747:54;818:18;;590:59:6;;;;;;;;;656:7;:18;;-1:-1:-1;;;;;;656:18:6;-1:-1:-1;;;;;656:18:6;;;;;;;;;;684:26;;;680:79;;720:32;739:12;720:18;:32::i;:::-;481:282;;216:1893;;1536:239;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;1049:2:27;1641:52:6;;;1031:21:27;1088:2;1068:18;;;1061:30;1127:25;1107:18;;;1100:53;1170:18;;1641:52:6;847:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;-1:-1:-1;1758:7:6;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;1731:39:6;1536:239;:::o;14:177:27:-;93:13;;-1:-1:-1;;;;;135:31:27;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;847:347::-;216:1893:6;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_948":{"entryPoint":410,"id":948,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_961":{"entryPoint":325,"id":961,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_914":{"entryPoint":130,"id":914,"parameterSlots":0,"returnSlots":0},"@owner_924":{"entryPoint":null,"id":924,"parameterSlots":0,"returnSlots":1},"@transferOwnership_878":{"entryPoint":305,"id":878,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":579,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1564:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:102:27","statements":[{"nodeType":"YulAssignment","src":"125:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:27"},"nodeType":"YulFunctionCall","src":"133:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"198:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"203:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"194:3:27"},"nodeType":"YulFunctionCall","src":"194:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"207:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"190:3:27"},"nodeType":"YulFunctionCall","src":"190:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:27"},"nodeType":"YulFunctionCall","src":"178:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:27"},"nodeType":"YulFunctionCall","src":"160:51:27"},"nodeType":"YulExpressionStatement","src":"160:51:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:27","type":""}],"src":"14:203:27"},{"body":{"nodeType":"YulBlock","src":"292:216:27","statements":[{"body":{"nodeType":"YulBlock","src":"338:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"347:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"350:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"340:6:27"},"nodeType":"YulFunctionCall","src":"340:12:27"},"nodeType":"YulExpressionStatement","src":"340:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"313:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"322:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"309:3:27"},"nodeType":"YulFunctionCall","src":"309:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"334:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"305:3:27"},"nodeType":"YulFunctionCall","src":"305:32:27"},"nodeType":"YulIf","src":"302:52:27"},{"nodeType":"YulVariableDeclaration","src":"363:36:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"389:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"376:12:27"},"nodeType":"YulFunctionCall","src":"376:23:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"367:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"471:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"474:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"464:6:27"},"nodeType":"YulFunctionCall","src":"464:12:27"},"nodeType":"YulExpressionStatement","src":"464:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"421:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"432:5:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"447:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"452:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"443:3:27"},"nodeType":"YulFunctionCall","src":"443:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"456:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"439:3:27"},"nodeType":"YulFunctionCall","src":"439:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"428:3:27"},"nodeType":"YulFunctionCall","src":"428:31:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"418:2:27"},"nodeType":"YulFunctionCall","src":"418:42:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"411:6:27"},"nodeType":"YulFunctionCall","src":"411:50:27"},"nodeType":"YulIf","src":"408:70:27"},{"nodeType":"YulAssignment","src":"487:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"497:5:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"487:6:27"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"258:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"269:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"281:6:27","type":""}],"src":"222:286:27"},{"body":{"nodeType":"YulBlock","src":"687:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"704:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"715:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"697:6:27"},"nodeType":"YulFunctionCall","src":"697:21:27"},"nodeType":"YulExpressionStatement","src":"697:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"738:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"749:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:27"},"nodeType":"YulFunctionCall","src":"734:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"754:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:27"},"nodeType":"YulFunctionCall","src":"727:30:27"},"nodeType":"YulExpressionStatement","src":"727:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"777:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"788:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"773:3:27"},"nodeType":"YulFunctionCall","src":"773:18:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"793:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"766:6:27"},"nodeType":"YulFunctionCall","src":"766:52:27"},"nodeType":"YulExpressionStatement","src":"766:52:27"},{"nodeType":"YulAssignment","src":"827:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"839:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"850:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"835:3:27"},"nodeType":"YulFunctionCall","src":"835:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"827:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"664:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"678:4:27","type":""}],"src":"513:346:27"},{"body":{"nodeType":"YulBlock","src":"1038:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1055:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1066:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1048:6:27"},"nodeType":"YulFunctionCall","src":"1048:21:27"},"nodeType":"YulExpressionStatement","src":"1048:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1089:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1100:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1085:3:27"},"nodeType":"YulFunctionCall","src":"1085:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"1105:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1078:6:27"},"nodeType":"YulFunctionCall","src":"1078:30:27"},"nodeType":"YulExpressionStatement","src":"1078:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1139:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1124:3:27"},"nodeType":"YulFunctionCall","src":"1124:18:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1144:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1117:6:27"},"nodeType":"YulFunctionCall","src":"1117:52:27"},"nodeType":"YulExpressionStatement","src":"1117:52:27"},{"nodeType":"YulAssignment","src":"1178:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1190:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1201:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1186:3:27"},"nodeType":"YulFunctionCall","src":"1186:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1178:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1015:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1029:4:27","type":""}],"src":"864:346:27"},{"body":{"nodeType":"YulBlock","src":"1389:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1406:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1417:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:27"},"nodeType":"YulFunctionCall","src":"1399:21:27"},"nodeType":"YulExpressionStatement","src":"1399:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1440:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1451:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1436:3:27"},"nodeType":"YulFunctionCall","src":"1436:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"1456:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1429:6:27"},"nodeType":"YulFunctionCall","src":"1429:30:27"},"nodeType":"YulExpressionStatement","src":"1429:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1479:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1490:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1475:3:27"},"nodeType":"YulFunctionCall","src":"1475:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"1495:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1468:6:27"},"nodeType":"YulFunctionCall","src":"1468:53:27"},"nodeType":"YulExpressionStatement","src":"1468:53:27"},{"nodeType":"YulAssignment","src":"1530:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1542:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1553:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1538:3:27"},"nodeType":"YulFunctionCall","src":"1538:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1530:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1380:4:27","type":""}],"src":"1215:347:27"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006f575b600080fd5b61004e610082565b005b600054604080516001600160a01b039092168252519081900360200190f35b61004e61007d366004610243565b610131565b6001546001600160a01b031633146100da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064015b60405180910390fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b610139610145565b6101428161019a565b50565b6000546001600160a01b031633146101985760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016100d1565b565b336001600160a01b038216036101f25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100d1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561025557600080fd5b81356001600160a01b038116811461026c57600080fd5b939250505056fea2646970667358221220c2e20ec2d53e60d400ede1e90876f35cdce4f62de8ff3b3e6df5f62f3d9e8b9964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x7D CALLDATASIZE PUSH1 0x4 PUSH2 0x243 JUMP JUMPDEST PUSH2 0x131 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP4 AND DUP3 OR DUP5 SSTORE PUSH1 0x1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 SWAP1 SWAP2 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 POP JUMP JUMPDEST PUSH2 0x139 PUSH2 0x145 JUMP JUMPDEST PUSH2 0x142 DUP2 PUSH2 0x19A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x198 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1F2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xD1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP2 SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 0xE2 0xE 0xC2 0xD5 RETURNDATACOPY PUSH1 0xD4 STOP 0xED 0xE1 0xE9 ADDMOD PUSH23 0xF35CDCE4F62DE8FF3B3E6DF5F62F3D9E8B9964736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1893:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1026:316;;;:::i;:::-;;1382:81;1429:7;1451;1382:81;;;-1:-1:-1;;;;;1451:7:6;;;160:51:27;;1382:81:6;;;;;148:2:27;1382:81:6;;;847:98;;;;;;:::i;:::-;;:::i;1026:316::-;1150:14;;-1:-1:-1;;;;;1150:14:6;1136:10;:28;1128:63;;;;-1:-1:-1;;;1128:63:6;;715:2:27;1128:63:6;;;697:21:27;754:2;734:18;;;727:30;-1:-1:-1;;;773:18:27;;;766:52;835:18;;1128:63:6;;;;;;;;;1198:16;1217:7;;1240:10;-1:-1:-1;;;;;;1230:20:6;;;;;;;-1:-1:-1;1256:27:6;;;;;;;1295:42;;-1:-1:-1;;;;;1217:7:6;;;;1240:10;;1217:7;;1295:42;;;1071:271;1026:316::o;847:98::-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;-1:-1:-1;;;;;1932:7:6;1918:10;:21;1910:56;;;;-1:-1:-1;;;1910:56:6;;1066:2:27;1910:56:6;;;1048:21:27;1105:2;1085:18;;;1078:30;-1:-1:-1;;;1124:18:27;;;1117:52;1186:18;;1910:56:6;864:346:27;1910:56:6;1809:162::o;1536:239::-;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;1417:2:27;1641:52:6;;;1399:21:27;1456:2;1436:18;;;1429:30;1495:25;1475:18;;;1468:53;1538:18;;1641:52:6;1215:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;-1:-1:-1;1758:7:6;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;1731:39:6;1536:239;:::o;222:286:27:-;281:6;334:2;322:9;313:7;309:23;305:32;302:52;;;350:1;347;340:12;302:52;376:23;;-1:-1:-1;;;;;428:31:27;;418:42;;408:70;;474:1;471;464:12;408:70;497:5;222:286;-1:-1:-1;;;222:286:27:o"},"gasEstimates":{"creation":{"codeDepositCost":"136200","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52277","owner()":"2292","transferOwnership(address)":"30423"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":816,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":818,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"IOwnable":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol":{"Buffer":{"abi":[],"devdoc":{"details":"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e814e3f8138f9ad613dc6191bc3199439424aa88a5a43f2ea59427cfbe2558b364736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 EQ 0xE3 0xF8 SGT DUP16 SWAP11 0xD6 SGT 0xDC PUSH2 0x91BC BALANCE SWAP10 NUMBER SWAP5 0x24 0xAA DUP9 0xA5 LOG4 EXTCODEHASH 0x2E 0xA5 SWAP5 0x27 0xCF 0xBE 0x25 PC 0xB3 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"445:8435:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;445:8435:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e814e3f8138f9ad613dc6191bc3199439424aa88a5a43f2ea59427cfbe2558b364736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 EQ 0xE3 0xF8 SGT DUP16 SWAP11 0xD6 SGT 0xDC PUSH2 0x91BC BALANCE SWAP10 NUMBER SWAP5 0x24 0xAA DUP9 0xA5 LOG4 EXTCODEHASH 0x2E 0xA5 SWAP5 0x27 0xCF 0xBE 0x25 PC 0xB3 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"445:8435:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"append(struct Buffer.buffer memory,bytes memory)":"infinite","append(struct Buffer.buffer memory,bytes memory,uint256)":"infinite","append(struct Buffer.buffer memory,bytes32,uint256)":"infinite","appendBytes20(struct Buffer.buffer memory,bytes20)":"infinite","appendBytes32(struct Buffer.buffer memory,bytes32)":"infinite","appendInt(struct Buffer.buffer memory,uint256,uint256)":"infinite","appendUint8(struct Buffer.buffer memory,uint8)":"infinite","fromBytes(bytes memory)":"infinite","init(struct Buffer.buffer memory,uint256)":"infinite","resize(struct Buffer.buffer memory,uint256)":"infinite","truncate(struct Buffer.buffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for working with mutable byte buffers in Solidity. Byte buffers are mutable and expandable, and provide a variety of primitives for appending to them. At any time you can fetch a bytes object containing the current contents of the buffer. The bytes object should not be stored between operations, as it may change due to resizing of the buffer.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":\"Buffer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol":{"CBOR":{"abi":[],"devdoc":{"details":"A library for populating CBOR encoded payload in Solidity. https://datatracker.ietf.org/doc/html/rfc7049 The library offers various write* and start* methods to encode values of different types. The resulted buffer can be obtained with data() method. Encoding of primitive types is staightforward, whereas encoding of sequences can result in an invalid CBOR if start/write/end flow is violated. For the purpose of gas saving, the library does not verify start/write/end flow internally, except for nested start/end pairs.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cc69d66b818722983c7ef12076c7278628f9279f51e3e18f78e20f451c8acae764736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC PUSH10 0xD66B818722983C7EF120 PUSH23 0xC7278628F9279F51E3E18F78E20F451C8ACAE764736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"666:6764:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;666:6764:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cc69d66b818722983c7ef12076c7278628f9279f51e3e18f78e20f451c8acae764736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC PUSH10 0xD66B818722983C7EF120 PUSH23 0xC7278628F9279F51E3E18F78E20F451C8ACAE764736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"666:6764:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"create(uint256)":"infinite","data(struct CBOR.CBORBuffer memory)":"infinite","endSequence(struct CBOR.CBORBuffer memory)":"infinite","startArray(struct CBOR.CBORBuffer memory)":"infinite","startFixedArray(struct CBOR.CBORBuffer memory,uint64)":"infinite","startFixedMap(struct CBOR.CBORBuffer memory,uint64)":"infinite","startMap(struct CBOR.CBORBuffer memory)":"infinite","writeBool(struct CBOR.CBORBuffer memory,bool)":"infinite","writeBytes(struct CBOR.CBORBuffer memory,bytes memory)":"infinite","writeContentFree(struct CBOR.CBORBuffer memory,uint8)":"infinite","writeDefiniteLengthType(struct CBOR.CBORBuffer memory,uint8,uint64)":"infinite","writeFixedNumeric(struct CBOR.CBORBuffer memory,uint8,uint64)":"infinite","writeIndefiniteLengthType(struct CBOR.CBORBuffer memory,uint8)":"infinite","writeInt256(struct CBOR.CBORBuffer memory,int256)":"infinite","writeInt64(struct CBOR.CBORBuffer memory,int64)":"infinite","writeKVArray(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVBool(struct CBOR.CBORBuffer memory,string memory,bool)":"infinite","writeKVBytes(struct CBOR.CBORBuffer memory,string memory,bytes memory)":"infinite","writeKVInt256(struct CBOR.CBORBuffer memory,string memory,int256)":"infinite","writeKVInt64(struct CBOR.CBORBuffer memory,string memory,int64)":"infinite","writeKVMap(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVNull(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeKVString(struct CBOR.CBORBuffer memory,string memory,string memory)":"infinite","writeKVUInt256(struct CBOR.CBORBuffer memory,string memory,uint256)":"infinite","writeKVUInt64(struct CBOR.CBORBuffer memory,string memory,uint64)":"infinite","writeKVUndefined(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeNull(struct CBOR.CBORBuffer memory)":"infinite","writeString(struct CBOR.CBORBuffer memory,string memory)":"infinite","writeUInt256(struct CBOR.CBORBuffer memory,uint256)":"infinite","writeUInt64(struct CBOR.CBORBuffer memory,uint64)":"infinite","writeUndefined(struct CBOR.CBORBuffer memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"A library for populating CBOR encoded payload in Solidity. https://datatracker.ietf.org/doc/html/rfc7049 The library offers various write* and start* methods to encode values of different types. The resulted buffer can be obtained with data() method. Encoding of primitive types is staightforward, whereas encoding of sequences can result in an invalid CBOR if start/write/end flow is violated. For the purpose of gas saving, the library does not verify start/write/end flow internally, except for nested start/end pairs.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":\"CBOR\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol":{"VRFConsumerBaseV2Plus":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"coordinator","type":"address"}],"name":"OnlyOwnerOrCoordinator","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"vrfCoordinator","type":"address"}],"name":"CoordinatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"s_vrfCoordinator","outputs":[{"internalType":"contract IVRFCoordinatorV2Plus","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_vrfCoordinator","type":"address"}],"name":"setCoordinator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinatorV2Plus.2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBaseV2Plus, and caninitialize VRFConsumerBaseV2Plus's attributes in their constructor asshown:contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {constructor(<other arguments>, address _vrfCoordinator, address _subOwner)VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create a subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords, extraArgs),see (IVRFCoordinatorV2Plus for a description of the arguments).Once the VRFCoordinatorV2Plus has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","s_vrfCoordinator()":"9eccacf6","setCoordinator(address)":"8ea98117","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinatorV2Plus.2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBaseV2Plus, and caninitialize VRFConsumerBaseV2Plus's attributes in their constructor asshown:contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {constructor(<other arguments>, address _vrfCoordinator, address _subOwner)VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create a subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords, extraArgs),see (IVRFCoordinatorV2Plus for a description of the arguments).Once the VRFCoordinatorV2Plus has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":\"VRFConsumerBaseV2Plus\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":816,"contract":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol:VRFConsumerBaseV2Plus","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":818,"contract":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol:VRFConsumerBaseV2Plus","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"},{"astId":2299,"contract":"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol:VRFConsumerBaseV2Plus","label":"s_vrfCoordinator","offset":0,"slot":"2","type":"t_contract(IVRFCoordinatorV2Plus)2448"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IVRFCoordinatorV2Plus)2448":{"encoding":"inplace","label":"contract IVRFCoordinatorV2Plus","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"setCoordinator(address)":{"notice":"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."}},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol":{"IVRFCoordinatorV2Plus":{"abi":[{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"fundSubscriptionWithNative","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"maxCount","type":"uint256"}],"name":"getActiveSubscriptionIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint96","name":"nativeBalance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"uint16","name":"requestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"},{"internalType":"bytes","name":"extraArgs","type":"bytes"}],"internalType":"struct VRFV2PlusClient.RandomWordsRequest","name":"req","type":"tuple"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint256,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint256,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);","returns":{"subId":"- A unique subscription id."}},"fundSubscriptionWithNative(uint256)":{"params":{"subId":"- ID of the subscription"}},"getActiveSubscriptionIds(uint256,uint256)":{"details":"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state","params":{"maxCount":"maximum number of subscriptions to return, 0 to return all","startIndex":"index of the subscription to start from"}},"getSubscription(uint256)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","nativeBalance":"- native balance of the subscription in wei.","owner":"- owner of the subscription.","reqCount":"- Requests count of subscription."}},"removeConsumer(uint256,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))":{"params":{"req":"- a struct containing following fields for randomness request: keyHash - Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost. subId  - The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash. requestConfirmations - How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200]. callbackGasLimit - How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit] numWords - The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle. extraArgs - abi-encoded extra args"},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint256,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint256)":"b2a7cac5","addConsumer(uint256,address)":"bec4c08c","cancelSubscription(uint256,address)":"0ae09540","createSubscription()":"a21a23e4","fundSubscriptionWithNative(uint256)":"95b55cfc","getActiveSubscriptionIds(uint256,uint256)":"aefb212f","getSubscription(uint256)":"dc311dd3","pendingRequestExists(uint256)":"41af6c87","removeConsumer(uint256,address)":"cb631797","requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))":"9b1c385e","requestSubscriptionOwnerTransfer(uint256,address)":"dac83d29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct VRFV2PlusClient.RandomWordsRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- Requests count of subscription.\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))\":{\"params\":{\"req\":\"- a struct containing following fields for randomness request: keyHash - Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost. subId  - The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash. requestConfirmations - How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200]. callbackGasLimit - How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit] numWords - The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle. extraArgs - abi-encoded extra args\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":\"IVRFCoordinatorV2Plus\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"notice":"Accept subscription owner transfer."},"addConsumer(uint256,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint256,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"fundSubscriptionWithNative(uint256)":{"notice":"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."},"getActiveSubscriptionIds(uint256,uint256)":{"notice":"Paginate through all active VRF subscriptions."},"getSubscription(uint256)":{"notice":"Get a VRF subscription."},"removeConsumer(uint256,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint256,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol":{"IVRFMigratableConsumerV2Plus":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"vrfCoordinator","type":"address"}],"name":"CoordinatorSet","type":"event"},{"inputs":[{"internalType":"address","name":"vrfCoordinator","type":"address"}],"name":"setCoordinator","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This interface is designed to be used in VRFConsumerBaseV2Plus.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"setCoordinator(address)":"8ea98117"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface is designed to be used in VRFConsumerBaseV2Plus.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"}},\"notice\":\"The IVRFMigratableConsumerV2Plus interface defines themethod required to be implemented by all V2Plus consumers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":\"IVRFMigratableConsumerV2Plus\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"setCoordinator(address)":{"notice":"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"}},"notice":"The IVRFMigratableConsumerV2Plus interface defines themethod required to be implemented by all V2Plus consumers.","version":1}}},"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol":{"IVRFSubscriptionV2Plus":{"abi":[{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"fundSubscriptionWithNative","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"maxCount","type":"uint256"}],"name":"getActiveSubscriptionIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint96","name":"nativeBalance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint256,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint256,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);","returns":{"subId":"- A unique subscription id."}},"fundSubscriptionWithNative(uint256)":{"params":{"subId":"- ID of the subscription"}},"getActiveSubscriptionIds(uint256,uint256)":{"details":"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state","params":{"maxCount":"maximum number of subscriptions to return, 0 to return all","startIndex":"index of the subscription to start from"}},"getSubscription(uint256)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","nativeBalance":"- native balance of the subscription in wei.","owner":"- owner of the subscription.","reqCount":"- Requests count of subscription."}},"removeConsumer(uint256,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestSubscriptionOwnerTransfer(uint256,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint256)":"b2a7cac5","addConsumer(uint256,address)":"bec4c08c","cancelSubscription(uint256,address)":"0ae09540","createSubscription()":"a21a23e4","fundSubscriptionWithNative(uint256)":"95b55cfc","getActiveSubscriptionIds(uint256,uint256)":"aefb212f","getSubscription(uint256)":"dc311dd3","pendingRequestExists(uint256)":"41af6c87","removeConsumer(uint256,address)":"cb631797","requestSubscriptionOwnerTransfer(uint256,address)":"dac83d29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- Requests count of subscription.\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"notice\":\"The IVRFSubscriptionV2Plus interface defines the subscriptionrelated methods implemented by the V2Plus coordinator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":\"IVRFSubscriptionV2Plus\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"notice":"Accept subscription owner transfer."},"addConsumer(uint256,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint256,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"fundSubscriptionWithNative(uint256)":{"notice":"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."},"getActiveSubscriptionIds(uint256,uint256)":{"notice":"Paginate through all active VRF subscriptions."},"getSubscription(uint256)":{"notice":"Get a VRF subscription."},"removeConsumer(uint256,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestSubscriptionOwnerTransfer(uint256,address)":{"notice":"Request subscription owner transfer."}},"notice":"The IVRFSubscriptionV2Plus interface defines the subscriptionrelated methods implemented by the V2Plus coordinator.","version":1}}},"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol":{"VRFV2PlusClient":{"abi":[{"inputs":[],"name":"EXTRA_ARGS_V1_TAG","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60b1610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f7514ab4146038575b600080fd5b605e7f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa81565b6040516001600160e01b0319909116815260200160405180910390f3fea2646970667358221220ef3fc9f3a57593332d8eb53211d3e99907c6340f107a61caecf6d5e42dc07df864736f6c63430008140033","opcodes":"PUSH1 0xB1 PUSH2 0x38 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF7514AB4 EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5E PUSH32 0x92FD13387C7FE7BEFBC38D303D6468778FB9731BC4583F17D92989C6FCFDEAAA DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF EXTCODEHASH 0xC9 RETURN 0xA5 PUSH22 0x93332D8EB53211D3E99907C6340F107A61CAECF6D5E4 0x2D 0xC0 PUSH30 0xF864736F6C63430008140033000000000000000000000000000000000000 ","sourceMap":"82:558:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;82:558:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@EXTRA_ARGS_V1_TAG_2561":{"entryPoint":null,"id":2561,"parameterSlots":0,"returnSlots":0},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:226:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"121:103:27","statements":[{"nodeType":"YulAssignment","src":"131:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"143:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"154:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"139:3:27"},"nodeType":"YulFunctionCall","src":"139:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"131:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"188:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"200:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"205:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"196:3:27"},"nodeType":"YulFunctionCall","src":"196:20:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"184:3:27"},"nodeType":"YulFunctionCall","src":"184:33:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:27"},"nodeType":"YulFunctionCall","src":"166:52:27"},"nodeType":"YulExpressionStatement","src":"166:52:27"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"90:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"101:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"112:4:27","type":""}],"src":"14:210:27"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f7514ab4146038575b600080fd5b605e7f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa81565b6040516001600160e01b0319909116815260200160405180910390f3fea2646970667358221220ef3fc9f3a57593332d8eb53211d3e99907c6340f107a61caecf6d5e42dc07df864736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xF7514AB4 EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5E PUSH32 0x92FD13387C7FE7BEFBC38D303D6468778FB9731BC4583F17D92989C6FCFDEAAA DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEF EXTCODEHASH 0xC9 RETURN 0xA5 PUSH22 0x93332D8EB53211D3E99907C6340F107A61CAECF6D5E4 0x2D 0xC0 PUSH30 0xF864736F6C63430008140033000000000000000000000000000000000000 ","sourceMap":"82:558:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;161:79;;211:28;161:79;;;;;-1:-1:-1;;;;;;184:33:27;;;166:52;;154:2;139:18;161:79:14;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"35400","executionCost":"118","totalCost":"35518"},"external":{"EXTRA_ARGS_V1_TAG()":"169"},"internal":{"_argsToBytes(struct VRFV2PlusClient.ExtraArgsV1 memory)":"infinite"}},"methodIdentifiers":{"EXTRA_ARGS_V1_TAG()":"f7514ab4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EXTRA_ARGS_V1_TAG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":\"VRFV2PlusClient\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2763,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2765,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2769,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2773,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2777,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2783,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122014361ae278094b127bedfe2e8cb2fd31667231c7b831bedf7b6576e352ff5d4464736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ CALLDATASIZE BYTE 0xE2 PUSH25 0x94B127BEDFE2E8CB2FD31667231C7B831BEDF7B6576E352FF 0x5D PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"251:2847:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205668e942167f71b57b39fdd3181a46cc44d9e606ae111ad83102b2d9038f111564736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP PUSH9 0xE942167F71B57B39FD 0xD3 XOR BYTE CHAINID 0xCC PREVRANDAO 0xD9 0xE6 MOD 0xAE GT BYTE 0xD8 BALANCE MUL 0xB2 0xD9 SUB DUP16 GT ISZERO PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"203:14914:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f4964af4e40dcf6c065c71071b1bffd923984b12e9cb29e4e7ca16d1e7e7840264736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DELEGATECALL SWAP7 0x4A DELEGATECALL 0xE4 0xD 0xCF PUSH13 0x65C71071B1BFFD923984B12E9 0xCB 0x29 0xE4 0xE7 0xCA AND 0xD1 0xE7 0xE7 DUP5 MUL PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"216:1047:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/EnterTheChainlinkNFTMultiverse.sol":{"EnterTheChainlinkNFTMultiverse":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[],"name":"EmptySource","type":"error"},{"inputs":[],"name":"NoInlineSecrets","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"coordinator","type":"address"}],"name":"OnlyOwnerOrCoordinator","type":"error"},{"inputs":[],"name":"OnlyRouterCanFulfill","type":"error"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"UnexpectedRequestID","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"vrfCoordinator","type":"address"}],"name":"CoordinatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"RequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"id","type":"bytes32"}],"name":"RequestSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"RequestSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"apiSource","type":"string"}],"name":"appendApiSource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"arbitrumSepoliaKeyHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"chainlinkFunctionsRequestIdTracker","outputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"userWallet","type":"address"},{"internalType":"bool","name":"isPending","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"chainlinkVRFRequestIdTracker","outputs":[{"internalType":"bool","name":"fulfilled","type":"bool"},{"internalType":"bool","name":"exists","type":"bool"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"userWallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"disneySource","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"functionCallbackLastError","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"functionCallbackLastRequestId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"functionCallbackLastResponse","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"functionGasLimit","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"gameOfThronesSource","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"bytes","name":"err","type":"bytes"}],"name":"handleOracleFulfillment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"hpSource","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isPaused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastFunctionCallbackStringResult","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userWallet","type":"address"}],"name":"mintRandomNFTRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"multiverseApiSources","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pokeSource","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"removeApiSource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_vrfCoordinator","outputs":[{"internalType":"contract IVRFCoordinatorV2Plus","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_vrfCoordinator","type":"address"}],"name":"setCoordinator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenIdCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenIdToNFTData","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"string","name":"apiSource","type":"string"}],"name":"updateApiSource","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vrfCallbackGasLimit","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vrfCoordinator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vrfLastRequestId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vrfNumWords","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vrfRequestConfirmations","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vrfRequestIds","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vrfSubscriptionId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"handleOracleFulfillment(bytes32,bytes,bytes)":{"details":"Either response or error parameter will be set, but never both.","params":{"err":"Aggregated error either from the request's source code or from the execution pipeline.","requestId":"The requestId returned by FunctionsClient.sendRequest().","response":"Aggregated response from the request's source code."}},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2327":{"entryPoint":null,"id":2327,"parameterSlots":1,"returnSlots":0},"@_2800":{"entryPoint":null,"id":2800,"parameterSlots":2,"returnSlots":0},"@_39":{"entryPoint":null,"id":39,"parameterSlots":1,"returnSlots":0},"@_5563":{"entryPoint":null,"id":5563,"parameterSlots":0,"returnSlots":0},"@_806":{"entryPoint":null,"id":806,"parameterSlots":1,"returnSlots":0},"@_864":{"entryPoint":null,"id":864,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_948":{"entryPoint":1000,"id":948,"parameterSlots":1,"returnSlots":0},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1254,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1337,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage":{"entryPoint":1541,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1194,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":1172,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4877:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:27"},"nodeType":"YulFunctionCall","src":"66:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:27"},"nodeType":"YulFunctionCall","src":"56:31:27"},"nodeType":"YulExpressionStatement","src":"56:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:27"},"nodeType":"YulFunctionCall","src":"96:15:27"},"nodeType":"YulExpressionStatement","src":"96:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:27"},"nodeType":"YulFunctionCall","src":"120:15:27"},"nodeType":"YulExpressionStatement","src":"120:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:27"},{"body":{"nodeType":"YulBlock","src":"201:325:27","statements":[{"nodeType":"YulAssignment","src":"211:22:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"225:1:27","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"228:4:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"221:3:27"},"nodeType":"YulFunctionCall","src":"221:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"211:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"242:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"272:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"268:3:27"},"nodeType":"YulFunctionCall","src":"268:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"246:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"319:31:27","statements":[{"nodeType":"YulAssignment","src":"321:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"335:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"343:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"331:3:27"},"nodeType":"YulFunctionCall","src":"331:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"321:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"299:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"292:6:27"},"nodeType":"YulFunctionCall","src":"292:26:27"},"nodeType":"YulIf","src":"289:61:27"},{"body":{"nodeType":"YulBlock","src":"409:111:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"430:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"442:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"433:3:27"},"nodeType":"YulFunctionCall","src":"433:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"423:6:27"},"nodeType":"YulFunctionCall","src":"423:31:27"},"nodeType":"YulExpressionStatement","src":"423:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"474:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"477:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"467:6:27"},"nodeType":"YulFunctionCall","src":"467:15:27"},"nodeType":"YulExpressionStatement","src":"467:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"502:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"505:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"495:6:27"},"nodeType":"YulFunctionCall","src":"495:15:27"},"nodeType":"YulExpressionStatement","src":"495:15:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"365:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"388:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"396:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"385:2:27"},"nodeType":"YulFunctionCall","src":"385:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"362:2:27"},"nodeType":"YulFunctionCall","src":"362:38:27"},"nodeType":"YulIf","src":"359:161:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"181:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"190:6:27","type":""}],"src":"146:380:27"},{"body":{"nodeType":"YulBlock","src":"587:65:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"604:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"607:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"597:6:27"},"nodeType":"YulFunctionCall","src":"597:14:27"},"nodeType":"YulExpressionStatement","src":"597:14:27"},{"nodeType":"YulAssignment","src":"620:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"638:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"641:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"628:9:27"},"nodeType":"YulFunctionCall","src":"628:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"620:4:27"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"570:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"578:4:27","type":""}],"src":"531:121:27"},{"body":{"nodeType":"YulBlock","src":"738:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"771:425:27","statements":[{"nodeType":"YulVariableDeclaration","src":"785:11:27","value":{"kind":"number","nodeType":"YulLiteral","src":"795:1:27","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"789:2:27","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"816:2:27"},{"name":"array","nodeType":"YulIdentifier","src":"820:5:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:27"},"nodeType":"YulFunctionCall","src":"809:17:27"},"nodeType":"YulExpressionStatement","src":"809:17:27"},{"nodeType":"YulVariableDeclaration","src":"839:31:27","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"861:2:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"851:9:27"},"nodeType":"YulFunctionCall","src":"851:19:27"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"843:4:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"883:57:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"906:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"916:1:27","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"923:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"935:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"919:3:27"},"nodeType":"YulFunctionCall","src":"919:19:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"912:3:27"},"nodeType":"YulFunctionCall","src":"912:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:27"},"nodeType":"YulFunctionCall","src":"902:38:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"887:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"977:23:27","statements":[{"nodeType":"YulAssignment","src":"979:19:27","value":{"name":"data","nodeType":"YulIdentifier","src":"994:4:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"979:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"959:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"971:4:27","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"956:2:27"},"nodeType":"YulFunctionCall","src":"956:20:27"},"nodeType":"YulIf","src":"953:47:27"},{"nodeType":"YulVariableDeclaration","src":"1013:41:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1027:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1037:1:27","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"1044:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1049:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1040:3:27"},"nodeType":"YulFunctionCall","src":"1040:12:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1033:3:27"},"nodeType":"YulFunctionCall","src":"1033:20:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:27"},"nodeType":"YulFunctionCall","src":"1023:31:27"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1017:2:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1067:24:27","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"1080:11:27"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"1071:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1165:21:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1174:5:27"},{"name":"_1","nodeType":"YulIdentifier","src":"1181:2:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"1167:6:27"},"nodeType":"YulFunctionCall","src":"1167:17:27"},"nodeType":"YulExpressionStatement","src":"1167:17:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1115:5:27"},{"name":"_2","nodeType":"YulIdentifier","src":"1122:2:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1112:2:27"},"nodeType":"YulFunctionCall","src":"1112:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1126:26:27","statements":[{"nodeType":"YulAssignment","src":"1128:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"1141:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1148:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1137:3:27"},"nodeType":"YulFunctionCall","src":"1137:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"1128:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1108:3:27","statements":[]},"src":"1104:82:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"754:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"759:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"751:2:27"},"nodeType":"YulFunctionCall","src":"751:11:27"},"nodeType":"YulIf","src":"748:448:27"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"710:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"717:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"722:10:27","type":""}],"src":"657:545:27"},{"body":{"nodeType":"YulBlock","src":"1292:81:27","statements":[{"nodeType":"YulAssignment","src":"1302:65:27","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1317:4:27"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1335:1:27","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"1338:3:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1331:3:27"},"nodeType":"YulFunctionCall","src":"1331:11:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1348:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1344:3:27"},"nodeType":"YulFunctionCall","src":"1344:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1327:3:27"},"nodeType":"YulFunctionCall","src":"1327:24:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1323:3:27"},"nodeType":"YulFunctionCall","src":"1323:29:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1313:3:27"},"nodeType":"YulFunctionCall","src":"1313:40:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1359:1:27","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"1362:3:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1355:3:27"},"nodeType":"YulFunctionCall","src":"1355:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1310:2:27"},"nodeType":"YulFunctionCall","src":"1310:57:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"1302:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1269:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"1275:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"1283:4:27","type":""}],"src":"1207:166:27"},{"body":{"nodeType":"YulBlock","src":"1474:1256:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1484:24:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1504:3:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1498:5:27"},"nodeType":"YulFunctionCall","src":"1498:10:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"1488:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1551:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1553:16:27"},"nodeType":"YulFunctionCall","src":"1553:18:27"},"nodeType":"YulExpressionStatement","src":"1553:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1523:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1539:2:27","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1535:3:27"},"nodeType":"YulFunctionCall","src":"1535:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1531:3:27"},"nodeType":"YulFunctionCall","src":"1531:18:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1520:2:27"},"nodeType":"YulFunctionCall","src":"1520:30:27"},"nodeType":"YulIf","src":"1517:56:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1626:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1664:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"1658:5:27"},"nodeType":"YulFunctionCall","src":"1658:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"1632:25:27"},"nodeType":"YulFunctionCall","src":"1632:38:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"1672:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"1582:43:27"},"nodeType":"YulFunctionCall","src":"1582:97:27"},"nodeType":"YulExpressionStatement","src":"1582:97:27"},{"nodeType":"YulVariableDeclaration","src":"1688:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1705:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"1692:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1715:23:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1734:4:27","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"1719:11:27","type":""}]},{"nodeType":"YulAssignment","src":"1747:24:27","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"1760:11:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"1747:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"1817:656:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1831:35:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1850:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1862:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1858:3:27"},"nodeType":"YulFunctionCall","src":"1858:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1846:3:27"},"nodeType":"YulFunctionCall","src":"1846:20:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"1835:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1879:49:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"1923:4:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"1893:29:27"},"nodeType":"YulFunctionCall","src":"1893:35:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"1883:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1941:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1950:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1945:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2028:172:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2053:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2071:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2076:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:27"},"nodeType":"YulFunctionCall","src":"2067:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2061:5:27"},"nodeType":"YulFunctionCall","src":"2061:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2046:6:27"},"nodeType":"YulFunctionCall","src":"2046:42:27"},"nodeType":"YulExpressionStatement","src":"2046:42:27"},{"nodeType":"YulAssignment","src":"2105:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2119:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2127:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2115:3:27"},"nodeType":"YulFunctionCall","src":"2115:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2105:6:27"}]},{"nodeType":"YulAssignment","src":"2146:40:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2163:9:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2174:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2159:3:27"},"nodeType":"YulFunctionCall","src":"2159:27:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"2146:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1975:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"1978:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1972:2:27"},"nodeType":"YulFunctionCall","src":"1972:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1987:28:27","statements":[{"nodeType":"YulAssignment","src":"1989:24:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1998:1:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"2001:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1994:3:27"},"nodeType":"YulFunctionCall","src":"1994:19:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1989:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1968:3:27","statements":[]},"src":"1964:236:27"},{"body":{"nodeType":"YulBlock","src":"2248:166:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2293:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2298:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2289:3:27"},"nodeType":"YulFunctionCall","src":"2289:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2283:5:27"},"nodeType":"YulFunctionCall","src":"2283:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"2270:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"2333:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"2345:9:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2372:1:27","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"2375:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2368:3:27"},"nodeType":"YulFunctionCall","src":"2368:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"2384:3:27","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2364:3:27"},"nodeType":"YulFunctionCall","src":"2364:24:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2394:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2390:3:27"},"nodeType":"YulFunctionCall","src":"2390:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2360:3:27"},"nodeType":"YulFunctionCall","src":"2360:37:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2356:3:27"},"nodeType":"YulFunctionCall","src":"2356:42:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2341:3:27"},"nodeType":"YulFunctionCall","src":"2341:58:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2326:6:27"},"nodeType":"YulFunctionCall","src":"2326:74:27"},"nodeType":"YulExpressionStatement","src":"2326:74:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"2219:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"2228:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2216:2:27"},"nodeType":"YulFunctionCall","src":"2216:19:27"},"nodeType":"YulIf","src":"2213:201:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2434:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2448:1:27","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"2451:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2444:3:27"},"nodeType":"YulFunctionCall","src":"2444:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"2460:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2440:3:27"},"nodeType":"YulFunctionCall","src":"2440:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2427:6:27"},"nodeType":"YulFunctionCall","src":"2427:36:27"},"nodeType":"YulExpressionStatement","src":"2427:36:27"}]},"nodeType":"YulCase","src":"1810:663:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1815:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"2490:234:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2504:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2517:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2508:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2553:67:27","statements":[{"nodeType":"YulAssignment","src":"2571:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2590:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"2595:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:27"},"nodeType":"YulFunctionCall","src":"2586:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2580:5:27"},"nodeType":"YulFunctionCall","src":"2580:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2571:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"2534:6:27"},"nodeType":"YulIf","src":"2531:89:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2640:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2699:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"2706:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"2646:52:27"},"nodeType":"YulFunctionCall","src":"2646:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2633:6:27"},"nodeType":"YulFunctionCall","src":"2633:81:27"},"nodeType":"YulExpressionStatement","src":"2633:81:27"}]},"nodeType":"YulCase","src":"2482:242:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"1790:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1798:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1787:2:27"},"nodeType":"YulFunctionCall","src":"1787:14:27"},"nodeType":"YulSwitch","src":"1780:944:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1459:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"1465:3:27","type":""}],"src":"1378:1352:27"},{"body":{"nodeType":"YulBlock","src":"2909:174:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2926:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2937:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2919:6:27"},"nodeType":"YulFunctionCall","src":"2919:21:27"},"nodeType":"YulExpressionStatement","src":"2919:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2960:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2971:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2956:3:27"},"nodeType":"YulFunctionCall","src":"2956:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"2976:2:27","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2949:6:27"},"nodeType":"YulFunctionCall","src":"2949:30:27"},"nodeType":"YulExpressionStatement","src":"2949:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2999:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3010:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2995:3:27"},"nodeType":"YulFunctionCall","src":"2995:18:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"3015:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2988:6:27"},"nodeType":"YulFunctionCall","src":"2988:54:27"},"nodeType":"YulExpressionStatement","src":"2988:54:27"},{"nodeType":"YulAssignment","src":"3051:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3074:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3059:3:27"},"nodeType":"YulFunctionCall","src":"3059:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3051:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2886:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2900:4:27","type":""}],"src":"2735:348:27"},{"body":{"nodeType":"YulBlock","src":"3185:1338:27","statements":[{"body":{"nodeType":"YulBlock","src":"3212:9:27","statements":[{"nodeType":"YulLeave","src":"3214:5:27"}]},"condition":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3201:4:27"},{"name":"src","nodeType":"YulIdentifier","src":"3207:3:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3198:2:27"},"nodeType":"YulFunctionCall","src":"3198:13:27"},"nodeType":"YulIf","src":"3195:26:27"},{"nodeType":"YulVariableDeclaration","src":"3230:51:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3276:3:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3270:5:27"},"nodeType":"YulFunctionCall","src":"3270:10:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3244:25:27"},"nodeType":"YulFunctionCall","src":"3244:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3234:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3324:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3326:16:27"},"nodeType":"YulFunctionCall","src":"3326:18:27"},"nodeType":"YulExpressionStatement","src":"3326:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3296:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3312:2:27","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3316:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3308:3:27"},"nodeType":"YulFunctionCall","src":"3308:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"3320:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3304:3:27"},"nodeType":"YulFunctionCall","src":"3304:18:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3293:2:27"},"nodeType":"YulFunctionCall","src":"3293:30:27"},"nodeType":"YulIf","src":"3290:56:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3399:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3437:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3431:5:27"},"nodeType":"YulFunctionCall","src":"3431:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3405:25:27"},"nodeType":"YulFunctionCall","src":"3405:38:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"3445:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3355:43:27"},"nodeType":"YulFunctionCall","src":"3355:97:27"},"nodeType":"YulExpressionStatement","src":"3355:97:27"},{"nodeType":"YulVariableDeclaration","src":"3461:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3478:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3465:9:27","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3525:741:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3539:35:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3558:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3570:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3566:3:27"},"nodeType":"YulFunctionCall","src":"3566:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3554:3:27"},"nodeType":"YulFunctionCall","src":"3554:20:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3543:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3587:47:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3630:3:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3600:29:27"},"nodeType":"YulFunctionCall","src":"3600:34:27"},"variables":[{"name":"src_1","nodeType":"YulTypedName","src":"3591:5:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3647:49:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3691:4:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3661:29:27"},"nodeType":"YulFunctionCall","src":"3661:35:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3651:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3709:18:27","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"3718:9:27"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3713:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3797:194:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3822:6:27"},{"arguments":[{"arguments":[{"name":"src_1","nodeType":"YulIdentifier","src":"3840:5:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3847:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3836:3:27"},"nodeType":"YulFunctionCall","src":"3836:21:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3830:5:27"},"nodeType":"YulFunctionCall","src":"3830:28:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3815:6:27"},"nodeType":"YulFunctionCall","src":"3815:44:27"},"nodeType":"YulExpressionStatement","src":"3815:44:27"},{"nodeType":"YulVariableDeclaration","src":"3876:11:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3886:1:27","type":"","value":"1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3880:2:27","type":""}]},{"nodeType":"YulAssignment","src":"3904:25:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3918:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"3926:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3914:3:27"},"nodeType":"YulFunctionCall","src":"3914:15:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3904:6:27"}]},{"nodeType":"YulAssignment","src":"3946:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3963:9:27"},{"name":"_1","nodeType":"YulIdentifier","src":"3974:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3959:3:27"},"nodeType":"YulFunctionCall","src":"3959:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3946:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3751:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3754:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3748:2:27"},"nodeType":"YulFunctionCall","src":"3748:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3763:21:27","statements":[{"nodeType":"YulAssignment","src":"3765:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3774:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"3777:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3770:3:27"},"nodeType":"YulFunctionCall","src":"3770:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3765:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"3744:3:27","statements":[]},"src":"3740:251:27"},{"body":{"nodeType":"YulBlock","src":"4039:168:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4057:45:27","value":{"arguments":[{"arguments":[{"name":"src_1","nodeType":"YulIdentifier","src":"4084:5:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4091:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4080:3:27"},"nodeType":"YulFunctionCall","src":"4080:21:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4074:5:27"},"nodeType":"YulFunctionCall","src":"4074:28:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4061:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4126:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4138:9:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4165:1:27","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"4168:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4161:3:27"},"nodeType":"YulFunctionCall","src":"4161:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"4177:3:27","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4157:3:27"},"nodeType":"YulFunctionCall","src":"4157:24:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4187:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4183:3:27"},"nodeType":"YulFunctionCall","src":"4183:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4153:3:27"},"nodeType":"YulFunctionCall","src":"4153:37:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4149:3:27"},"nodeType":"YulFunctionCall","src":"4149:42:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4134:3:27"},"nodeType":"YulFunctionCall","src":"4134:58:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4119:6:27"},"nodeType":"YulFunctionCall","src":"4119:74:27"},"nodeType":"YulExpressionStatement","src":"4119:74:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4010:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"4019:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4007:2:27"},"nodeType":"YulFunctionCall","src":"4007:19:27"},"nodeType":"YulIf","src":"4004:203:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4227:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4241:1:27","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4244:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4237:3:27"},"nodeType":"YulFunctionCall","src":"4237:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"4253:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4233:3:27"},"nodeType":"YulFunctionCall","src":"4233:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4220:6:27"},"nodeType":"YulFunctionCall","src":"4220:36:27"},"nodeType":"YulExpressionStatement","src":"4220:36:27"}]},"nodeType":"YulCase","src":"3518:748:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3523:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4283:234:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4297:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4310:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4301:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4346:67:27","statements":[{"nodeType":"YulAssignment","src":"4364:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4383:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4388:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4379:3:27"},"nodeType":"YulFunctionCall","src":"4379:19:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4373:5:27"},"nodeType":"YulFunctionCall","src":"4373:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4364:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4327:6:27"},"nodeType":"YulIf","src":"4324:89:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4433:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4492:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"4499:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4439:52:27"},"nodeType":"YulFunctionCall","src":"4439:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4426:6:27"},"nodeType":"YulFunctionCall","src":"4426:81:27"},"nodeType":"YulExpressionStatement","src":"4426:81:27"}]},"nodeType":"YulCase","src":"4275:242:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3498:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3506:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3495:2:27"},"nodeType":"YulFunctionCall","src":"3495:14:27"},"nodeType":"YulSwitch","src":"3488:1029:27"}]},"name":"copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3170:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"3176:3:27","type":""}],"src":"3088:1435:27"},{"body":{"nodeType":"YulBlock","src":"4702:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4719:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4730:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4712:6:27"},"nodeType":"YulFunctionCall","src":"4712:21:27"},"nodeType":"YulExpressionStatement","src":"4712:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4753:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4764:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4749:3:27"},"nodeType":"YulFunctionCall","src":"4749:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"4769:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4742:6:27"},"nodeType":"YulFunctionCall","src":"4742:30:27"},"nodeType":"YulExpressionStatement","src":"4742:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4792:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4803:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4788:3:27"},"nodeType":"YulFunctionCall","src":"4788:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"4808:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4781:6:27"},"nodeType":"YulFunctionCall","src":"4781:53:27"},"nodeType":"YulExpressionStatement","src":"4781:53:27"},{"nodeType":"YulAssignment","src":"4843:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4855:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4866:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4851:3:27"},"nodeType":"YulFunctionCall","src":"4851:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4843:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4679:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4693:4:27","type":""}],"src":"4528:347:27"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Cannot set owner to zero\")\n        tail := add(headStart, 96)\n    }\n    function copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage(slot, src)\n    {\n        if eq(slot, src) { leave }\n        let newLen := extract_byte_array_length(sload(src))\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let src_1 := array_dataslot_string_storage(src)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, sload(add(src_1, srcOffset)))\n                let _1 := 1\n                dstPtr := add(dstPtr, _1)\n                srcOffset := add(srcOffset, _1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := sload(add(src_1, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := sload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"600d80546001600160401b0319166043179055600f80546001600160a01b03191673234a5fb5bd614a7aa2ffab244d603abfa0ac5c5c1790557f66756e2d617262697472756d2d7365706f6c69612d31000000000000000000006010556014805463ffffffff1916620493e01790557f58de34bee78940f0673162df37bd0f493469af1e12e4df31fb7dba1c650a0a7f6015557f027f94ff1465b3525f9fc03e9ff7d6d2c0953482246dd6ae07570c45d6631414601755601880546201000165ffffffffffff19909116179055601b8054775ce8d5a2bc84beb22a398cca51996f7930313d61000186a06001600160c01b031990911617905561024060405261017a60a08181529062003b2860c039601c906200011d908262000539565b506040518061020001604052806101c28152602001620039666101c29139601d906200014a908262000539565b50604051806101c001604052806101918152602001620037d56101919139601e9062000177908262000539565b50604051806101a0016040528061016c815260200162003ca261016c9139601f90620001a4908262000539565b50348015620001b257600080fd5b50601b54600f54604080518082018252601381527f436861696e6c696e6b4d756c746976657273650000000000000000000000000060208083019190915282518084019093526003835262434c4d60e81b908301526001600160a01b036401000000009094048416933393849360009391909216918362000234838262000539565b50600162000243828262000539565b5050506001600160a01b039081166080528216620002a85760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b0384811691909117909155811615620002db57620002db81620003e8565b5050506001600160a01b038116620003065760405163d92e233d60e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055600a8054600181018255600091909152600080516020620037b58339815191520162000354601c8262000605565b50600a8054600181018255600091909152600080516020620037b58339815191520162000383601d8262000605565b50600a8054600181018255600091909152600080516020620037b583398151915201620003b2601e8262000605565b50600a8054600181018255600091909152600080516020620037b583398151915201620003e1601f8262000605565b50620006ee565b336001600160a01b03821603620004425760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016200029f565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620004bf57607f821691505b602082108103620004e057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200053457600081815260208120601f850160051c810160208610156200050f5750805b601f850160051c820191505b8181101562000530578281556001016200051b565b5050505b505050565b81516001600160401b0381111562000555576200055562000494565b6200056d81620005668454620004aa565b84620004e6565b602080601f831160018114620005a557600084156200058c5750858301515b600019600386901b1c1916600185901b17855562000530565b600085815260208120601f198616915b82811015620005d657888601518255948401946001909101908401620005b5565b5085821015620005f55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810362000611575050565b6200061d8254620004aa565b6001600160401b0381111562000637576200063762000494565b6200064881620005668454620004aa565b6000601f8211600181146200067f5760008315620006665750848201545b600019600385901b1c1916600184901b178455620006e7565b600085815260209020601f19841690600086815260209020845b83811015620006bb578286015482556001958601959091019060200162000699565b5085831015620006da5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b6080516130a4620007116000396000818161081d0152611e0f01526130a46000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c8063813ce42d11610182578063a969a403116100e9578063cfd30a6e116100a2578063ed647d211161007c578063ed647d2114610666578063f2fde38b1461066f578063f887ea4014610682578063ff712d021461069557600080fd5b8063cfd30a6e14610637578063e1e163791461064a578063e985e9c51461065357600080fd5b8063a969a403146105dd578063ab6eef52146105e5578063b187bd26146105ed578063b88d4fde14610601578063c87b56dd14610614578063cf2a1a0e1461062757600080fd5b80639443dec11161013b5780639443dec11461057857806395d89b411461058b57806398bdf6f5146105935780639eccacf61461059c578063a22cb465146105af578063a3e56fa8146105c257600080fd5b8063813ce42d146105295780638456cb591461053c578063849e0312146105445780638a0ec9d21461054c5780638da5cb5b146105545780638ea981171461056557600080fd5b8063425c9fa211610241578063598bc486116101fa5780636f2f418e116101d45780636f2f418e146104f257806370a082311461050557806379ba5097146105185780637d058d4f1461052057600080fd5b8063598bc486146104b65780636250fb2b146104d75780636352211e146104df57600080fd5b8063425c9fa2146103e557806342842e0e146103f857806348e9687a1461040b5780635151804a1461041e57806353cd456f146104345780635846d6821461044757600080fd5b806323b872dd1161029357806323b872dd1461037e578063265d1fa3146103915780632af605231461039957806335d46d5c146103b05780633b7ed734146103b85780633f4ba83a146103dd57600080fd5b806301ffc9a7146102db57806306fdde0314610303578063081812fc14610318578063095ea7b3146103435780630ca76175146103585780631fe543e31461036b575b600080fd5b6102ee6102e93660046126f8565b6106f6565b60405190151581526020015b60405180910390f35b61030b610748565b6040516102fa9190612765565b61032b610326366004612778565b6107da565b6040516001600160a01b0390911681526020016102fa565b6103566103513660046127ad565b610803565b005b610356610366366004612879565b610812565b6103566103793660046128e5565b610896565b61035661038c366004612963565b6108eb565b61030b610976565b6103a260175481565b6040519081526020016102fa565b61030b610a04565b601b546103c89063ffffffff1681565b60405163ffffffff90911681526020016102fa565b610356610a11565b6103a26103f3366004612778565b610a28565b610356610406366004612963565b610a49565b61035661041936600461299f565b610a64565b6018546103c89062010000900463ffffffff1681565b610356610442366004612778565b610cdb565b61048b610455366004612778565b60166020526000908152604090208054600182015460029092015460ff808316936101009093041691906001600160a01b031684565b6040805194151585529215156020850152918301526001600160a01b031660608201526080016102fa565b6018546104c49061ffff1681565b60405161ffff90911681526020016102fa565b61030b610db0565b61032b6104ed366004612778565b610dbd565b61030b610500366004612778565b610dc8565b6103a261051336600461299f565b610de1565b610356610e29565b6103a2601a5481565b6103566105373660046129ba565b610ed7565b610356610f50565b61030b610f6d565b61030b610f7a565b6006546001600160a01b031661032b565b61035661057336600461299f565b610f87565b610356610586366004612a00565b611079565b61030b6110bd565b6103a260095481565b60085461032b906001600160a01b031681565b6103566105bd366004612a34565b6110cc565b601b5461032b9064010000000090046001600160a01b031681565b61030b6110d7565b61030b6110e4565b6008546102ee90600160a01b900460ff1681565b61035661060f366004612a70565b6110f1565b61030b610622366004612778565b611108565b6014546103c89063ffffffff1681565b61030b610645366004612778565b61117d565b6103a260115481565b6102ee610661366004612ad7565b6111a8565b6103a260155481565b61035661067d36600461299f565b6111d6565b600f5461032b906001600160a01b031681565b6106d16106a3366004612778565b600e60205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016102fa565b60006001600160e01b031982166380ac58cd60e01b148061072757506001600160e01b03198216635b5e139f60e01b145b8061074257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461075790612b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461078390612b0a565b80156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b5050505050905090565b60006107e5826111ea565b506000828152600460205260409020546001600160a01b0316610742565b61080e828233611223565b5050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085b5760405163c6829f8360e01b815260040160405180910390fd5b610866838383611230565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6008546001600160a01b031633146108db5760085460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b6108e6838383611317565b505050565b6001600160a01b03821661091557604051633250574960e11b8152600060048201526024016108d2565b6000610922838333611542565b9050836001600160a01b0316816001600160a01b031614610970576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016108d2565b50505050565b6012805461098390612b0a565b80601f01602080910402602001604051908101604052809291908181526020018280546109af90612b0a565b80156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b505050505081565b601e805461098390612b0a565b610a1961163b565b6008805460ff60a01b19169055565b60198181548110610a3857600080fd5b600091825260209091200154905081565b6108e6838383604051806020016040528060008152506110f1565b600854600160a01b900460ff1615610ab35760405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b60448201526064016108d2565b60098054906000610ac383612b5a565b90915550506008546040805160c081018252601754815260155460208083019190915260185461ffff811683850152601b5463ffffffff90811660608501526201000090910416608083015282519081019092526000808352926001600160a01b031691639b1c385e919060a0820190610b3c90611690565b8152506040518263ffffffff1660e01b8152600401610b5b9190612b73565b6020604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190612bd0565b6040805160a0810182526000808252600160208084018281526009548587019081526001600160a01b038a81166060880190815288518781528086018a52608089019081528a8852601686529890962087518154945161ffff1990951690151561ff001916176101009415159490940293909317835590519382019390935592516002840180546001600160a01b03191691909316179091559251805194955091939092610c539260038501929101906125d8565b5050601980546001810182556000919091527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950182905550601a819055601854604080518381526201000090920463ffffffff1660208301527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a15050565b610ce361163b565b600a548110610d2a5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016108d2565b600a8054610d3a90600190612be9565b81548110610d4a57610d4a612bfc565b90600052602060002001600a8281548110610d6757610d67612bfc565b906000526020600020019081610d7d9190612c60565b50600a805480610d8f57610d8f612d3c565b600190038181906000526020600020016000610dab9190612623565b905550565b6013805461098390612b0a565b6000610742826111ea565b600c602052600090815260409020805461098390612b0a565b60006001600160a01b038216610e0d576040516322718ad960e21b8152600060048201526024016108d2565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610e7c5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016108d2565b600680546001600160a01b0319808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b610edf61163b565b600a548210610f265760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016108d2565b80600a8381548110610f3a57610f3a612bfc565b9060005260206000200190816108e69190612d52565b610f5861163b565b6008805460ff60a01b1916600160a01b179055565b600b805461098390612b0a565b601f805461098390612b0a565b6006546001600160a01b03163314801590610fad57506008546001600160a01b03163314155b15610ffe5733610fc56006546001600160a01b031690565b60085460405163061db9c160e01b81526001600160a01b03938416600482015291831660248301529190911660448201526064016108d2565b6001600160a01b0381166110255760405163d92e233d60e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b61108161163b565b600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80161080e8282612d52565b60606001805461075790612b0a565b61080e338383611701565b601c805461098390612b0a565b601d805461098390612b0a565b6110fc8484846108eb565b610970848484846117a0565b6060611113826111ea565b50600061112b60408051602081019091526000815290565b9050600081511161114b5760405180602001604052806000815250611176565b80611155846118c9565b604051602001611166929190612e09565b6040516020818303038152906040525b9392505050565b600a818154811061118d57600080fd5b90600052602060002001600091509050805461098390612b0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6111de61163b565b6111e78161195b565b50565b6000818152600260205260408120546001600160a01b03168061074257604051637e27328960e01b8152600481018490526024016108d2565b6108e68383836001611a05565b6000838152600e60205260409020600190810154600160a01b900460ff161515146112925760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064016108d2565b601361129e8282612d52565b5060126112ab8382612d52565b50600b6112b88382612d52565b506000838152600e6020908152604080832060018101805460ff60a01b19169055548352600c90915290206112ee600b82612c60565b506000838152600e60205260409020600181015490546108e6916001600160a01b031690611b0b565b600083815260166020526040902061133360038201848461265d565b50805460ff19166001178155600a546000908484838161135557611355612bfc565b905060200201356113669190612e38565b90506000600a828154811061137d5761137d612bfc565b90600052602060002001805461139290612b0a565b80601f01602080910402602001604051908101604052809291908181526020018280546113be90612b0a565b801561140b5780601f106113e05761010080835404028352916020019161140b565b820191906000526020600020905b8154815290600101906020018083116113ee57829003601f168201915b505050505090506114536040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b61145d8183611b25565b61148c61146982611b32565b600d546014546010546001600160401b039092169163ffffffff90911690611e0a565b601181905560408051606081018252600180880154825260028801546001600160a01b0390811660208085019182528486018481526000978852600e90915295859020935184555192909101805494511515600160a01b026001600160a81b0319909516929091169190911792909217909155517ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d9061153190899089908990612e5a565b60405180910390a150505050505050565b6000828152600260205260408120546001600160a01b039081169083161561156f5761156f818486611edc565b6001600160a01b038116156115ad5761158c600085600080611a05565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b038516156115dc576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b0316331461168e5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016108d2565b565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa826040516024016116c991511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6001600160a01b03821661173357604051630b61174360e31b81526001600160a01b03831660048201526024016108d2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561097057604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906117e2903390889087908790600401612e9b565b6020604051808303816000875af192505050801561181d575060408051601f3d908101601f1916820190925261181a91810190612ed8565b60015b611886573d80801561184b576040519150601f19603f3d011682016040523d82523d6000602084013e611850565b606091505b50805160000361187e57604051633250574960e11b81526001600160a01b03851660048201526024016108d2565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146118c257604051633250574960e11b81526001600160a01b03851660048201526024016108d2565b5050505050565b606060006118d683611f40565b60010190506000816001600160401b038111156118f5576118f56127d7565b6040519080825280601f01601f19166020018201604052801561191f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461192957509392505050565b336001600160a01b038216036119b35760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016108d2565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b8080611a1957506001600160a01b03821615155b15611adb576000611a29846111ea565b90506001600160a01b03831615801590611a555750826001600160a01b0316816001600160a01b031614155b8015611a685750611a6681846111a8565b155b15611a915760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016108d2565b8115611ad95783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61080e828260405180602001604052806000815250612018565b61080e826000808461202f565b60606000611b416101006120ad565b9050611b7a6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b815250826120ce90919063ffffffff16565b8251611b98906002811115611b9157611b91612ef5565b82906120e7565b6040805180820190915260088152676c616e677561676560c01b6020820152611bc29082906120ce565b6040830151611bd9908015611b9157611b91612ef5565b604080518082019091526006815265736f7572636560d01b6020820152611c019082906120ce565b6060830151611c119082906120ce565b60a08301515115611ca5576040805180820190915260048152636172677360e01b6020820152611c429082906120ce565b611c4b81612120565b60005b8360a0015151811015611c9b57611c8b8460a001518281518110611c7457611c74612bfc565b6020026020010151836120ce90919063ffffffff16565b611c9481612b5a565b9050611c4e565b50611ca581612144565b60808301515115611d6957600083602001516002811115611cc857611cc8612ef5565b03611ce65760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152611d179082906120ce565b611d3083602001516002811115611b9157611b91612ef5565b6040805180820190915260078152667365637265747360c81b6020820152611d599082906120ce565b6080830151611d69908290612162565b60c08301515115611e025760408051808201909152600981526862797465734172677360b81b6020820152611d9f9082906120ce565b611da881612120565b60005b8360c0015151811015611df857611de88460c001518281518110611dd157611dd1612bfc565b60200260200101518361216290919063ffffffff16565b611df181612b5a565b9050611dab565b50611e0281612144565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401611e62959493929190612f0b565b6020604051808303816000875af1158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190612bd0565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b611ee783838361216f565b6108e6576001600160a01b038316611f1557604051637e27328960e01b8152600481018290526024016108d2565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016108d2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f7f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611fab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611fc957662386f26fc10000830492506010015b6305f5e1008310611fe1576305f5e100830492506008015b6127108310611ff557612710830492506004015b60648310612007576064830492506002015b600a83106107425760010192915050565b61202283836121d5565b6108e660008484846117a0565b8051600003612051576040516322ce3edd60e01b815260040160405180910390fd5b8383600281111561206457612064612ef5565b9081600281111561207757612077612ef5565b9052506040840182801561208d5761208d612ef5565b9081801561209d5761209d612ef5565b9052506060909301929092525050565b6120b5612698565b80516120c1908361223a565b5060006020820152919050565b6120db82600383516122b1565b81516108e690826123ca565b81516120f49060c26123eb565b5061080e828260405160200161210c91815260200190565b604051602081830303815290604052612162565b61212b816004612454565b60018160200181815161213e9190612f54565b90525050565b61214f816007612454565b60018160200181815161213e9190612be9565b6120db82600283516122b1565b60006001600160a01b038316158015906121cd5750826001600160a01b0316846001600160a01b031614806121a957506121a984846111a8565b806121cd57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b0382166121ff57604051633250574960e11b8152600060048201526024016108d2565b600061220d83836000611542565b90506001600160a01b038116156108e6576040516339e3563760e11b8152600060048201526024016108d2565b60408051808201909152606081526000602082015261225a602083612e38565b156122825761226a602083612e38565b612275906020612be9565b61227f9083612f54565b91505b6020808401839052604051808552600081529081840101818110156122a657600080fd5b604052509192915050565b6017816001600160401b0316116122d75782516109709060e0600585901b1683176123eb565b60ff816001600160401b0316116123175782516122ff906018611fe0600586901b16176123eb565b508251610970906001600160401b038316600161246b565b61ffff816001600160401b031611612358578251612340906019611fe0600586901b16176123eb565b508251610970906001600160401b038316600261246b565b63ffffffff816001600160401b03161161239b57825161238390601a611fe0600586901b16176123eb565b508251610970906001600160401b038316600461246b565b82516123b290601b611fe0600586901b16176123eb565b508251610970906001600160401b038316600861246b565b604080518082019091526060815260006020820152611176838384516124f0565b6040805180820190915260608152600060208201528251516000612410826001612f54565b905084602001518210612431576124318561242c836002612f67565b6125c1565b845160208382010185815350805182111561244a578181525b5093949350505050565b81516108e690601f611fe0600585901b16176123eb565b604080518082019091526060815260006020820152835151600061248f8285612f54565b905085602001518111156124ac576124ac8661242c836002612f67565b600060016124bc86610100613062565b6124c69190612be9565b905086518281018783198251161781525080518311156124e4578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561251357600080fd5b83515160006125228483612f54565b9050856020015181111561253f5761253f8661242c836002612f67565b855180518382016020019160009180851115612559578482525b505050602086015b602086106125995780518252612578602083612f54565b9150612585602082612f54565b9050612592602087612be9565b9550612561565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516125cd838361223a565b5061097083826123ca565b828054828255906000526020600020908101928215612613579160200282015b828111156126135782518255916020019190600101906125f8565b5061261f9291506126cd565b5090565b50805461262f90612b0a565b6000825580601f1061263f575050565b601f0160209004906000526020600020908101906111e791906126cd565b828054828255906000526020600020908101928215612613579160200282015b8281111561261357823582559160200191906001019061267d565b60405180604001604052806126c0604051806040016040528060608152602001600081525090565b8152602001600081525090565b5b8082111561261f57600081556001016126ce565b6001600160e01b0319811681146111e757600080fd5b60006020828403121561270a57600080fd5b8135611176816126e2565b60005b83811015612730578181015183820152602001612718565b50506000910152565b60008151808452612751816020860160208601612715565b601f01601f19169290920160200192915050565b6020815260006111766020830184612739565b60006020828403121561278a57600080fd5b5035919050565b80356001600160a01b03811681146127a857600080fd5b919050565b600080604083850312156127c057600080fd5b6127c983612791565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126127fe57600080fd5b81356001600160401b0380821115612818576128186127d7565b604051601f8301601f19908116603f01168101908282118183101715612840576128406127d7565b8160405283815286602085880101111561285957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561288e57600080fd5b8335925060208401356001600160401b03808211156128ac57600080fd5b6128b8878388016127ed565b935060408601359150808211156128ce57600080fd5b506128db868287016127ed565b9150509250925092565b6000806000604084860312156128fa57600080fd5b8335925060208401356001600160401b038082111561291857600080fd5b818601915086601f83011261292c57600080fd5b81358181111561293b57600080fd5b8760208260051b850101111561295057600080fd5b6020830194508093505050509250925092565b60008060006060848603121561297857600080fd5b61298184612791565b925061298f60208501612791565b9150604084013590509250925092565b6000602082840312156129b157600080fd5b61117682612791565b600080604083850312156129cd57600080fd5b8235915060208301356001600160401b038111156129ea57600080fd5b6129f6858286016127ed565b9150509250929050565b600060208284031215612a1257600080fd5b81356001600160401b03811115612a2857600080fd5b6121cd848285016127ed565b60008060408385031215612a4757600080fd5b612a5083612791565b915060208301358015158114612a6557600080fd5b809150509250929050565b60008060008060808587031215612a8657600080fd5b612a8f85612791565b9350612a9d60208601612791565b92506040850135915060608501356001600160401b03811115612abf57600080fd5b612acb878288016127ed565b91505092959194509250565b60008060408385031215612aea57600080fd5b612af383612791565b9150612b0160208401612791565b90509250929050565b600181811c90821680612b1e57607f821691505b602082108103612b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612b6c57612b6c612b44565b5060010190565b60208152815160208201526020820151604082015261ffff60408301511660608201526000606083015163ffffffff80821660808501528060808601511660a0850152505060a083015160c0808401526121cd60e0840182612739565b600060208284031215612be257600080fd5b5051919050565b8181038181111561074257610742612b44565b634e487b7160e01b600052603260045260246000fd5b601f8211156108e657600081815260208120601f850160051c81016020861015612c395750805b601f850160051c820191505b81811015612c5857828155600101612c45565b505050505050565b818103612c6b575050565b612c758254612b0a565b6001600160401b03811115612c8c57612c8c6127d7565b612ca081612c9a8454612b0a565b84612c12565b6000601f821160018114612cd45760008315612cbc5750848201545b600019600385901b1c1916600184901b1784556118c2565b600085815260209020601f19841690600086815260209020845b83811015612d0e5782860154825560019586019590910190602001612cee565b5085831015612d2c5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b81516001600160401b03811115612d6b57612d6b6127d7565b612d7981612c9a8454612b0a565b602080601f831160018114612dae5760008415612d965750858301515b600019600386901b1c1916600185901b178555612c58565b600085815260208120601f198616915b82811015612ddd57888601518255948401946001909101908401612dbe565b5085821015612d2c57939096015160001960f8600387901b161c19169092555050600190811b01905550565b60008351612e1b818460208801612715565b835190830190612e2f818360208801612715565b01949350505050565b600082612e5557634e487b7160e01b600052601260045260246000fd5b500690565b838152604060208201819052810182905260006001600160fb1b03831115612e8157600080fd5b8260051b8085606085013791909101606001949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ece90830184612739565b9695505050505050565b600060208284031215612eea57600080fd5b8151611176816126e2565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038616815260a060208201526000612f2d60a0830187612739565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b8082018082111561074257610742612b44565b808202811582820484141761074257610742612b44565b600181815b80851115612fb9578160001904821115612f9f57612f9f612b44565b80851615612fac57918102915b93841c9390800290612f83565b509250929050565b600082612fd057506001610742565b81612fdd57506000610742565b8160018114612ff35760028114612ffd57613019565b6001915050610742565b60ff84111561300e5761300e612b44565b50506001821b610742565b5060208310610133831016604e8410600b841016171561303c575081810a610742565b6130468383612f7e565b806000190482111561305a5761305a612b44565b029392505050565b60006111768383612fc156fea26469706673582212203d703086aa32693f1671be4d2ebcfbcb7033312761ae6da294f756defbade6f964736f6c63430008140033c65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8636f6e7374206469736e657955524c203d206068747470733a2f2f6170692e6469736e65796170692e6465762f636861726163746572603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203530293b636f6e7374206469736e657952657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206469736e657955524c2c6d6574686f643a2060474554602c7d293b636f6e7374206469736e6579526573706f6e7365203d206177616974206469736e6579526571756573743b636f6e7374206469736e657944617461203d206469736e6579526573706f6e73652e646174612e646174613b636f6e7374206d7944617461203d207b6e616d653a206469736e6579446174615b72616e645d2e6e616d652c696d6167653a206469736e6579446174615b72616e645d2e696d61676555726c2c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b636f6e737420706f6b6955524c203d206068747470733a2f2f706f6b656170692e636f2f6170692f76322f706f6b656d6f6e603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a2031303030293b636f6e737420706f6b656d6f6e436861726163746572203d2072616e643b636f6e737420706f6b6952657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a2060247b706f6b6955524c7d2f247b706f6b656d6f6e4368617261637465727d602c6d6574686f643a2060474554602c7d293b636f6e737420706f6b69526573706f6e7365203d20617761697420706f6b69526571756573743b636f6e73742072657144617461203d20706f6b69526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a20726571446174612e737065636965732e6e616d652c696d6167653a20726571446174612e737072697465732e6f746865722e686f6d652e66726f6e745f64656661756c742c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b636f6e737420676f7455524c203d206068747470733a2f2f7468726f6e65736170692e636f6d2f6170692f76322f43686172616374657273603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203530293b636f6e737420676f7452657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a20676f7455524c2c6d6574686f643a2060474554602c7d293b636f6e737420676f74526573706f6e7365203d20617761697420676f74526571756573743b636f6e737420676f7444617461203d20676f74526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a20676f74446174615b72616e645d2e66756c6c4e616d652c696d6167653a20676f74446174615b72616e645d2e696d61676555726c2c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b636f6e737420687055524c203d206068747470733a2f2f68702d6170692e6f6e72656e6465722e636f6d2f6170692f63686172616374657273603b636f6e73742072616e64203d204d6174682e666c6f6f72284d6174682e72616e646f6d2829202a203230293b636f6e737420687052657175657374203d2046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a20687055524c2c6d6574686f643a2060474554602c7d293b636f6e7374206870526573706f6e7365203d206177616974206870526571756573743b636f6e737420687044617461203d206870526573706f6e73652e646174613b636f6e7374206d7944617461203d207b6e616d653a206870446174615b72616e645d2e6e616d652c696d6167653a206870446174615b72616e645d2e696d6167652c7d3b72657475726e2046756e6374696f6e732e656e636f6465537472696e67284a534f4e2e737472696e67696679286d794461746129293b","opcodes":"PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x43 OR SWAP1 SSTORE PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH20 0x234A5FB5BD614A7AA2FFAB244D603ABFA0AC5C5C OR SWAP1 SSTORE PUSH32 0x66756E2D617262697472756D2D7365706F6C69612D3100000000000000000000 PUSH1 0x10 SSTORE PUSH1 0x14 DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND PUSH3 0x493E0 OR SWAP1 SSTORE PUSH32 0x58DE34BEE78940F0673162DF37BD0F493469AF1E12E4DF31FB7DBA1C650A0A7F PUSH1 0x15 SSTORE PUSH32 0x27F94FF1465B3525F9FC03E9FF7D6D2C0953482246DD6AE07570C45D6631414 PUSH1 0x17 SSTORE PUSH1 0x18 DUP1 SLOAD PUSH3 0x10001 PUSH6 0xFFFFFFFFFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 0x1B DUP1 SLOAD PUSH24 0x5CE8D5A2BC84BEB22A398CCA51996F7930313D61000186A0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH2 0x240 PUSH1 0x40 MSTORE PUSH2 0x17A PUSH1 0xA0 DUP2 DUP2 MSTORE SWAP1 PUSH3 0x3B28 PUSH1 0xC0 CODECOPY PUSH1 0x1C SWAP1 PUSH3 0x11D SWAP1 DUP3 PUSH3 0x539 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x200 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x1C2 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3966 PUSH2 0x1C2 SWAP2 CODECOPY PUSH1 0x1D SWAP1 PUSH3 0x14A SWAP1 DUP3 PUSH3 0x539 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1C0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x191 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x37D5 PUSH2 0x191 SWAP2 CODECOPY PUSH1 0x1E SWAP1 PUSH3 0x177 SWAP1 DUP3 PUSH3 0x539 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH2 0x1A0 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x16C DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x3CA2 PUSH2 0x16C SWAP2 CODECOPY PUSH1 0x1F SWAP1 PUSH3 0x1A4 SWAP1 DUP3 PUSH3 0x539 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x1B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1B SLOAD PUSH1 0xF SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x13 DUP2 MSTORE PUSH32 0x436861696E6C696E6B4D756C7469766572736500000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH3 0x434C4D PUSH1 0xE8 SHL SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH5 0x100000000 SWAP1 SWAP5 DIV DUP5 AND SWAP4 CALLER SWAP4 DUP5 SWAP4 PUSH1 0x0 SWAP4 SWAP2 SWAP1 SWAP3 AND SWAP2 DUP4 PUSH3 0x234 DUP4 DUP3 PUSH3 0x539 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x243 DUP3 DUP3 PUSH3 0x539 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP3 AND PUSH3 0x2A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE DUP2 AND ISZERO PUSH3 0x2DB JUMPI PUSH3 0x2DB DUP2 PUSH3 0x3E8 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x306 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x37B5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH3 0x354 PUSH1 0x1C DUP3 PUSH3 0x605 JUMP JUMPDEST POP PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x37B5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH3 0x383 PUSH1 0x1D DUP3 PUSH3 0x605 JUMP JUMPDEST POP PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x37B5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH3 0x3B2 PUSH1 0x1E DUP3 PUSH3 0x605 JUMP JUMPDEST POP PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x37B5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH3 0x3E1 PUSH1 0x1F DUP3 PUSH3 0x605 JUMP JUMPDEST POP PUSH3 0x6EE JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH3 0x442 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x29F JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x4BF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x4E0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x534 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x50F JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x530 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x51B JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x555 JUMPI PUSH3 0x555 PUSH3 0x494 JUMP JUMPDEST PUSH3 0x56D DUP2 PUSH3 0x566 DUP5 SLOAD PUSH3 0x4AA JUMP JUMPDEST DUP5 PUSH3 0x4E6 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x5A5 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x58C JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x530 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x5D6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x5B5 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x5F5 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP2 DUP2 SUB PUSH3 0x611 JUMPI POP POP JUMP JUMPDEST PUSH3 0x61D DUP3 SLOAD PUSH3 0x4AA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x637 JUMPI PUSH3 0x637 PUSH3 0x494 JUMP JUMPDEST PUSH3 0x648 DUP2 PUSH3 0x566 DUP5 SLOAD PUSH3 0x4AA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH3 0x67F JUMPI PUSH1 0x0 DUP4 ISZERO PUSH3 0x666 JUMPI POP DUP5 DUP3 ADD SLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH3 0x6E7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP5 AND SWAP1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6BB JUMPI DUP3 DUP7 ADD SLOAD DUP3 SSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH3 0x699 JUMP JUMPDEST POP DUP6 DUP4 LT ISZERO PUSH3 0x6DA JUMPI DUP2 DUP6 ADD SLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP PUSH1 0x1 DUP4 PUSH1 0x1 SHL ADD DUP5 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x30A4 PUSH3 0x711 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x81D ADD MSTORE PUSH2 0x1E0F ADD MSTORE PUSH2 0x30A4 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x813CE42D GT PUSH2 0x182 JUMPI DUP1 PUSH4 0xA969A403 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xCFD30A6E GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xED647D21 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xED647D21 EQ PUSH2 0x666 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0xFF712D02 EQ PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCFD30A6E EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0xE1E16379 EQ PUSH2 0x64A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA969A403 EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xAB6EEF52 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xB187BD26 EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x601 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xCF2A1A0E EQ PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9443DEC1 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0x9443DEC1 EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x58B JUMPI DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x9ECCACF6 EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5AF JUMPI DUP1 PUSH4 0xA3E56FA8 EQ PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x813CE42D EQ PUSH2 0x529 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x849E0312 EQ PUSH2 0x544 JUMPI DUP1 PUSH4 0x8A0EC9D2 EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x425C9FA2 GT PUSH2 0x241 JUMPI DUP1 PUSH4 0x598BC486 GT PUSH2 0x1FA JUMPI DUP1 PUSH4 0x6F2F418E GT PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6F2F418E EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x7D058D4F EQ PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x598BC486 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0x6250FB2B EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x425C9FA2 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x48E9687A EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x5151804A EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x53CD456F EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x5846D682 EQ PUSH2 0x447 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x293 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x265D1FA3 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x2AF60523 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x35D46D5C EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x3B7ED734 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xCA76175 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x36B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26F8 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30B PUSH2 0x748 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x32B PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x7DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x356 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x2879 JUMP JUMPDEST PUSH2 0x812 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x28E5 JUMP JUMPDEST PUSH2 0x896 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x2963 JUMP JUMPDEST PUSH2 0x8EB JUMP JUMPDEST PUSH2 0x30B PUSH2 0x976 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x30B PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x3C8 SWAP1 PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xA28 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2963 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x3C8 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xCDB JUMP JUMPDEST PUSH2 0x48B PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV AND SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x4C4 SWAP1 PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x30B PUSH2 0xDB0 JUMP JUMPDEST PUSH2 0x32B PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x30B PUSH2 0x500 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x513 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0xE29 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x537 CALLDATASIZE PUSH1 0x4 PUSH2 0x29BA JUMP JUMPDEST PUSH2 0xED7 JUMP JUMPDEST PUSH2 0x356 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x30B PUSH2 0xF6D JUMP JUMPDEST PUSH2 0x30B PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x356 PUSH2 0x573 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xF87 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x586 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A00 JUMP JUMPDEST PUSH2 0x1079 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10BD JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2A34 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x32B SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10D7 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10E4 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2EE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x60F CALLDATASIZE PUSH1 0x4 PUSH2 0x2A70 JUMP JUMPDEST PUSH2 0x10F1 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH2 0x3C8 SWAP1 PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x117D JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x661 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD7 JUMP JUMPDEST PUSH2 0x11A8 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x6D1 PUSH2 0x6A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x727 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x742 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x757 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x783 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E5 DUP3 PUSH2 0x11EA JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x742 JUMP JUMPDEST PUSH2 0x80E DUP3 DUP3 CALLER PUSH2 0x1223 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH4 0xC6829F83 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x866 DUP4 DUP4 DUP4 PUSH2 0x1230 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8DB JUMPI PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0x1317 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x915 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x922 DUP4 DUP4 CALLER PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AF SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9FC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9D1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9FC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1E DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0xA19 PUSH2 0x163B JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x19 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xA38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x10DBDB9D1C9858DD081A5CC81C185D5CD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xAC3 DUP4 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x17 SLOAD DUP2 MSTORE PUSH1 0x15 SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x18 SLOAD PUSH2 0xFFFF DUP2 AND DUP4 DUP6 ADD MSTORE PUSH1 0x1B SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP2 DIV AND PUSH1 0x80 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x9B1C385E SWAP2 SWAP1 PUSH1 0xA0 DUP3 ADD SWAP1 PUSH2 0xB3C SWAP1 PUSH2 0x1690 JUMP JUMPDEST DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5B SWAP2 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD DUP3 DUP2 MSTORE PUSH1 0x9 SLOAD DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x60 DUP9 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD DUP8 DUP2 MSTORE DUP1 DUP7 ADD DUP11 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 DUP2 MSTORE DUP11 DUP9 MSTORE PUSH1 0x16 DUP7 MSTORE SWAP9 SWAP1 SWAP7 KECCAK256 DUP8 MLOAD DUP2 SLOAD SWAP5 MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP1 ISZERO ISZERO PUSH2 0xFF00 NOT AND OR PUSH2 0x100 SWAP5 ISZERO ISZERO SWAP5 SWAP1 SWAP5 MUL SWAP4 SWAP1 SWAP4 OR DUP4 SSTORE SWAP1 MLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE SWAP3 MLOAD DUP1 MLOAD SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0xC53 SWAP3 PUSH1 0x3 DUP6 ADD SWAP3 SWAP2 ADD SWAP1 PUSH2 0x25D8 JUMP JUMPDEST POP POP PUSH1 0x19 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x944998273E477B495144FB8794C914197F3CCB46BE2900F4698FD0EF743C9695 ADD DUP3 SWAP1 SSTORE POP PUSH1 0x1A DUP2 SWAP1 SSTORE PUSH1 0x18 SLOAD PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xCC58B13AD3EAB50626C6A6300B1D139CD6EBB1688A7CCED9461C2F7E762665EE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xCE3 PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 LT PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E646578206F7574206F6620626F756E6473 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0xD3A SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xD67 JUMPI PUSH2 0xD67 PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x2C60 JUMP JUMPDEST POP PUSH1 0xA DUP1 SLOAD DUP1 PUSH2 0xD8F JUMPI PUSH2 0xD8F PUSH2 0x2D3C JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0xDAB SWAP2 SWAP1 PUSH2 0x2623 JUMP JUMPDEST SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x742 DUP3 PUSH2 0x11EA JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x7 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xEDF PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA SLOAD DUP3 LT PUSH2 0xF26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E646578206F7574206F6620626F756E6473 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP1 PUSH1 0xA DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 PUSH2 0x8E6 SWAP2 SWAP1 PUSH2 0x2D52 JUMP JUMPDEST PUSH2 0xF58 PUSH2 0x163B JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1F DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xFAD JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0xFFE JUMPI CALLER PUSH2 0xFC5 PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x61DB9C1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xD1A6A14209A385A964D036E404CB5CFB71F4000CDB03C9366292430787261BE6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC65A7BB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2A8 ADD PUSH2 0x80E DUP3 DUP3 PUSH2 0x2D52 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x757 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x80E CALLER DUP4 DUP4 PUSH2 0x1701 JUMP JUMPDEST PUSH1 0x1C DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1D DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x10FC DUP5 DUP5 DUP5 PUSH2 0x8EB JUMP JUMPDEST PUSH2 0x970 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17A0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1113 DUP3 PUSH2 0x11EA JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x112B PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x114B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1176 JUMP JUMPDEST DUP1 PUSH2 0x1155 DUP5 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1166 SWAP3 SWAP2 SWAP1 PUSH2 0x2E09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x118D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11DE PUSH2 0x163B JUMP JUMPDEST PUSH2 0x11E7 DUP2 PUSH2 0x195B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x1292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x125B9D985B1A59081C995C5D595CDD081A59 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x13 PUSH2 0x129E DUP3 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0x12 PUSH2 0x12AB DUP4 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0xB PUSH2 0x12B8 DUP4 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE SLOAD DUP4 MSTORE PUSH1 0xC SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x12EE PUSH1 0xB DUP3 PUSH2 0x2C60 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x8E6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1333 PUSH1 0x3 DUP3 ADD DUP5 DUP5 PUSH2 0x265D JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 DUP5 DUP5 DUP4 DUP2 PUSH2 0x1355 JUMPI PUSH2 0x1355 PUSH2 0x2BFC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1366 SWAP2 SWAP1 PUSH2 0x2E38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x1392 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13BE SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x140B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x140B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x1453 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x145D DUP2 DUP4 PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x148C PUSH2 0x1469 DUP3 PUSH2 0x1B32 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x14 SLOAD PUSH1 0x10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SLOAD DUP3 MSTORE PUSH1 0x2 DUP9 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP5 DUP7 ADD DUP5 DUP2 MSTORE PUSH1 0x0 SWAP8 DUP9 MSTORE PUSH1 0xE SWAP1 SWAP2 MSTORE SWAP6 DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE MLOAD SWAP3 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD PUSH32 0xFE2E2D779DBA245964D4E3EF9B994BE63856FD568BF7D3CA9E224755CB1BD54D SWAP1 PUSH2 0x1531 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x2E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x156F JUMPI PUSH2 0x156F DUP2 DUP5 DUP7 PUSH2 0x1EDC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x15AD JUMPI PUSH2 0x158C PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x15DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x168E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH32 0x92FD13387C7FE7BEFBC38D303D6468778FB9731BC4583F17D92989C6FCFDEAAA DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16C9 SWAP2 MLOAD ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1733 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x17E2 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x181D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x181A SWAP2 DUP2 ADD SWAP1 PUSH2 0x2ED8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1886 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x187E JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x18C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18D6 DUP4 PUSH2 0x1F40 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x18F5 JUMPI PUSH2 0x18F5 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x191F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1929 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x19B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1A19 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1ADB JUMPI PUSH1 0x0 PUSH2 0x1A29 DUP5 PUSH2 0x11EA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1A55 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1A68 JUMPI POP PUSH2 0x1A66 DUP2 DUP5 PUSH2 0x11A8 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A91 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1AD9 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x80E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2018 JUMP JUMPDEST PUSH2 0x80E DUP3 PUSH1 0x0 DUP1 DUP5 PUSH2 0x202F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B41 PUSH2 0x100 PUSH2 0x20AD JUMP JUMPDEST SWAP1 POP PUSH2 0x1B7A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x31B7B232A637B1B0BA34B7B7 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP3 PUSH2 0x20CE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD PUSH2 0x1B98 SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x20E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x6C616E6775616765 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1BC2 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1BD9 SWAP1 DUP1 ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x736F75726365 PUSH1 0xD0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C01 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1C11 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1CA5 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x61726773 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C42 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1C4B DUP2 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1C9B JUMPI PUSH2 0x1C8B DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C74 JUMPI PUSH2 0x1C74 PUSH2 0x2BFC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x20CE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1C94 DUP2 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1C4E JUMP JUMPDEST POP PUSH2 0x1CA5 DUP2 PUSH2 0x2144 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1D69 JUMPI PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1CC8 JUMPI PUSH2 0x1CC8 PUSH2 0x2EF5 JUMP JUMPDEST SUB PUSH2 0x1CE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA80D31F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x39B2B1B932BA39A637B1B0BA34B7B7 PUSH1 0x89 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D17 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1D30 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x73656372657473 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D59 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1D69 SWAP1 DUP3 SWAP1 PUSH2 0x2162 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1E02 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x627974657341726773 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D9F SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1DA8 DUP2 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1DF8 JUMPI PUSH2 0x1DE8 DUP5 PUSH1 0xC0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DD1 JUMPI PUSH2 0x1DD1 PUSH2 0x2BFC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x2162 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DF1 DUP2 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1DAB JUMP JUMPDEST POP PUSH2 0x1E02 DUP2 PUSH2 0x2144 JUMP JUMPDEST MLOAD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x461D2762 DUP7 DUP9 PUSH1 0x1 DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E62 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EA5 SWAP2 SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EE7 DUP4 DUP4 DUP4 PUSH2 0x216F JUMP JUMPDEST PUSH2 0x8E6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1F15 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1F7F JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FAB JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1FC9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1FE1 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1FF5 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2007 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x742 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2022 DUP4 DUP4 PUSH2 0x21D5 JUMP JUMPDEST PUSH2 0x8E6 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x17A0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22CE3EDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2064 JUMPI PUSH2 0x2064 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2077 JUMPI PUSH2 0x2077 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x40 DUP5 ADD DUP3 DUP1 ISZERO PUSH2 0x208D JUMPI PUSH2 0x208D PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 DUP2 DUP1 ISZERO PUSH2 0x209D JUMPI PUSH2 0x209D PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x20B5 PUSH2 0x2698 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x20C1 SWAP1 DUP4 PUSH2 0x223A JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DB DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0x22B1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x8E6 SWAP1 DUP3 PUSH2 0x23CA JUMP JUMPDEST DUP2 MLOAD PUSH2 0x20F4 SWAP1 PUSH1 0xC2 PUSH2 0x23EB JUMP JUMPDEST POP PUSH2 0x80E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x210C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2162 JUMP JUMPDEST PUSH2 0x212B DUP2 PUSH1 0x4 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x213E SWAP2 SWAP1 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 MSTORE POP POP JUMP JUMPDEST PUSH2 0x214F DUP2 PUSH1 0x7 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x213E SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0x20DB DUP3 PUSH1 0x2 DUP4 MLOAD PUSH2 0x22B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21CD JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x21A9 JUMPI POP PUSH2 0x21A9 DUP5 DUP5 PUSH2 0x11A8 JUMP JUMPDEST DUP1 PUSH2 0x21CD JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x21FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220D DUP4 DUP4 PUSH1 0x0 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x225A PUSH1 0x20 DUP4 PUSH2 0x2E38 JUMP JUMPDEST ISZERO PUSH2 0x2282 JUMPI PUSH2 0x226A PUSH1 0x20 DUP4 PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x2275 SWAP1 PUSH1 0x20 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0x227F SWAP1 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP2 DUP5 ADD ADD DUP2 DUP2 LT ISZERO PUSH2 0x22A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x22D7 JUMPI DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x23EB JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2317 JUMPI DUP3 MLOAD PUSH2 0x22FF SWAP1 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x1 PUSH2 0x246B JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2358 JUMPI DUP3 MLOAD PUSH2 0x2340 SWAP1 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x2 PUSH2 0x246B JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x239B JUMPI DUP3 MLOAD PUSH2 0x2383 SWAP1 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 PUSH2 0x246B JUMP JUMPDEST DUP3 MLOAD PUSH2 0x23B2 SWAP1 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x8 PUSH2 0x246B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1176 DUP4 DUP4 DUP5 MLOAD PUSH2 0x24F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD MLOAD PUSH1 0x0 PUSH2 0x2410 DUP3 PUSH1 0x1 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 LT PUSH2 0x2431 JUMPI PUSH2 0x2431 DUP6 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x25C1 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP4 DUP3 ADD ADD DUP6 DUP2 MSTORE8 POP DUP1 MLOAD DUP3 GT ISZERO PUSH2 0x244A JUMPI DUP2 DUP2 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x8E6 SWAP1 PUSH1 0x1F PUSH2 0x1FE0 PUSH1 0x5 DUP6 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x248F DUP3 DUP6 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x24AC JUMPI PUSH2 0x24AC DUP7 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x24BC DUP7 PUSH2 0x100 PUSH2 0x3062 JUMP JUMPDEST PUSH2 0x24C6 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP3 DUP2 ADD DUP8 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP4 GT ISZERO PUSH2 0x24E4 JUMPI DUP3 DUP2 MSTORE JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x2513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x2522 DUP5 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x253F JUMPI PUSH2 0x253F DUP7 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST DUP6 MLOAD DUP1 MLOAD DUP4 DUP3 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP6 GT ISZERO PUSH2 0x2559 JUMPI DUP5 DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP7 ADD JUMPDEST PUSH1 0x20 DUP7 LT PUSH2 0x2599 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x2578 PUSH1 0x20 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP2 POP PUSH2 0x2585 PUSH1 0x20 DUP3 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP PUSH2 0x2592 PUSH1 0x20 DUP8 PUSH2 0x2BE9 JUMP JUMPDEST SWAP6 POP PUSH2 0x2561 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP9 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP5 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x25CD DUP4 DUP4 PUSH2 0x223A JUMP JUMPDEST POP PUSH2 0x970 DUP4 DUP3 PUSH2 0x23CA JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2613 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2613 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x25F8 JUMP JUMPDEST POP PUSH2 0x261F SWAP3 SWAP2 POP PUSH2 0x26CD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x262F SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x263F JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x11E7 SWAP2 SWAP1 PUSH2 0x26CD JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2613 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2613 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x26C0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x261F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x270A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1176 DUP2 PUSH2 0x26E2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2730 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2718 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2751 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2715 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1176 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x278A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27C9 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2818 JUMPI PUSH2 0x2818 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2840 JUMPI PUSH2 0x2840 PUSH2 0x27D7 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x2859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x28AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28B8 DUP8 DUP4 DUP9 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28DB DUP7 DUP3 DUP8 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x292C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x293B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2978 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2981 DUP5 PUSH2 0x2791 JUMP JUMPDEST SWAP3 POP PUSH2 0x298F PUSH1 0x20 DUP6 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1176 DUP3 PUSH2 0x2791 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29F6 DUP6 DUP3 DUP7 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21CD DUP5 DUP3 DUP6 ADD PUSH2 0x27ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A50 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2A86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A8F DUP6 PUSH2 0x2791 JUMP JUMPDEST SWAP4 POP PUSH2 0x2A9D PUSH1 0x20 DUP7 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2ABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ACB DUP8 DUP3 DUP9 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AF3 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B01 PUSH1 0x20 DUP5 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2B1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B3E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2B6C JUMPI PUSH2 0x2B6C PUSH2 0x2B44 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xFFFF PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x80 DUP6 ADD MSTORE DUP1 PUSH1 0x80 DUP7 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE POP POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xC0 DUP1 DUP5 ADD MSTORE PUSH2 0x21CD PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2C39 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C58 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2C45 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB PUSH2 0x2C6B JUMPI POP POP JUMP JUMPDEST PUSH2 0x2C75 DUP3 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2C8C JUMPI PUSH2 0x2C8C PUSH2 0x27D7 JUMP JUMPDEST PUSH2 0x2CA0 DUP2 PUSH2 0x2C9A DUP5 SLOAD PUSH2 0x2B0A JUMP JUMPDEST DUP5 PUSH2 0x2C12 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2CD4 JUMPI PUSH1 0x0 DUP4 ISZERO PUSH2 0x2CBC JUMPI POP DUP5 DUP3 ADD SLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP5 AND SWAP1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D0E JUMPI DUP3 DUP7 ADD SLOAD DUP3 SSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x2CEE JUMP JUMPDEST POP DUP6 DUP4 LT ISZERO PUSH2 0x2D2C JUMPI DUP2 DUP6 ADD SLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D6B JUMPI PUSH2 0x2D6B PUSH2 0x27D7 JUMP JUMPDEST PUSH2 0x2D79 DUP2 PUSH2 0x2C9A DUP5 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2DAE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2D96 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2DDD JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2DBE JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2D2C JUMPI SWAP4 SWAP1 SWAP7 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 PUSH1 0x3 DUP8 SWAP1 SHL AND SHR NOT AND SWAP1 SWAP3 SSTORE POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2E1B DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2715 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2E2F DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2715 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2E55 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x2E81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x60 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2ECE SWAP1 DUP4 ADD DUP5 PUSH2 0x2739 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1176 DUP2 PUSH2 0x26E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2F2D PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x2739 JUMP JUMPDEST PUSH2 0xFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2FB9 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2F9F JUMPI PUSH2 0x2F9F PUSH2 0x2B44 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2FAC JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2F83 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2FD0 JUMPI POP PUSH1 0x1 PUSH2 0x742 JUMP JUMPDEST DUP2 PUSH2 0x2FDD JUMPI POP PUSH1 0x0 PUSH2 0x742 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2FF3 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2FFD JUMPI PUSH2 0x3019 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x742 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x300E JUMPI PUSH2 0x300E PUSH2 0x2B44 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x742 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x303C JUMPI POP DUP2 DUP2 EXP PUSH2 0x742 JUMP JUMPDEST PUSH2 0x3046 DUP4 DUP4 PUSH2 0x2F7E JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x305A JUMPI PUSH2 0x305A PUSH2 0x2B44 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1176 DUP4 DUP4 PUSH2 0x2FC1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH17 0x3086AA32693F1671BE4D2EBCFBCB703331 0x27 PUSH2 0xAE6D LOG2 SWAP5 0xF7 JUMP 0xDE 0xFB 0xAD 0xE6 0xF9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER 0xC6 GAS PUSH28 0xB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2 0xA8 PUSH4 0x6F6E7374 KECCAK256 PUSH5 0x69736E6579 SSTORE MSTORE 0x4C KECCAK256 RETURNDATASIZE KECCAK256 PUSH1 0x68 PUSH21 0x7470733A2F2F6170692E6469736E65796170692E64 PUSH6 0x762F63686172 PUSH2 0x6374 PUSH6 0x72603B636F6E PUSH20 0x742072616E64203D204D6174682E666C6F6F7228 0x4D PUSH2 0x7468 0x2E PUSH19 0x616E646F6D2829202A203530293B636F6E7374 KECCAK256 PUSH5 0x69736E6579 MSTORE PUSH6 0x717565737420 RETURNDATASIZE KECCAK256 CHAINID PUSH22 0x6E6374696F6E732E6D616B6548747470526571756573 PUSH21 0x287B75726C3A206469736E657955524C2C6D657468 PUSH16 0x643A2060474554602C7D293B636F6E73 PUSH21 0x206469736E6579526573706F6E7365203D20617761 PUSH10 0x74206469736E65795265 PUSH18 0x756573743B636F6E7374206469736E657944 PUSH2 0x7461 KECCAK256 RETURNDATASIZE KECCAK256 PUSH5 0x69736E6579 MSTORE PUSH6 0x73706F6E7365 0x2E PUSH5 0x6174612E64 PUSH2 0x7461 EXTCODESIZE PUSH4 0x6F6E7374 KECCAK256 PUSH14 0x7944617461203D207B6E616D653A KECCAK256 PUSH5 0x69736E6579 PREVRANDAO PUSH2 0x7461 JUMPDEST PUSH19 0x616E645D2E6E616D652C696D6167653A206469 PUSH20 0x6E6579446174615B72616E645D2E696D61676555 PUSH19 0x6C2C7D3B72657475726E2046756E6374696F6E PUSH20 0x2E656E636F6465537472696E67284A534F4E2E73 PUSH21 0x72696E67696679286D794461746129293B636F6E73 PUSH21 0x20706F6B6955524C203D206068747470733A2F2F70 PUSH16 0x6B656170692E636F2F6170692F76322F PUSH17 0x6F6B656D6F6E603B636F6E73742072616E PUSH5 0x203D204D61 PUSH21 0x682E666C6F6F72284D6174682E72616E646F6D2829 KECCAK256 0x2A KECCAK256 BALANCE ADDRESS ADDRESS ADDRESS 0x29 EXTCODESIZE PUSH4 0x6F6E7374 KECCAK256 PUSH17 0x6F6B656D6F6E436861726163746572203D KECCAK256 PUSH19 0x616E643B636F6E737420706F6B695265717565 PUSH20 0x74203D2046756E6374696F6E732E6D616B654874 PUSH21 0x7052657175657374287B75726C3A2060247B706F6B PUSH10 0x55524C7D2F247B706F6B PUSH6 0x6D6F6E436861 PUSH19 0x61637465727D602C6D6574686F643A20604745 SLOAD PUSH1 0x2C PUSH30 0x293B636F6E737420706F6B69526573706F6E7365203D2061776169742070 PUSH16 0x6B69526571756573743B636F6E737420 PUSH19 0x657144617461203D20706F6B69526573706F6E PUSH20 0x652E646174613B636F6E7374206D794461746120 RETURNDATASIZE KECCAK256 PUSH28 0x6E616D653A20726571446174612E737065636965732E6E616D652C69 PUSH14 0x6167653A20726571446174612E73 PUSH17 0x72697465732E6F746865722E686F6D652E PUSH7 0x726F6E745F6465 PUSH7 0x61756C742C7D3B PUSH19 0x657475726E2046756E6374696F6E732E656E63 PUSH16 0x6465537472696E67284A534F4E2E7374 PUSH19 0x696E67696679286D794461746129293B636F6E PUSH20 0x7420676F7455524C203D206068747470733A2F2F PUSH21 0x68726F6E65736170692E636F6D2F6170692F76322F NUMBER PUSH9 0x617261637465727360 EXTCODESIZE PUSH4 0x6F6E7374 KECCAK256 PUSH19 0x616E64203D204D6174682E666C6F6F72284D61 PUSH21 0x682E72616E646F6D2829202A203530293B636F6E73 PUSH21 0x20676F7452657175657374203D2046756E6374696F PUSH15 0x732E6D616B65487474705265717565 PUSH20 0x74287B75726C3A20676F7455524C2C6D6574686F PUSH5 0x3A20604745 SLOAD PUSH1 0x2C PUSH30 0x293B636F6E737420676F74526573706F6E7365203D20617761697420676F PUSH21 0x526571756573743B636F6E737420676F7444617461 KECCAK256 RETURNDATASIZE KECCAK256 PUSH8 0x6F74526573706F6E PUSH20 0x652E646174613B636F6E7374206D794461746120 RETURNDATASIZE KECCAK256 PUSH28 0x6E616D653A20676F74446174615B72616E645D2E66756C6C4E616D65 0x2C PUSH10 0x6D6167653A20676F7444 PUSH2 0x7461 JUMPDEST PUSH19 0x616E645D2E696D61676555726C2C7D3B726574 PUSH22 0x726E2046756E6374696F6E732E656E636F6465537472 PUSH10 0x6E67284A534F4E2E7374 PUSH19 0x696E67696679286D794461746129293B636F6E PUSH20 0x7420687055524C203D206068747470733A2F2F68 PUSH17 0x2D6170692E6F6E72656E6465722E636F6D 0x2F PUSH2 0x7069 0x2F PUSH4 0x68617261 PUSH4 0x74657273 PUSH1 0x3B PUSH4 0x6F6E7374 KECCAK256 PUSH19 0x616E64203D204D6174682E666C6F6F72284D61 PUSH21 0x682E72616E646F6D2829202A203230293B636F6E73 PUSH21 0x20687052657175657374203D2046756E6374696F6E PUSH20 0x2E6D616B654874747052657175657374287B7572 PUSH13 0x3A20687055524C2C6D6574686F PUSH5 0x3A20604745 SLOAD PUSH1 0x2C PUSH30 0x293B636F6E7374206870526573706F6E7365203D20617761697420687052 PUSH6 0x71756573743B PUSH4 0x6F6E7374 KECCAK256 PUSH9 0x7044617461203D2068 PUSH17 0x526573706F6E73652E646174613B636F6E PUSH20 0x74206D7944617461203D207B6E616D653A206870 PREVRANDAO PUSH2 0x7461 JUMPDEST PUSH19 0x616E645D2E6E616D652C696D6167653A206870 PREVRANDAO PUSH2 0x7461 JUMPDEST PUSH19 0x616E645D2E696D6167652C7D3B72657475726E KECCAK256 CHAINID PUSH22 0x6E6374696F6E732E656E636F6465537472696E67284A MSTORE8 0x4F 0x4E 0x2E PUSH20 0x7472696E67696679286D794461746129293B0000 ","sourceMap":"1458:35:26:-:0;;;-1:-1:-1;;;;;;1458:35:26;1491:2;1458:35;;;1771:66;;;-1:-1:-1;;;;;;1771:66:26;1795:42;1771:66;;;1931;1907:90;;2200:39;;;-1:-1:-1;;2200:39:26;2233:6;2200:39;;;2400:77;2357:120;;2787:66;2739:114;;2916:41;;;2963:29;-1:-1:-1;;2963:29:26;;;;;;3071:42;;;3226:74;-1:-1:-1;;;;;;3226:74:26;;;;;;3650:424;629:10798;3650:424;;629:10798;3650:424;;;629:10798;3650:424;;;;;;;;;:::i;:::-;;4080:487;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4573:440;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5019:399;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5547:413;;;;;;;;;-1:-1:-1;5668:14:26;;5630:6;;1381:113:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1381:113:16;;;;-1:-1:-1;;;;;5668:14:26;;;;;;;6254:10:10;;;;373:1:5;;5630:6:26;;;;;373:1:5;1447:13:16;1381:113;373:1:5;1447:13:16;:::i;:::-;-1:-1:-1;1470:7:16;:17;1480:7;1470;:17;:::i;:::-;-1:-1:-1;;;;;;;;736:35:0;;;;;598:22:6;;590:59;;;;-1:-1:-1;;;590:59:6;;2937:2:27;590:59:6;;;2919:21:27;2976:2;2956:18;;;2949:30;3015:26;2995:18;;;2988:54;3059:18;;590:59:6;;;;;;;;;656:7;:18;;-1:-1:-1;;;;;;656:18:6;-1:-1:-1;;;;;656:18:6;;;;;;;;;;684:26;;;680:79;;720:32;739:12;720:18;:32::i;:::-;-1:-1:-1;;;;;;;;6276:29:10;::::1;6272:70;;6322:13;;-1:-1:-1::0;;;6322:13:10::1;;;;;;;;;;;6272:70;6347:16;:57:::0;;-1:-1:-1;;;;;;6347:57:10::1;-1:-1:-1::0;;;;;6347:57:10;;;::::1;::::0;;;::::1;::::0;;5766:20:26::3;:46:::0;;-1:-1:-1;5766:46:26;::::3;::::0;;-1:-1:-1;5766:46:26;;;;-1:-1:-1;;;;;;;;;;;5766:46:26::3;;5792:19;5766:46:::0;::::3;:::i;:::-;-1:-1:-1::0;5822:20:26::3;:37:::0;;::::3;::::0;::::3;::::0;;-1:-1:-1;5822:37:26;;;;-1:-1:-1;;;;;;;;;;;5822:37:26::3;;5848:10;5822:37:::0;::::3;:::i;:::-;-1:-1:-1::0;5869:20:26::3;:39:::0;;::::3;::::0;::::3;::::0;;-1:-1:-1;5869:39:26;;;;-1:-1:-1;;;;;;;;;;;5869:39:26::3;;5895:12;5869:39:::0;::::3;:::i;:::-;-1:-1:-1::0;5918:20:26::3;:35:::0;;::::3;::::0;::::3;::::0;;-1:-1:-1;5918:35:26;;;;-1:-1:-1;;;;;;;;;;;5918:35:26::3;;5944:8;5918:35:::0;::::3;:::i;:::-;;629:10798:::0;;1536:239:6;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;4730:2:27;1641:52:6;;;4712:21:27;4769:2;4749:18;;;4742:30;4808:25;4788:18;;;4781:53;4851:18;;1641:52:6;4528:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;1758:7;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;;1731:39:6;1536:239;:::o;14:127:27:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:27;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:27;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:27;;;2580:26;2531:89;-1:-1:-1;;1335:1:27;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:27;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:27;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:27;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:27:o;3088:1435::-;3207:3;3201:4;3198:13;3195:26;;3214:5;;3088:1435::o;3195:26::-;3244:37;3276:3;3270:10;3244:37;:::i;:::-;-1:-1:-1;;;;;3293:30:27;;3290:56;;;3326:18;;:::i;:::-;3355:97;3445:6;3405:38;3437:4;3431:11;3405:38;:::i;3355:97::-;3478:1;3506:2;3498:6;3495:14;3523:1;3518:748;;;;4310:1;4327:6;4324:89;;;-1:-1:-1;4379:19:27;;;4373:26;4324:89;-1:-1:-1;;1335:1:27;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;4426:81;;3488:1029;;3518:748;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;3554:20:27;;;604:1;597:14;;;641:4;628:18;;3718:9;3740:251;3754:7;3751:1;3748:14;3740:251;;;3836:21;;;3830:28;3815:44;;3886:1;3959:18;;;;3914:15;;;;3777:4;3770:12;3740:251;;;3744:3;4019:6;4010:7;4007:19;4004:203;;;4080:21;;;4074:28;-1:-1:-1;;4165:1:27;4161:14;;;4177:3;4157:24;4153:37;4149:42;4134:58;4119:74;;4004:203;;;;4253:1;4244:6;4241:1;4237:14;4233:22;4227:4;4220:36;3488:1029;;;;3088:1435;;:::o;4528:347::-;629:10798:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_3542":{"entryPoint":4643,"id":3542,"parameterSlots":3,"returnSlots":0},"@_approve_3608":{"entryPoint":6661,"id":3608,"parameterSlots":4,"returnSlots":0},"@_argsToBytes_2592":{"entryPoint":5776,"id":2592,"parameterSlots":1,"returnSlots":1},"@_baseURI_2935":{"entryPoint":null,"id":2935,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_3190":{"entryPoint":7900,"id":3190,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_3738":{"entryPoint":6048,"id":3738,"parameterSlots":4,"returnSlots":0},"@_getApproved_3117":{"entryPoint":null,"id":3117,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_3153":{"entryPoint":8559,"id":3153,"parameterSlots":3,"returnSlots":1},"@_mint_3346":{"entryPoint":8661,"id":3346,"parameterSlots":2,"returnSlots":0},"@_msgSender_3914":{"entryPoint":null,"id":3914,"parameterSlots":0,"returnSlots":1},"@_ownerOf_3104":{"entryPoint":null,"id":3104,"parameterSlots":1,"returnSlots":1},"@_requireOwned_3674":{"entryPoint":4586,"id":3674,"parameterSlots":1,"returnSlots":1},"@_safeMint_3361":{"entryPoint":6923,"id":3361,"parameterSlots":2,"returnSlots":0},"@_safeMint_3387":{"entryPoint":8216,"id":3387,"parameterSlots":3,"returnSlots":0},"@_sendRequest_72":{"entryPoint":7690,"id":72,"parameterSlots":4,"returnSlots":1},"@_setApprovalForAll_3645":{"entryPoint":5889,"id":3645,"parameterSlots":3,"returnSlots":0},"@_transferOwnership_948":{"entryPoint":6491,"id":948,"parameterSlots":1,"returnSlots":0},"@_update_3296":{"entryPoint":5442,"id":3296,"parameterSlots":3,"returnSlots":1},"@_validateOwnership_961":{"entryPoint":5691,"id":961,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_914":{"entryPoint":3625,"id":914,"parameterSlots":0,"returnSlots":0},"@appendApiSource_5817":{"entryPoint":4217,"id":5817,"parameterSlots":1,"returnSlots":0},"@appendInt_1407":{"entryPoint":9323,"id":1407,"parameterSlots":3,"returnSlots":1},"@appendUint8_1249":{"entryPoint":9195,"id":1249,"parameterSlots":2,"returnSlots":1},"@append_1188":{"entryPoint":9456,"id":1188,"parameterSlots":3,"returnSlots":1},"@append_1208":{"entryPoint":9162,"id":1208,"parameterSlots":2,"returnSlots":1},"@approve_2951":{"entryPoint":2051,"id":2951,"parameterSlots":2,"returnSlots":0},"@arbitrumSepoliaKeyHash_5475":{"entryPoint":null,"id":5475,"parameterSlots":0,"returnSlots":0},"@balanceOf_2859":{"entryPoint":3553,"id":2859,"parameterSlots":1,"returnSlots":1},"@chainlinkFunctionsRequestIdTracker_5448":{"entryPoint":null,"id":5448,"parameterSlots":0,"returnSlots":0},"@chainlinkVRFRequestIdTracker_5472":{"entryPoint":null,"id":5472,"parameterSlots":0,"returnSlots":0},"@create_1489":{"entryPoint":8365,"id":1489,"parameterSlots":1,"returnSlots":1},"@disneySource_5521":{"entryPoint":2564,"id":5521,"parameterSlots":0,"returnSlots":0},"@encodeCBOR_521":{"entryPoint":6962,"id":521,"parameterSlots":1,"returnSlots":1},"@endSequence_1832":{"entryPoint":8516,"id":1832,"parameterSlots":1,"returnSlots":0},"@fulfillRandomWords_5716":{"entryPoint":4887,"id":5716,"parameterSlots":3,"returnSlots":0},"@fulfillRequest_5780":{"entryPoint":4656,"id":5780,"parameterSlots":3,"returnSlots":0},"@functionCallbackLastError_5460":{"entryPoint":3504,"id":5460,"parameterSlots":0,"returnSlots":0},"@functionCallbackLastRequestId_5456":{"entryPoint":null,"id":5456,"parameterSlots":0,"returnSlots":0},"@functionCallbackLastResponse_5458":{"entryPoint":2422,"id":5458,"parameterSlots":0,"returnSlots":0},"@functionGasLimit_5463":{"entryPoint":null,"id":5463,"parameterSlots":0,"returnSlots":0},"@gameOfThronesSource_5515":{"entryPoint":4311,"id":5515,"parameterSlots":0,"returnSlots":0},"@getApproved_2968":{"entryPoint":2010,"id":2968,"parameterSlots":1,"returnSlots":1},"@handleOracleFulfillment_116":{"entryPoint":2066,"id":116,"parameterSlots":3,"returnSlots":0},"@hpSource_5524":{"entryPoint":3962,"id":5524,"parameterSlots":0,"returnSlots":0},"@init_1033":{"entryPoint":8762,"id":1033,"parameterSlots":2,"returnSlots":1},"@initializeRequestForInlineJavaScript_585":{"entryPoint":6949,"id":585,"parameterSlots":2,"returnSlots":0},"@initializeRequest_566":{"entryPoint":8239,"id":566,"parameterSlots":4,"returnSlots":0},"@isApprovedForAll_3001":{"entryPoint":4520,"id":3001,"parameterSlots":2,"returnSlots":1},"@isPaused_5428":{"entryPoint":null,"id":5428,"parameterSlots":0,"returnSlots":0},"@lastFunctionCallbackStringResult_5435":{"entryPoint":3949,"id":5435,"parameterSlots":0,"returnSlots":0},"@log10_5097":{"entryPoint":8000,"id":5097,"parameterSlots":1,"returnSlots":1},"@mintRandomNFTRequest_5631":{"entryPoint":2660,"id":5631,"parameterSlots":1,"returnSlots":0},"@multiverseApiSources_5433":{"entryPoint":4477,"id":5433,"parameterSlots":0,"returnSlots":0},"@name_2881":{"entryPoint":1864,"id":2881,"parameterSlots":0,"returnSlots":1},"@ownerOf_2872":{"entryPoint":3517,"id":2872,"parameterSlots":1,"returnSlots":1},"@owner_924":{"entryPoint":null,"id":924,"parameterSlots":0,"returnSlots":1},"@pause_5791":{"entryPoint":3920,"id":5791,"parameterSlots":0,"returnSlots":0},"@pokeSource_5518":{"entryPoint":4324,"id":5518,"parameterSlots":0,"returnSlots":0},"@rawFulfillRandomWords_2368":{"entryPoint":2198,"id":2368,"parameterSlots":3,"returnSlots":0},"@removeApiSource_5850":{"entryPoint":3291,"id":5850,"parameterSlots":1,"returnSlots":0},"@resize_1086":{"entryPoint":9665,"id":1086,"parameterSlots":2,"returnSlots":0},"@router_5451":{"entryPoint":null,"id":5451,"parameterSlots":0,"returnSlots":0},"@s_vrfCoordinator_2299":{"entryPoint":null,"id":2299,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_3065":{"entryPoint":2633,"id":3065,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_3091":{"entryPoint":4337,"id":3091,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_2984":{"entryPoint":4300,"id":2984,"parameterSlots":2,"returnSlots":0},"@setCoordinator_2399":{"entryPoint":3975,"id":2399,"parameterSlots":1,"returnSlots":0},"@startArray_1766":{"entryPoint":8480,"id":1766,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2831":{"entryPoint":1782,"id":2831,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4210":{"entryPoint":null,"id":4210,"parameterSlots":1,"returnSlots":1},"@symbol_2890":{"entryPoint":4285,"id":2890,"parameterSlots":0,"returnSlots":1},"@toString_4000":{"entryPoint":6345,"id":4000,"parameterSlots":1,"returnSlots":1},"@tokenIdCounter_5430":{"entryPoint":null,"id":5430,"parameterSlots":0,"returnSlots":0},"@tokenIdToNFTData_5439":{"entryPoint":3528,"id":5439,"parameterSlots":0,"returnSlots":0},"@tokenURI_2926":{"entryPoint":4360,"id":2926,"parameterSlots":1,"returnSlots":1},"@transferFrom_3047":{"entryPoint":2283,"id":3047,"parameterSlots":3,"returnSlots":0},"@transferOwnership_878":{"entryPoint":4566,"id":878,"parameterSlots":1,"returnSlots":0},"@unpause_5802":{"entryPoint":2577,"id":5802,"parameterSlots":0,"returnSlots":0},"@updateApiSource_5875":{"entryPoint":3799,"id":5875,"parameterSlots":2,"returnSlots":0},"@vrfCallbackGasLimit_5489":{"entryPoint":null,"id":5489,"parameterSlots":0,"returnSlots":0},"@vrfCoordinator_5492":{"entryPoint":null,"id":5492,"parameterSlots":0,"returnSlots":0},"@vrfLastRequestId_5486":{"entryPoint":null,"id":5486,"parameterSlots":0,"returnSlots":0},"@vrfNumWords_5481":{"entryPoint":null,"id":5481,"parameterSlots":0,"returnSlots":0},"@vrfRequestConfirmations_5478":{"entryPoint":null,"id":5478,"parameterSlots":0,"returnSlots":0},"@vrfRequestIds_5484":{"entryPoint":2600,"id":5484,"parameterSlots":0,"returnSlots":0},"@vrfSubscriptionId_5467":{"entryPoint":null,"id":5467,"parameterSlots":0,"returnSlots":0},"@writeBytes_1674":{"entryPoint":8546,"id":1674,"parameterSlots":2,"returnSlots":0},"@writeFixedNumeric_2199":{"entryPoint":8881,"id":2199,"parameterSlots":3,"returnSlots":0},"@writeIndefiniteLengthType_2224":{"entryPoint":9300,"id":2224,"parameterSlots":2,"returnSlots":0},"@writeString_1707":{"entryPoint":8398,"id":1707,"parameterSlots":2,"returnSlots":0},"@writeUInt256_1543":{"entryPoint":8423,"id":1543,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":10129,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":10221,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":10655,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10967,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":10595,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":10864,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":10804,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10157,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr":{"entryPoint":10361,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":9976,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11992,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":10752,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":10104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":11216,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":10469,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_string_memory_ptr":{"entryPoint":10682,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_string":{"entryPoint":10041,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11785,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11931,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bool_t_uint256_t_address__to_t_bool_t_bool_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IVRFCoordinatorV2Plus_$2448__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10085,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0f5343873485c5c5ba9c972f367671af3745dc5cce720ddb197036ef7342b2b0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e55600974a468a5baf1f1454a24481ec68f787ee02cd9f1d97c35ce2a8d2093d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_struct$_ExtraArgsV1_$2564_memory_ptr__to_t_struct$_ExtraArgsV1_$2564_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_struct$_RandomWordsRequest_$2577_memory_ptr__to_t_struct$_RandomWordsRequest_$2577_memory_ptr__fromStack_reversed":{"entryPoint":11123,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_address_t_bool__to_t_uint256_t_address_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":11866,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint32__to_t_uint256_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__to_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__fromStack_reversed":{"entryPoint":12043,"id":null,"parameterSlots":6,"returnSlots":1},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12116,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":12158,"id":null,"parameterSlots":2,"returnSlots":2},"checked_exp_t_uint256_t_uint256":{"entryPoint":12386,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":12225,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12135,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11241,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":11282,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":11602,"id":null,"parameterSlots":2,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage":{"entryPoint":11360,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":10005,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":11018,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":11098,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":11832,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":11076,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":12021,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":11580,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11260,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10199,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":9954,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:24605:27","statements":[{"nodeType":"YulBlock","src":"6:3:27","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:27","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:27"},"nodeType":"YulFunctionCall","src":"125:12:27"},"nodeType":"YulExpressionStatement","src":"125:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:27"},"nodeType":"YulFunctionCall","src":"99:20:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:27"},"nodeType":"YulFunctionCall","src":"88:32:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:27"},"nodeType":"YulFunctionCall","src":"78:43:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:27"},"nodeType":"YulFunctionCall","src":"71:51:27"},"nodeType":"YulIf","src":"68:71:27"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:27","type":""}],"src":"14:131:27"},{"body":{"nodeType":"YulBlock","src":"219:176:27","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:27"},"nodeType":"YulFunctionCall","src":"267:12:27"},"nodeType":"YulExpressionStatement","src":"267:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:27"},"nodeType":"YulFunctionCall","src":"236:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:27"},"nodeType":"YulFunctionCall","src":"232:32:27"},"nodeType":"YulIf","src":"229:52:27"},{"nodeType":"YulVariableDeclaration","src":"290:36:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:27"},"nodeType":"YulFunctionCall","src":"303:23:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:27","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:27"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:27"},"nodeType":"YulFunctionCall","src":"335:30:27"},"nodeType":"YulExpressionStatement","src":"335:30:27"},{"nodeType":"YulAssignment","src":"374:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:27"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:27","type":""}],"src":"150:245:27"},{"body":{"nodeType":"YulBlock","src":"495:92:27","statements":[{"nodeType":"YulAssignment","src":"505:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:27"},"nodeType":"YulFunctionCall","src":"513:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:27"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:27"},"nodeType":"YulFunctionCall","src":"565:14:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:27"},"nodeType":"YulFunctionCall","src":"558:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:27"},"nodeType":"YulFunctionCall","src":"540:41:27"},"nodeType":"YulExpressionStatement","src":"540:41:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:27","type":""}],"src":"400:187:27"},{"body":{"nodeType":"YulBlock","src":"658:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"668:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"677:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"672:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"737:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"762:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"767:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:27"},"nodeType":"YulFunctionCall","src":"758:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"781:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"786:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:27"},"nodeType":"YulFunctionCall","src":"777:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"771:5:27"},"nodeType":"YulFunctionCall","src":"771:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"751:6:27"},"nodeType":"YulFunctionCall","src":"751:39:27"},"nodeType":"YulExpressionStatement","src":"751:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"701:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"695:2:27"},"nodeType":"YulFunctionCall","src":"695:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"709:19:27","statements":[{"nodeType":"YulAssignment","src":"711:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"720:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"723:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:27"},"nodeType":"YulFunctionCall","src":"716:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"711:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"691:3:27","statements":[]},"src":"687:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"820:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"825:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"816:3:27"},"nodeType":"YulFunctionCall","src":"816:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"834:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"809:6:27"},"nodeType":"YulFunctionCall","src":"809:27:27"},"nodeType":"YulExpressionStatement","src":"809:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"636:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"641:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"646:6:27","type":""}],"src":"592:250:27"},{"body":{"nodeType":"YulBlock","src":"897:221:27","statements":[{"nodeType":"YulVariableDeclaration","src":"907:26:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"927:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"921:5:27"},"nodeType":"YulFunctionCall","src":"921:12:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"911:6:27","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"949:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"954:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"942:6:27"},"nodeType":"YulFunctionCall","src":"942:19:27"},"nodeType":"YulExpressionStatement","src":"942:19:27"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1009:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1016:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1005:3:27"},"nodeType":"YulFunctionCall","src":"1005:16:27"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1027:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1032:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1023:3:27"},"nodeType":"YulFunctionCall","src":"1023:14:27"},{"name":"length","nodeType":"YulIdentifier","src":"1039:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"970:34:27"},"nodeType":"YulFunctionCall","src":"970:76:27"},"nodeType":"YulExpressionStatement","src":"970:76:27"},{"nodeType":"YulAssignment","src":"1055:57:27","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1070:3:27"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1083:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1091:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1079:3:27"},"nodeType":"YulFunctionCall","src":"1079:15:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1100:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1096:3:27"},"nodeType":"YulFunctionCall","src":"1096:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1075:3:27"},"nodeType":"YulFunctionCall","src":"1075:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1066:3:27"},"nodeType":"YulFunctionCall","src":"1066:39:27"},{"kind":"number","nodeType":"YulLiteral","src":"1107:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1062:3:27"},"nodeType":"YulFunctionCall","src":"1062:50:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1055:3:27"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"874:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"881:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"889:3:27","type":""}],"src":"847:271:27"},{"body":{"nodeType":"YulBlock","src":"1244:99:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1261:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1272:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1254:6:27"},"nodeType":"YulFunctionCall","src":"1254:21:27"},"nodeType":"YulExpressionStatement","src":"1254:21:27"},{"nodeType":"YulAssignment","src":"1284:53:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1310:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1333:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1318:3:27"},"nodeType":"YulFunctionCall","src":"1318:18:27"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1292:17:27"},"nodeType":"YulFunctionCall","src":"1292:45:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1284:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1213:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1224:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1235:4:27","type":""}],"src":"1123:220:27"},{"body":{"nodeType":"YulBlock","src":"1418:110:27","statements":[{"body":{"nodeType":"YulBlock","src":"1464:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1473:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1476:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1466:6:27"},"nodeType":"YulFunctionCall","src":"1466:12:27"},"nodeType":"YulExpressionStatement","src":"1466:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1439:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"1448:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1435:3:27"},"nodeType":"YulFunctionCall","src":"1435:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"1460:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1431:3:27"},"nodeType":"YulFunctionCall","src":"1431:32:27"},"nodeType":"YulIf","src":"1428:52:27"},{"nodeType":"YulAssignment","src":"1489:33:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1512:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1499:12:27"},"nodeType":"YulFunctionCall","src":"1499:23:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1489:6:27"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1384:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1395:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1407:6:27","type":""}],"src":"1348:180:27"},{"body":{"nodeType":"YulBlock","src":"1634:102:27","statements":[{"nodeType":"YulAssignment","src":"1644:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1656:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1667:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1652:3:27"},"nodeType":"YulFunctionCall","src":"1652:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1644:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1686:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1701:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1717:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1722:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1713:3:27"},"nodeType":"YulFunctionCall","src":"1713:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"1726:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1709:3:27"},"nodeType":"YulFunctionCall","src":"1709:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1697:3:27"},"nodeType":"YulFunctionCall","src":"1697:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1679:6:27"},"nodeType":"YulFunctionCall","src":"1679:51:27"},"nodeType":"YulExpressionStatement","src":"1679:51:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1603:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1614:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1625:4:27","type":""}],"src":"1533:203:27"},{"body":{"nodeType":"YulBlock","src":"1790:124:27","statements":[{"nodeType":"YulAssignment","src":"1800:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1822:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1809:12:27"},"nodeType":"YulFunctionCall","src":"1809:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:27"}]},{"body":{"nodeType":"YulBlock","src":"1892:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1901:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1904:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1894:6:27"},"nodeType":"YulFunctionCall","src":"1894:12:27"},"nodeType":"YulExpressionStatement","src":"1894:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1851:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1862:5:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1877:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1882:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1873:3:27"},"nodeType":"YulFunctionCall","src":"1873:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"1886:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1869:3:27"},"nodeType":"YulFunctionCall","src":"1869:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1858:3:27"},"nodeType":"YulFunctionCall","src":"1858:31:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1848:2:27"},"nodeType":"YulFunctionCall","src":"1848:42:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1841:6:27"},"nodeType":"YulFunctionCall","src":"1841:50:27"},"nodeType":"YulIf","src":"1838:70:27"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1769:6:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1780:5:27","type":""}],"src":"1741:173:27"},{"body":{"nodeType":"YulBlock","src":"2006:167:27","statements":[{"body":{"nodeType":"YulBlock","src":"2052:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2061:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2064:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2054:6:27"},"nodeType":"YulFunctionCall","src":"2054:12:27"},"nodeType":"YulExpressionStatement","src":"2054:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2027:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2036:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2023:3:27"},"nodeType":"YulFunctionCall","src":"2023:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"2048:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2019:3:27"},"nodeType":"YulFunctionCall","src":"2019:32:27"},"nodeType":"YulIf","src":"2016:52:27"},{"nodeType":"YulAssignment","src":"2077:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2106:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2087:18:27"},"nodeType":"YulFunctionCall","src":"2087:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2077:6:27"}]},{"nodeType":"YulAssignment","src":"2125:42:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2152:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2148:3:27"},"nodeType":"YulFunctionCall","src":"2148:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2135:12:27"},"nodeType":"YulFunctionCall","src":"2135:32:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2125:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1964:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1975:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1987:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1995:6:27","type":""}],"src":"1919:254:27"},{"body":{"nodeType":"YulBlock","src":"2210:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2227:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2234:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2239:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2230:3:27"},"nodeType":"YulFunctionCall","src":"2230:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2220:6:27"},"nodeType":"YulFunctionCall","src":"2220:31:27"},"nodeType":"YulExpressionStatement","src":"2220:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2267:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2270:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2260:6:27"},"nodeType":"YulFunctionCall","src":"2260:15:27"},"nodeType":"YulExpressionStatement","src":"2260:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2291:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2294:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2284:6:27"},"nodeType":"YulFunctionCall","src":"2284:15:27"},"nodeType":"YulExpressionStatement","src":"2284:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2178:127:27"},{"body":{"nodeType":"YulBlock","src":"2362:666:27","statements":[{"body":{"nodeType":"YulBlock","src":"2411:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2420:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2423:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2413:6:27"},"nodeType":"YulFunctionCall","src":"2413:12:27"},"nodeType":"YulExpressionStatement","src":"2413:12:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2390:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2398:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2386:3:27"},"nodeType":"YulFunctionCall","src":"2386:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"2405:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2382:3:27"},"nodeType":"YulFunctionCall","src":"2382:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2375:6:27"},"nodeType":"YulFunctionCall","src":"2375:35:27"},"nodeType":"YulIf","src":"2372:55:27"},{"nodeType":"YulVariableDeclaration","src":"2436:30:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2459:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2446:12:27"},"nodeType":"YulFunctionCall","src":"2446:20:27"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2440:2:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2475:28:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2485:18:27","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2479:2:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2526:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2528:16:27"},"nodeType":"YulFunctionCall","src":"2528:18:27"},"nodeType":"YulExpressionStatement","src":"2528:18:27"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2518:2:27"},{"name":"_2","nodeType":"YulIdentifier","src":"2522:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2515:2:27"},"nodeType":"YulFunctionCall","src":"2515:10:27"},"nodeType":"YulIf","src":"2512:36:27"},{"nodeType":"YulVariableDeclaration","src":"2557:17:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2571:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2567:3:27"},"nodeType":"YulFunctionCall","src":"2567:7:27"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"2561:2:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2583:23:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2603:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2597:5:27"},"nodeType":"YulFunctionCall","src":"2597:9:27"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2587:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2615:71:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2637:6:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2661:2:27"},{"kind":"number","nodeType":"YulLiteral","src":"2665:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2657:3:27"},"nodeType":"YulFunctionCall","src":"2657:13:27"},{"name":"_3","nodeType":"YulIdentifier","src":"2672:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2653:3:27"},"nodeType":"YulFunctionCall","src":"2653:22:27"},{"kind":"number","nodeType":"YulLiteral","src":"2677:2:27","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2649:3:27"},"nodeType":"YulFunctionCall","src":"2649:31:27"},{"name":"_3","nodeType":"YulIdentifier","src":"2682:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2645:3:27"},"nodeType":"YulFunctionCall","src":"2645:40:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:27"},"nodeType":"YulFunctionCall","src":"2633:53:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2619:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2745:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2747:16:27"},"nodeType":"YulFunctionCall","src":"2747:18:27"},"nodeType":"YulExpressionStatement","src":"2747:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2704:10:27"},{"name":"_2","nodeType":"YulIdentifier","src":"2716:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2701:2:27"},"nodeType":"YulFunctionCall","src":"2701:18:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2724:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2736:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2721:2:27"},"nodeType":"YulFunctionCall","src":"2721:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2698:2:27"},"nodeType":"YulFunctionCall","src":"2698:46:27"},"nodeType":"YulIf","src":"2695:72:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2783:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2787:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2776:6:27"},"nodeType":"YulFunctionCall","src":"2776:22:27"},"nodeType":"YulExpressionStatement","src":"2776:22:27"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2814:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"2822:2:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2807:6:27"},"nodeType":"YulFunctionCall","src":"2807:18:27"},"nodeType":"YulExpressionStatement","src":"2807:18:27"},{"body":{"nodeType":"YulBlock","src":"2873:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2882:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2885:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2875:6:27"},"nodeType":"YulFunctionCall","src":"2875:12:27"},"nodeType":"YulExpressionStatement","src":"2875:12:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2848:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"2856:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2844:3:27"},"nodeType":"YulFunctionCall","src":"2844:15:27"},{"kind":"number","nodeType":"YulLiteral","src":"2861:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2840:3:27"},"nodeType":"YulFunctionCall","src":"2840:26:27"},{"name":"end","nodeType":"YulIdentifier","src":"2868:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2837:2:27"},"nodeType":"YulFunctionCall","src":"2837:35:27"},"nodeType":"YulIf","src":"2834:55:27"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2915:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2923:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2911:3:27"},"nodeType":"YulFunctionCall","src":"2911:17:27"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2934:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2942:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2930:3:27"},"nodeType":"YulFunctionCall","src":"2930:17:27"},{"name":"_1","nodeType":"YulIdentifier","src":"2949:2:27"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2898:12:27"},"nodeType":"YulFunctionCall","src":"2898:54:27"},"nodeType":"YulExpressionStatement","src":"2898:54:27"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2976:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"2984:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2972:3:27"},"nodeType":"YulFunctionCall","src":"2972:15:27"},{"kind":"number","nodeType":"YulLiteral","src":"2989:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2968:3:27"},"nodeType":"YulFunctionCall","src":"2968:26:27"},{"kind":"number","nodeType":"YulLiteral","src":"2996:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2961:6:27"},"nodeType":"YulFunctionCall","src":"2961:37:27"},"nodeType":"YulExpressionStatement","src":"2961:37:27"},{"nodeType":"YulAssignment","src":"3007:15:27","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3016:6:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3007:5:27"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2336:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2344:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2352:5:27","type":""}],"src":"2310:718:27"},{"body":{"nodeType":"YulBlock","src":"3155:485:27","statements":[{"body":{"nodeType":"YulBlock","src":"3201:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3210:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3213:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3203:6:27"},"nodeType":"YulFunctionCall","src":"3203:12:27"},"nodeType":"YulExpressionStatement","src":"3203:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3176:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3185:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3172:3:27"},"nodeType":"YulFunctionCall","src":"3172:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3197:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3168:3:27"},"nodeType":"YulFunctionCall","src":"3168:32:27"},"nodeType":"YulIf","src":"3165:52:27"},{"nodeType":"YulAssignment","src":"3226:33:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3249:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3236:12:27"},"nodeType":"YulFunctionCall","src":"3236:23:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3226:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"3268:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3299:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3310:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3295:3:27"},"nodeType":"YulFunctionCall","src":"3295:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3282:12:27"},"nodeType":"YulFunctionCall","src":"3282:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3272:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3323:28:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3333:18:27","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3327:2:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3378:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3387:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3390:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3380:6:27"},"nodeType":"YulFunctionCall","src":"3380:12:27"},"nodeType":"YulExpressionStatement","src":"3380:12:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3366:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"3374:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3363:2:27"},"nodeType":"YulFunctionCall","src":"3363:14:27"},"nodeType":"YulIf","src":"3360:34:27"},{"nodeType":"YulAssignment","src":"3403:59:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3434:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3445:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3430:3:27"},"nodeType":"YulFunctionCall","src":"3430:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3454:7:27"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3413:16:27"},"nodeType":"YulFunctionCall","src":"3413:49:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3403:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"3471:48:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3504:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3515:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3500:3:27"},"nodeType":"YulFunctionCall","src":"3500:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3487:12:27"},"nodeType":"YulFunctionCall","src":"3487:32:27"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3475:8:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3548:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3557:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3560:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3550:6:27"},"nodeType":"YulFunctionCall","src":"3550:12:27"},"nodeType":"YulExpressionStatement","src":"3550:12:27"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"3534:8:27"},{"name":"_1","nodeType":"YulIdentifier","src":"3544:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3531:2:27"},"nodeType":"YulFunctionCall","src":"3531:16:27"},"nodeType":"YulIf","src":"3528:36:27"},{"nodeType":"YulAssignment","src":"3573:61:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3604:9:27"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3615:8:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3600:3:27"},"nodeType":"YulFunctionCall","src":"3600:24:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3626:7:27"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3583:16:27"},"nodeType":"YulFunctionCall","src":"3583:51:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3573:6:27"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3105:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3116:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3128:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3136:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3144:6:27","type":""}],"src":"3033:607:27"},{"body":{"nodeType":"YulBlock","src":"3767:561:27","statements":[{"body":{"nodeType":"YulBlock","src":"3813:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3822:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3825:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3815:6:27"},"nodeType":"YulFunctionCall","src":"3815:12:27"},"nodeType":"YulExpressionStatement","src":"3815:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3788:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3797:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3784:3:27"},"nodeType":"YulFunctionCall","src":"3784:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3809:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3780:3:27"},"nodeType":"YulFunctionCall","src":"3780:32:27"},"nodeType":"YulIf","src":"3777:52:27"},{"nodeType":"YulAssignment","src":"3838:33:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3861:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3848:12:27"},"nodeType":"YulFunctionCall","src":"3848:23:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3838:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"3880:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3911:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3922:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3907:3:27"},"nodeType":"YulFunctionCall","src":"3907:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3894:12:27"},"nodeType":"YulFunctionCall","src":"3894:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3884:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3935:28:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3945:18:27","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3939:2:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3990:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3999:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4002:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3992:6:27"},"nodeType":"YulFunctionCall","src":"3992:12:27"},"nodeType":"YulExpressionStatement","src":"3992:12:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3978:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"3986:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3975:2:27"},"nodeType":"YulFunctionCall","src":"3975:14:27"},"nodeType":"YulIf","src":"3972:34:27"},{"nodeType":"YulVariableDeclaration","src":"4015:32:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4040:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:27"},"nodeType":"YulFunctionCall","src":"4025:22:27"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4019:2:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4095:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4104:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4107:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4097:6:27"},"nodeType":"YulFunctionCall","src":"4097:12:27"},"nodeType":"YulExpressionStatement","src":"4097:12:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4074:2:27"},{"kind":"number","nodeType":"YulLiteral","src":"4078:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4070:3:27"},"nodeType":"YulFunctionCall","src":"4070:13:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4085:7:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4066:3:27"},"nodeType":"YulFunctionCall","src":"4066:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4059:6:27"},"nodeType":"YulFunctionCall","src":"4059:35:27"},"nodeType":"YulIf","src":"4056:55:27"},{"nodeType":"YulVariableDeclaration","src":"4120:30:27","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4147:2:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4134:12:27"},"nodeType":"YulFunctionCall","src":"4134:16:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4124:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4177:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4186:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4189:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4179:6:27"},"nodeType":"YulFunctionCall","src":"4179:12:27"},"nodeType":"YulExpressionStatement","src":"4179:12:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4165:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"4173:2:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4162:2:27"},"nodeType":"YulFunctionCall","src":"4162:14:27"},"nodeType":"YulIf","src":"4159:34:27"},{"body":{"nodeType":"YulBlock","src":"4251:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4260:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4263:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4253:6:27"},"nodeType":"YulFunctionCall","src":"4253:12:27"},"nodeType":"YulExpressionStatement","src":"4253:12:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4216:2:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4224:1:27","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"4227:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4220:3:27"},"nodeType":"YulFunctionCall","src":"4220:14:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4212:3:27"},"nodeType":"YulFunctionCall","src":"4212:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4237:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4208:3:27"},"nodeType":"YulFunctionCall","src":"4208:32:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4242:7:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4205:2:27"},"nodeType":"YulFunctionCall","src":"4205:45:27"},"nodeType":"YulIf","src":"4202:65:27"},{"nodeType":"YulAssignment","src":"4276:21:27","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4290:2:27"},{"kind":"number","nodeType":"YulLiteral","src":"4294:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:27"},"nodeType":"YulFunctionCall","src":"4286:11:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4276:6:27"}]},{"nodeType":"YulAssignment","src":"4306:16:27","value":{"name":"length","nodeType":"YulIdentifier","src":"4316:6:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4306:6:27"}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3717:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3728:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3740:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3748:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3756:6:27","type":""}],"src":"3645:683:27"},{"body":{"nodeType":"YulBlock","src":"4437:224:27","statements":[{"body":{"nodeType":"YulBlock","src":"4483:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4492:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4495:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4485:6:27"},"nodeType":"YulFunctionCall","src":"4485:12:27"},"nodeType":"YulExpressionStatement","src":"4485:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4458:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4467:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4454:3:27"},"nodeType":"YulFunctionCall","src":"4454:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4479:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4450:3:27"},"nodeType":"YulFunctionCall","src":"4450:32:27"},"nodeType":"YulIf","src":"4447:52:27"},{"nodeType":"YulAssignment","src":"4508:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4537:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4518:18:27"},"nodeType":"YulFunctionCall","src":"4518:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4508:6:27"}]},{"nodeType":"YulAssignment","src":"4556:48:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4589:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4600:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4585:3:27"},"nodeType":"YulFunctionCall","src":"4585:18:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4566:18:27"},"nodeType":"YulFunctionCall","src":"4566:38:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4556:6:27"}]},{"nodeType":"YulAssignment","src":"4613:42:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4640:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4651:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4636:3:27"},"nodeType":"YulFunctionCall","src":"4636:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4623:12:27"},"nodeType":"YulFunctionCall","src":"4623:32:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4613:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4387:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4398:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4410:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4418:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4426:6:27","type":""}],"src":"4333:328:27"},{"body":{"nodeType":"YulBlock","src":"4785:99:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4802:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4813:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4795:6:27"},"nodeType":"YulFunctionCall","src":"4795:21:27"},"nodeType":"YulExpressionStatement","src":"4795:21:27"},{"nodeType":"YulAssignment","src":"4825:53:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4851:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4863:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4874:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4859:3:27"},"nodeType":"YulFunctionCall","src":"4859:18:27"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"4833:17:27"},"nodeType":"YulFunctionCall","src":"4833:45:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4825:4:27"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4754:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4765:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4776:4:27","type":""}],"src":"4666:218:27"},{"body":{"nodeType":"YulBlock","src":"4990:76:27","statements":[{"nodeType":"YulAssignment","src":"5000:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5012:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5023:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5008:3:27"},"nodeType":"YulFunctionCall","src":"5008:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5000:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5042:9:27"},{"name":"value0","nodeType":"YulIdentifier","src":"5053:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5035:6:27"},"nodeType":"YulFunctionCall","src":"5035:25:27"},"nodeType":"YulExpressionStatement","src":"5035:25:27"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4959:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4970:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4981:4:27","type":""}],"src":"4889:177:27"},{"body":{"nodeType":"YulBlock","src":"5170:93:27","statements":[{"nodeType":"YulAssignment","src":"5180:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5192:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5203:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5188:3:27"},"nodeType":"YulFunctionCall","src":"5188:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5180:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5222:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5237:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5245:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5233:3:27"},"nodeType":"YulFunctionCall","src":"5233:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5215:6:27"},"nodeType":"YulFunctionCall","src":"5215:42:27"},"nodeType":"YulExpressionStatement","src":"5215:42:27"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5139:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5150:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5161:4:27","type":""}],"src":"5071:192:27"},{"body":{"nodeType":"YulBlock","src":"5369:76:27","statements":[{"nodeType":"YulAssignment","src":"5379:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5391:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5402:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5387:3:27"},"nodeType":"YulFunctionCall","src":"5387:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5379:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5421:9:27"},{"name":"value0","nodeType":"YulIdentifier","src":"5432:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5414:6:27"},"nodeType":"YulFunctionCall","src":"5414:25:27"},"nodeType":"YulExpressionStatement","src":"5414:25:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5338:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5349:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5360:4:27","type":""}],"src":"5268:177:27"},{"body":{"nodeType":"YulBlock","src":"5520:116:27","statements":[{"body":{"nodeType":"YulBlock","src":"5566:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5575:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5578:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5568:6:27"},"nodeType":"YulFunctionCall","src":"5568:12:27"},"nodeType":"YulExpressionStatement","src":"5568:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5541:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5550:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5537:3:27"},"nodeType":"YulFunctionCall","src":"5537:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5562:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5533:3:27"},"nodeType":"YulFunctionCall","src":"5533:32:27"},"nodeType":"YulIf","src":"5530:52:27"},{"nodeType":"YulAssignment","src":"5591:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5620:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5601:18:27"},"nodeType":"YulFunctionCall","src":"5601:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5591:6:27"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5486:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5497:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5509:6:27","type":""}],"src":"5450:186:27"},{"body":{"nodeType":"YulBlock","src":"5814:264:27","statements":[{"nodeType":"YulAssignment","src":"5824:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5836:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5847:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5832:3:27"},"nodeType":"YulFunctionCall","src":"5832:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5824:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5867:9:27"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5892:6:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5885:6:27"},"nodeType":"YulFunctionCall","src":"5885:14:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5878:6:27"},"nodeType":"YulFunctionCall","src":"5878:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5860:6:27"},"nodeType":"YulFunctionCall","src":"5860:41:27"},"nodeType":"YulExpressionStatement","src":"5860:41:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5921:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5932:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5917:3:27"},"nodeType":"YulFunctionCall","src":"5917:18:27"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5951:6:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5944:6:27"},"nodeType":"YulFunctionCall","src":"5944:14:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5937:6:27"},"nodeType":"YulFunctionCall","src":"5937:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5910:6:27"},"nodeType":"YulFunctionCall","src":"5910:50:27"},"nodeType":"YulExpressionStatement","src":"5910:50:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5980:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5991:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5976:3:27"},"nodeType":"YulFunctionCall","src":"5976:18:27"},{"name":"value2","nodeType":"YulIdentifier","src":"5996:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5969:6:27"},"nodeType":"YulFunctionCall","src":"5969:34:27"},"nodeType":"YulExpressionStatement","src":"5969:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6023:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6034:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6019:3:27"},"nodeType":"YulFunctionCall","src":"6019:18:27"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6043:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6059:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6064:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6055:3:27"},"nodeType":"YulFunctionCall","src":"6055:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"6068:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6051:3:27"},"nodeType":"YulFunctionCall","src":"6051:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6039:3:27"},"nodeType":"YulFunctionCall","src":"6039:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6012:6:27"},"nodeType":"YulFunctionCall","src":"6012:60:27"},"nodeType":"YulExpressionStatement","src":"6012:60:27"}]},"name":"abi_encode_tuple_t_bool_t_bool_t_uint256_t_address__to_t_bool_t_bool_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5759:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5770:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5778:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5786:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5794:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5805:4:27","type":""}],"src":"5641:437:27"},{"body":{"nodeType":"YulBlock","src":"6182:89:27","statements":[{"nodeType":"YulAssignment","src":"6192:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6204:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6215:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6200:3:27"},"nodeType":"YulFunctionCall","src":"6200:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6192:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6234:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6249:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6257:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6245:3:27"},"nodeType":"YulFunctionCall","src":"6245:19:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6227:6:27"},"nodeType":"YulFunctionCall","src":"6227:38:27"},"nodeType":"YulExpressionStatement","src":"6227:38:27"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6151:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6162:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6173:4:27","type":""}],"src":"6083:188:27"},{"body":{"nodeType":"YulBlock","src":"6373:292:27","statements":[{"body":{"nodeType":"YulBlock","src":"6419:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6428:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6431:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6421:6:27"},"nodeType":"YulFunctionCall","src":"6421:12:27"},"nodeType":"YulExpressionStatement","src":"6421:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6394:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6403:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6390:3:27"},"nodeType":"YulFunctionCall","src":"6390:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6415:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6386:3:27"},"nodeType":"YulFunctionCall","src":"6386:32:27"},"nodeType":"YulIf","src":"6383:52:27"},{"nodeType":"YulAssignment","src":"6444:33:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6467:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6454:12:27"},"nodeType":"YulFunctionCall","src":"6454:23:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6444:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"6486:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6517:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"6528:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6513:3:27"},"nodeType":"YulFunctionCall","src":"6513:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6500:12:27"},"nodeType":"YulFunctionCall","src":"6500:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6490:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"6575:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6584:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6587:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6577:6:27"},"nodeType":"YulFunctionCall","src":"6577:12:27"},"nodeType":"YulExpressionStatement","src":"6577:12:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6547:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6555:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6544:2:27"},"nodeType":"YulFunctionCall","src":"6544:30:27"},"nodeType":"YulIf","src":"6541:50:27"},{"nodeType":"YulAssignment","src":"6600:59:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6631:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6642:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6627:3:27"},"nodeType":"YulFunctionCall","src":"6627:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6651:7:27"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6610:16:27"},"nodeType":"YulFunctionCall","src":"6610:49:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6600:6:27"}]}]},"name":"abi_decode_tuple_t_uint256t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6331:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6342:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6354:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6362:6:27","type":""}],"src":"6276:389:27"},{"body":{"nodeType":"YulBlock","src":"6750:241:27","statements":[{"body":{"nodeType":"YulBlock","src":"6796:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6805:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6808:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6798:6:27"},"nodeType":"YulFunctionCall","src":"6798:12:27"},"nodeType":"YulExpressionStatement","src":"6798:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6771:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6780:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6767:3:27"},"nodeType":"YulFunctionCall","src":"6767:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6792:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6763:3:27"},"nodeType":"YulFunctionCall","src":"6763:32:27"},"nodeType":"YulIf","src":"6760:52:27"},{"nodeType":"YulVariableDeclaration","src":"6821:37:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6848:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6835:12:27"},"nodeType":"YulFunctionCall","src":"6835:23:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6825:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"6901:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6910:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6913:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6903:6:27"},"nodeType":"YulFunctionCall","src":"6903:12:27"},"nodeType":"YulExpressionStatement","src":"6903:12:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6873:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6881:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6870:2:27"},"nodeType":"YulFunctionCall","src":"6870:30:27"},"nodeType":"YulIf","src":"6867:50:27"},{"nodeType":"YulAssignment","src":"6926:59:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6957:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6968:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6953:3:27"},"nodeType":"YulFunctionCall","src":"6953:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6977:7:27"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"6936:16:27"},"nodeType":"YulFunctionCall","src":"6936:49:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6926:6:27"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6716:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6727:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6739:6:27","type":""}],"src":"6670:321:27"},{"body":{"nodeType":"YulBlock","src":"7127:102:27","statements":[{"nodeType":"YulAssignment","src":"7137:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7149:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7160:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7145:3:27"},"nodeType":"YulFunctionCall","src":"7145:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7137:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7179:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7194:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7210:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7215:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7206:3:27"},"nodeType":"YulFunctionCall","src":"7206:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"7219:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7202:3:27"},"nodeType":"YulFunctionCall","src":"7202:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7190:3:27"},"nodeType":"YulFunctionCall","src":"7190:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7172:6:27"},"nodeType":"YulFunctionCall","src":"7172:51:27"},"nodeType":"YulExpressionStatement","src":"7172:51:27"}]},"name":"abi_encode_tuple_t_contract$_IVRFCoordinatorV2Plus_$2448__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7096:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7107:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7118:4:27","type":""}],"src":"6996:233:27"},{"body":{"nodeType":"YulBlock","src":"7318:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"7364:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7376:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7366:6:27"},"nodeType":"YulFunctionCall","src":"7366:12:27"},"nodeType":"YulExpressionStatement","src":"7366:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7339:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7348:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7335:3:27"},"nodeType":"YulFunctionCall","src":"7335:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7360:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7331:3:27"},"nodeType":"YulFunctionCall","src":"7331:32:27"},"nodeType":"YulIf","src":"7328:52:27"},{"nodeType":"YulAssignment","src":"7389:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7418:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7399:18:27"},"nodeType":"YulFunctionCall","src":"7399:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7389:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"7437:45:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7467:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7478:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7463:3:27"},"nodeType":"YulFunctionCall","src":"7463:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7450:12:27"},"nodeType":"YulFunctionCall","src":"7450:32:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7441:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7535:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7544:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7547:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7537:6:27"},"nodeType":"YulFunctionCall","src":"7537:12:27"},"nodeType":"YulExpressionStatement","src":"7537:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7504:5:27"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7525:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7518:6:27"},"nodeType":"YulFunctionCall","src":"7518:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7511:6:27"},"nodeType":"YulFunctionCall","src":"7511:21:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7501:2:27"},"nodeType":"YulFunctionCall","src":"7501:32:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7494:6:27"},"nodeType":"YulFunctionCall","src":"7494:40:27"},"nodeType":"YulIf","src":"7491:60:27"},{"nodeType":"YulAssignment","src":"7560:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"7570:5:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7560:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7276:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7287:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7299:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7307:6:27","type":""}],"src":"7234:347:27"},{"body":{"nodeType":"YulBlock","src":"7716:407:27","statements":[{"body":{"nodeType":"YulBlock","src":"7763:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7772:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7775:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7765:6:27"},"nodeType":"YulFunctionCall","src":"7765:12:27"},"nodeType":"YulExpressionStatement","src":"7765:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7737:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7746:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7733:3:27"},"nodeType":"YulFunctionCall","src":"7733:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7758:3:27","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7729:3:27"},"nodeType":"YulFunctionCall","src":"7729:33:27"},"nodeType":"YulIf","src":"7726:53:27"},{"nodeType":"YulAssignment","src":"7788:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7817:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7798:18:27"},"nodeType":"YulFunctionCall","src":"7798:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7788:6:27"}]},{"nodeType":"YulAssignment","src":"7836:48:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7869:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7880:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7865:3:27"},"nodeType":"YulFunctionCall","src":"7865:18:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"7846:18:27"},"nodeType":"YulFunctionCall","src":"7846:38:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7836:6:27"}]},{"nodeType":"YulAssignment","src":"7893:42:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7920:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7931:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7916:3:27"},"nodeType":"YulFunctionCall","src":"7916:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7903:12:27"},"nodeType":"YulFunctionCall","src":"7903:32:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7893:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"7944:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7975:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7986:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7971:3:27"},"nodeType":"YulFunctionCall","src":"7971:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7958:12:27"},"nodeType":"YulFunctionCall","src":"7958:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7948:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"8033:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8042:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8045:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8035:6:27"},"nodeType":"YulFunctionCall","src":"8035:12:27"},"nodeType":"YulExpressionStatement","src":"8035:12:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8005:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8013:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8002:2:27"},"nodeType":"YulFunctionCall","src":"8002:30:27"},"nodeType":"YulIf","src":"7999:50:27"},{"nodeType":"YulAssignment","src":"8058:59:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8089:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8100:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8085:3:27"},"nodeType":"YulFunctionCall","src":"8085:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8109:7:27"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"8068:16:27"},"nodeType":"YulFunctionCall","src":"8068:49:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8058:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7658:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7669:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7681:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7689:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7697:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7705:6:27","type":""}],"src":"7586:537:27"},{"body":{"nodeType":"YulBlock","src":"8215:173:27","statements":[{"body":{"nodeType":"YulBlock","src":"8261:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8270:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8273:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8263:6:27"},"nodeType":"YulFunctionCall","src":"8263:12:27"},"nodeType":"YulExpressionStatement","src":"8263:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8236:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8245:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8232:3:27"},"nodeType":"YulFunctionCall","src":"8232:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8257:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8228:3:27"},"nodeType":"YulFunctionCall","src":"8228:32:27"},"nodeType":"YulIf","src":"8225:52:27"},{"nodeType":"YulAssignment","src":"8286:39:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8315:9:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8296:18:27"},"nodeType":"YulFunctionCall","src":"8296:29:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8286:6:27"}]},{"nodeType":"YulAssignment","src":"8334:48:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8367:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8378:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8363:3:27"},"nodeType":"YulFunctionCall","src":"8363:18:27"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"8344:18:27"},"nodeType":"YulFunctionCall","src":"8344:38:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8334:6:27"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8173:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8184:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8196:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8204:6:27","type":""}],"src":"8128:260:27"},{"body":{"nodeType":"YulBlock","src":"8463:110:27","statements":[{"body":{"nodeType":"YulBlock","src":"8509:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8518:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8521:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8511:6:27"},"nodeType":"YulFunctionCall","src":"8511:12:27"},"nodeType":"YulExpressionStatement","src":"8511:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8484:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8493:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8480:3:27"},"nodeType":"YulFunctionCall","src":"8480:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8505:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8476:3:27"},"nodeType":"YulFunctionCall","src":"8476:32:27"},"nodeType":"YulIf","src":"8473:52:27"},{"nodeType":"YulAssignment","src":"8534:33:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8557:9:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8544:12:27"},"nodeType":"YulFunctionCall","src":"8544:23:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8534:6:27"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8429:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8440:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8452:6:27","type":""}],"src":"8393:180:27"},{"body":{"nodeType":"YulBlock","src":"8729:204:27","statements":[{"nodeType":"YulAssignment","src":"8739:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8751:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8762:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8747:3:27"},"nodeType":"YulFunctionCall","src":"8747:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8739:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8781:9:27"},{"name":"value0","nodeType":"YulIdentifier","src":"8792:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8774:6:27"},"nodeType":"YulFunctionCall","src":"8774:25:27"},"nodeType":"YulExpressionStatement","src":"8774:25:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8819:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8830:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8815:3:27"},"nodeType":"YulFunctionCall","src":"8815:18:27"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8839:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8855:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"8860:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8851:3:27"},"nodeType":"YulFunctionCall","src":"8851:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"8864:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8847:3:27"},"nodeType":"YulFunctionCall","src":"8847:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8835:3:27"},"nodeType":"YulFunctionCall","src":"8835:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8808:6:27"},"nodeType":"YulFunctionCall","src":"8808:60:27"},"nodeType":"YulExpressionStatement","src":"8808:60:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8888:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8899:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8884:3:27"},"nodeType":"YulFunctionCall","src":"8884:18:27"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8918:6:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8911:6:27"},"nodeType":"YulFunctionCall","src":"8911:14:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8904:6:27"},"nodeType":"YulFunctionCall","src":"8904:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8877:6:27"},"nodeType":"YulFunctionCall","src":"8877:50:27"},"nodeType":"YulExpressionStatement","src":"8877:50:27"}]},"name":"abi_encode_tuple_t_uint256_t_address_t_bool__to_t_uint256_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8682:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8693:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8701:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8709:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8720:4:27","type":""}],"src":"8578:355:27"},{"body":{"nodeType":"YulBlock","src":"8993:325:27","statements":[{"nodeType":"YulAssignment","src":"9003:22:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9017:1:27","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"9020:4:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9013:3:27"},"nodeType":"YulFunctionCall","src":"9013:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9003:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"9034:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9064:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"9070:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9060:3:27"},"nodeType":"YulFunctionCall","src":"9060:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9038:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"9111:31:27","statements":[{"nodeType":"YulAssignment","src":"9113:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9127:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"9135:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9123:3:27"},"nodeType":"YulFunctionCall","src":"9123:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9113:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9091:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9084:6:27"},"nodeType":"YulFunctionCall","src":"9084:26:27"},"nodeType":"YulIf","src":"9081:61:27"},{"body":{"nodeType":"YulBlock","src":"9201:111:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9222:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9229:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9234:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9225:3:27"},"nodeType":"YulFunctionCall","src":"9225:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9215:6:27"},"nodeType":"YulFunctionCall","src":"9215:31:27"},"nodeType":"YulExpressionStatement","src":"9215:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9269:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9259:6:27"},"nodeType":"YulFunctionCall","src":"9259:15:27"},"nodeType":"YulExpressionStatement","src":"9259:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9294:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9297:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9287:6:27"},"nodeType":"YulFunctionCall","src":"9287:15:27"},"nodeType":"YulExpressionStatement","src":"9287:15:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9157:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9180:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"9188:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9177:2:27"},"nodeType":"YulFunctionCall","src":"9177:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9154:2:27"},"nodeType":"YulFunctionCall","src":"9154:38:27"},"nodeType":"YulIf","src":"9151:161:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8973:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8982:6:27","type":""}],"src":"8938:380:27"},{"body":{"nodeType":"YulBlock","src":"9452:175:27","statements":[{"nodeType":"YulAssignment","src":"9462:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9474:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9485:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9470:3:27"},"nodeType":"YulFunctionCall","src":"9470:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9462:4:27"}]},{"nodeType":"YulVariableDeclaration","src":"9497:29:27","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9515:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9520:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9511:3:27"},"nodeType":"YulFunctionCall","src":"9511:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"9524:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9507:3:27"},"nodeType":"YulFunctionCall","src":"9507:19:27"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9501:2:27","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9542:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9557:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"9565:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9553:3:27"},"nodeType":"YulFunctionCall","src":"9553:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9535:6:27"},"nodeType":"YulFunctionCall","src":"9535:34:27"},"nodeType":"YulExpressionStatement","src":"9535:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9589:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9600:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9585:3:27"},"nodeType":"YulFunctionCall","src":"9585:18:27"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9609:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"9617:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9605:3:27"},"nodeType":"YulFunctionCall","src":"9605:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9578:6:27"},"nodeType":"YulFunctionCall","src":"9578:43:27"},"nodeType":"YulExpressionStatement","src":"9578:43:27"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9413:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9424:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9432:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9443:4:27","type":""}],"src":"9323:304:27"},{"body":{"nodeType":"YulBlock","src":"9789:218:27","statements":[{"nodeType":"YulAssignment","src":"9799:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9811:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9822:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9807:3:27"},"nodeType":"YulFunctionCall","src":"9807:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9799:4:27"}]},{"nodeType":"YulVariableDeclaration","src":"9834:29:27","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9852:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9857:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9848:3:27"},"nodeType":"YulFunctionCall","src":"9848:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"9861:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9844:3:27"},"nodeType":"YulFunctionCall","src":"9844:19:27"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9838:2:27","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9879:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9894:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"9902:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9890:3:27"},"nodeType":"YulFunctionCall","src":"9890:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9872:6:27"},"nodeType":"YulFunctionCall","src":"9872:34:27"},"nodeType":"YulExpressionStatement","src":"9872:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9926:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9937:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9922:3:27"},"nodeType":"YulFunctionCall","src":"9922:18:27"},{"name":"value1","nodeType":"YulIdentifier","src":"9942:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9915:6:27"},"nodeType":"YulFunctionCall","src":"9915:34:27"},"nodeType":"YulExpressionStatement","src":"9915:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9969:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9980:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9965:3:27"},"nodeType":"YulFunctionCall","src":"9965:18:27"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9989:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"9997:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9985:3:27"},"nodeType":"YulFunctionCall","src":"9985:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9958:6:27"},"nodeType":"YulFunctionCall","src":"9958:43:27"},"nodeType":"YulExpressionStatement","src":"9958:43:27"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9742:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9753:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9761:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9769:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9780:4:27","type":""}],"src":"9632:375:27"},{"body":{"nodeType":"YulBlock","src":"10186:168:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10203:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10214:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10196:6:27"},"nodeType":"YulFunctionCall","src":"10196:21:27"},"nodeType":"YulExpressionStatement","src":"10196:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10237:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10248:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10233:3:27"},"nodeType":"YulFunctionCall","src":"10233:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"10253:2:27","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10226:6:27"},"nodeType":"YulFunctionCall","src":"10226:30:27"},"nodeType":"YulExpressionStatement","src":"10226:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10276:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10287:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10272:3:27"},"nodeType":"YulFunctionCall","src":"10272:18:27"},{"hexValue":"436f6e747261637420697320706175736564","kind":"string","nodeType":"YulLiteral","src":"10292:20:27","type":"","value":"Contract is paused"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10265:6:27"},"nodeType":"YulFunctionCall","src":"10265:48:27"},"nodeType":"YulExpressionStatement","src":"10265:48:27"},{"nodeType":"YulAssignment","src":"10322:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10334:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10345:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10330:3:27"},"nodeType":"YulFunctionCall","src":"10330:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10322:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_e55600974a468a5baf1f1454a24481ec68f787ee02cd9f1d97c35ce2a8d2093d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10163:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10177:4:27","type":""}],"src":"10012:342:27"},{"body":{"nodeType":"YulBlock","src":"10391:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10408:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10415:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10420:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10411:3:27"},"nodeType":"YulFunctionCall","src":"10411:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10401:6:27"},"nodeType":"YulFunctionCall","src":"10401:31:27"},"nodeType":"YulExpressionStatement","src":"10401:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10448:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10451:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10441:6:27"},"nodeType":"YulFunctionCall","src":"10441:15:27"},"nodeType":"YulExpressionStatement","src":"10441:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10472:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10475:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10465:6:27"},"nodeType":"YulFunctionCall","src":"10465:15:27"},"nodeType":"YulExpressionStatement","src":"10465:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10359:127:27"},{"body":{"nodeType":"YulBlock","src":"10538:88:27","statements":[{"body":{"nodeType":"YulBlock","src":"10569:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"10571:16:27"},"nodeType":"YulFunctionCall","src":"10571:18:27"},"nodeType":"YulExpressionStatement","src":"10571:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10554:5:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10565:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10561:3:27"},"nodeType":"YulFunctionCall","src":"10561:6:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10551:2:27"},"nodeType":"YulFunctionCall","src":"10551:17:27"},"nodeType":"YulIf","src":"10548:43:27"},{"nodeType":"YulAssignment","src":"10600:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10611:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"10618:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10607:3:27"},"nodeType":"YulFunctionCall","src":"10607:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"10600:3:27"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10520:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"10530:3:27","type":""}],"src":"10491:135:27"},{"body":{"nodeType":"YulBlock","src":"10804:595:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10821:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10832:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10814:6:27"},"nodeType":"YulFunctionCall","src":"10814:21:27"},"nodeType":"YulExpressionStatement","src":"10814:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10855:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10866:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10851:3:27"},"nodeType":"YulFunctionCall","src":"10851:18:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10877:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10871:5:27"},"nodeType":"YulFunctionCall","src":"10871:13:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10844:6:27"},"nodeType":"YulFunctionCall","src":"10844:41:27"},"nodeType":"YulExpressionStatement","src":"10844:41:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10905:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10916:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10901:3:27"},"nodeType":"YulFunctionCall","src":"10901:18:27"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10931:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10939:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10927:3:27"},"nodeType":"YulFunctionCall","src":"10927:15:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10921:5:27"},"nodeType":"YulFunctionCall","src":"10921:22:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10894:6:27"},"nodeType":"YulFunctionCall","src":"10894:50:27"},"nodeType":"YulExpressionStatement","src":"10894:50:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10964:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10975:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10960:3:27"},"nodeType":"YulFunctionCall","src":"10960:18:27"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10994:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11002:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10990:3:27"},"nodeType":"YulFunctionCall","src":"10990:15:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10984:5:27"},"nodeType":"YulFunctionCall","src":"10984:22:27"},{"kind":"number","nodeType":"YulLiteral","src":"11008:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10980:3:27"},"nodeType":"YulFunctionCall","src":"10980:35:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10953:6:27"},"nodeType":"YulFunctionCall","src":"10953:63:27"},"nodeType":"YulExpressionStatement","src":"10953:63:27"},{"nodeType":"YulVariableDeclaration","src":"11025:42:27","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11055:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11063:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11051:3:27"},"nodeType":"YulFunctionCall","src":"11051:15:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11045:5:27"},"nodeType":"YulFunctionCall","src":"11045:22:27"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"11029:12:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11076:20:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11086:10:27","type":"","value":"0xffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11080:2:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11116:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11127:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11112:3:27"},"nodeType":"YulFunctionCall","src":"11112:19:27"},{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"11137:12:27"},{"name":"_1","nodeType":"YulIdentifier","src":"11151:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11133:3:27"},"nodeType":"YulFunctionCall","src":"11133:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11105:6:27"},"nodeType":"YulFunctionCall","src":"11105:50:27"},"nodeType":"YulExpressionStatement","src":"11105:50:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11175:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11186:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11171:3:27"},"nodeType":"YulFunctionCall","src":"11171:19:27"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11206:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11214:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11202:3:27"},"nodeType":"YulFunctionCall","src":"11202:16:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11196:5:27"},"nodeType":"YulFunctionCall","src":"11196:23:27"},{"name":"_1","nodeType":"YulIdentifier","src":"11221:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11192:3:27"},"nodeType":"YulFunctionCall","src":"11192:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11164:6:27"},"nodeType":"YulFunctionCall","src":"11164:61:27"},"nodeType":"YulExpressionStatement","src":"11164:61:27"},{"nodeType":"YulVariableDeclaration","src":"11234:45:27","value":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11266:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11274:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11262:3:27"},"nodeType":"YulFunctionCall","src":"11262:16:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11256:5:27"},"nodeType":"YulFunctionCall","src":"11256:23:27"},"variables":[{"name":"memberValue0_1","nodeType":"YulTypedName","src":"11238:14:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11299:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11310:4:27","type":"","value":"0xc0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11295:3:27"},"nodeType":"YulFunctionCall","src":"11295:20:27"},{"kind":"number","nodeType":"YulLiteral","src":"11317:4:27","type":"","value":"0xc0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11288:6:27"},"nodeType":"YulFunctionCall","src":"11288:34:27"},"nodeType":"YulExpressionStatement","src":"11288:34:27"},{"nodeType":"YulAssignment","src":"11331:62:27","value":{"arguments":[{"name":"memberValue0_1","nodeType":"YulIdentifier","src":"11357:14:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11377:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11388:3:27","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11373:3:27"},"nodeType":"YulFunctionCall","src":"11373:19:27"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"11339:17:27"},"nodeType":"YulFunctionCall","src":"11339:54:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11331:4:27"}]}]},"name":"abi_encode_tuple_t_struct$_RandomWordsRequest_$2577_memory_ptr__to_t_struct$_RandomWordsRequest_$2577_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10773:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10784:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10795:4:27","type":""}],"src":"10631:768:27"},{"body":{"nodeType":"YulBlock","src":"11485:103:27","statements":[{"body":{"nodeType":"YulBlock","src":"11531:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11540:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11543:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11533:6:27"},"nodeType":"YulFunctionCall","src":"11533:12:27"},"nodeType":"YulExpressionStatement","src":"11533:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11506:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"11515:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11502:3:27"},"nodeType":"YulFunctionCall","src":"11502:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"11527:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11498:3:27"},"nodeType":"YulFunctionCall","src":"11498:32:27"},"nodeType":"YulIf","src":"11495:52:27"},{"nodeType":"YulAssignment","src":"11556:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11572:9:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11566:5:27"},"nodeType":"YulFunctionCall","src":"11566:16:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11556:6:27"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11451:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11462:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11474:6:27","type":""}],"src":"11404:184:27"},{"body":{"nodeType":"YulBlock","src":"11720:136:27","statements":[{"nodeType":"YulAssignment","src":"11730:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11742:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11753:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11738:3:27"},"nodeType":"YulFunctionCall","src":"11738:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11730:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11772:9:27"},{"name":"value0","nodeType":"YulIdentifier","src":"11783:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11765:6:27"},"nodeType":"YulFunctionCall","src":"11765:25:27"},"nodeType":"YulExpressionStatement","src":"11765:25:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11810:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11821:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11806:3:27"},"nodeType":"YulFunctionCall","src":"11806:18:27"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11830:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11838:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11826:3:27"},"nodeType":"YulFunctionCall","src":"11826:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11799:6:27"},"nodeType":"YulFunctionCall","src":"11799:51:27"},"nodeType":"YulExpressionStatement","src":"11799:51:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint32__to_t_uint256_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11681:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11692:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11700:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11711:4:27","type":""}],"src":"11593:263:27"},{"body":{"nodeType":"YulBlock","src":"12035:169:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12052:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12063:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12045:6:27"},"nodeType":"YulFunctionCall","src":"12045:21:27"},"nodeType":"YulExpressionStatement","src":"12045:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12086:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12097:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12082:3:27"},"nodeType":"YulFunctionCall","src":"12082:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"12102:2:27","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12075:6:27"},"nodeType":"YulFunctionCall","src":"12075:30:27"},"nodeType":"YulExpressionStatement","src":"12075:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12125:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12136:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12121:3:27"},"nodeType":"YulFunctionCall","src":"12121:18:27"},{"hexValue":"496e646578206f7574206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"12141:21:27","type":"","value":"Index out of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12114:6:27"},"nodeType":"YulFunctionCall","src":"12114:49:27"},"nodeType":"YulExpressionStatement","src":"12114:49:27"},{"nodeType":"YulAssignment","src":"12172:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12184:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12195:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12180:3:27"},"nodeType":"YulFunctionCall","src":"12180:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12172:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12012:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12026:4:27","type":""}],"src":"11861:343:27"},{"body":{"nodeType":"YulBlock","src":"12258:79:27","statements":[{"nodeType":"YulAssignment","src":"12268:17:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12280:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"12283:1:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12276:3:27"},"nodeType":"YulFunctionCall","src":"12276:9:27"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"12268:4:27"}]},{"body":{"nodeType":"YulBlock","src":"12309:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12311:16:27"},"nodeType":"YulFunctionCall","src":"12311:18:27"},"nodeType":"YulExpressionStatement","src":"12311:18:27"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"12300:4:27"},{"name":"x","nodeType":"YulIdentifier","src":"12306:1:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12297:2:27"},"nodeType":"YulFunctionCall","src":"12297:11:27"},"nodeType":"YulIf","src":"12294:37:27"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12240:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"12243:1:27","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"12249:4:27","type":""}],"src":"12209:128:27"},{"body":{"nodeType":"YulBlock","src":"12374:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12391:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12398:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12403:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12394:3:27"},"nodeType":"YulFunctionCall","src":"12394:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12384:6:27"},"nodeType":"YulFunctionCall","src":"12384:31:27"},"nodeType":"YulExpressionStatement","src":"12384:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12431:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12434:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12424:6:27"},"nodeType":"YulFunctionCall","src":"12424:15:27"},"nodeType":"YulExpressionStatement","src":"12424:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12455:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12458:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12448:6:27"},"nodeType":"YulFunctionCall","src":"12448:15:27"},"nodeType":"YulExpressionStatement","src":"12448:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"12342:127:27"},{"body":{"nodeType":"YulBlock","src":"12530:65:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12547:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"12550:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12540:6:27"},"nodeType":"YulFunctionCall","src":"12540:14:27"},"nodeType":"YulExpressionStatement","src":"12540:14:27"},{"nodeType":"YulAssignment","src":"12563:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12581:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12584:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12571:9:27"},"nodeType":"YulFunctionCall","src":"12571:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"12563:4:27"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"12513:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"12521:4:27","type":""}],"src":"12474:121:27"},{"body":{"nodeType":"YulBlock","src":"12681:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"12714:425:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12728:11:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12738:1:27","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12732:2:27","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"12759:2:27"},{"name":"array","nodeType":"YulIdentifier","src":"12763:5:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12752:6:27"},"nodeType":"YulFunctionCall","src":"12752:17:27"},"nodeType":"YulExpressionStatement","src":"12752:17:27"},{"nodeType":"YulVariableDeclaration","src":"12782:31:27","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"12804:2:27"},{"kind":"number","nodeType":"YulLiteral","src":"12808:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"12794:9:27"},"nodeType":"YulFunctionCall","src":"12794:19:27"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"12786:4:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"12826:57:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12849:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12859:1:27","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"12866:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"12878:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12862:3:27"},"nodeType":"YulFunctionCall","src":"12862:19:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12855:3:27"},"nodeType":"YulFunctionCall","src":"12855:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12845:3:27"},"nodeType":"YulFunctionCall","src":"12845:38:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"12830:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"12920:23:27","statements":[{"nodeType":"YulAssignment","src":"12922:19:27","value":{"name":"data","nodeType":"YulIdentifier","src":"12937:4:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"12922:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"12902:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"12914:4:27","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12899:2:27"},"nodeType":"YulFunctionCall","src":"12899:20:27"},"nodeType":"YulIf","src":"12896:47:27"},{"nodeType":"YulVariableDeclaration","src":"12956:41:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"12970:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12980:1:27","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"12987:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12992:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12983:3:27"},"nodeType":"YulFunctionCall","src":"12983:12:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"12976:3:27"},"nodeType":"YulFunctionCall","src":"12976:20:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12966:3:27"},"nodeType":"YulFunctionCall","src":"12966:31:27"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"12960:2:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13010:24:27","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"13023:11:27"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"13014:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"13108:21:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13117:5:27"},{"name":"_1","nodeType":"YulIdentifier","src":"13124:2:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"13110:6:27"},"nodeType":"YulFunctionCall","src":"13110:17:27"},"nodeType":"YulExpressionStatement","src":"13110:17:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13058:5:27"},{"name":"_2","nodeType":"YulIdentifier","src":"13065:2:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13055:2:27"},"nodeType":"YulFunctionCall","src":"13055:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13069:26:27","statements":[{"nodeType":"YulAssignment","src":"13071:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"13084:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"13091:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13080:3:27"},"nodeType":"YulFunctionCall","src":"13080:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"13071:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"13051:3:27","statements":[]},"src":"13047:82:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"12697:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12702:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12694:2:27"},"nodeType":"YulFunctionCall","src":"12694:11:27"},"nodeType":"YulIf","src":"12691:448:27"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"12653:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"12660:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"12665:10:27","type":""}],"src":"12600:545:27"},{"body":{"nodeType":"YulBlock","src":"13235:81:27","statements":[{"nodeType":"YulAssignment","src":"13245:65:27","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"13260:4:27"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13278:1:27","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"13281:3:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13274:3:27"},"nodeType":"YulFunctionCall","src":"13274:11:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13291:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13287:3:27"},"nodeType":"YulFunctionCall","src":"13287:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"13270:3:27"},"nodeType":"YulFunctionCall","src":"13270:24:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13266:3:27"},"nodeType":"YulFunctionCall","src":"13266:29:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13256:3:27"},"nodeType":"YulFunctionCall","src":"13256:40:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13302:1:27","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"13305:3:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13298:3:27"},"nodeType":"YulFunctionCall","src":"13298:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13253:2:27"},"nodeType":"YulFunctionCall","src":"13253:57:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"13245:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"13212:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"13218:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"13226:4:27","type":""}],"src":"13150:166:27"},{"body":{"nodeType":"YulBlock","src":"13418:1338:27","statements":[{"body":{"nodeType":"YulBlock","src":"13445:9:27","statements":[{"nodeType":"YulLeave","src":"13447:5:27"}]},"condition":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13434:4:27"},{"name":"src","nodeType":"YulIdentifier","src":"13440:3:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"13431:2:27"},"nodeType":"YulFunctionCall","src":"13431:13:27"},"nodeType":"YulIf","src":"13428:26:27"},{"nodeType":"YulVariableDeclaration","src":"13463:51:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13509:3:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13503:5:27"},"nodeType":"YulFunctionCall","src":"13503:10:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"13477:25:27"},"nodeType":"YulFunctionCall","src":"13477:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"13467:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"13557:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13559:16:27"},"nodeType":"YulFunctionCall","src":"13559:18:27"},"nodeType":"YulExpressionStatement","src":"13559:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"13529:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13537:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13526:2:27"},"nodeType":"YulFunctionCall","src":"13526:30:27"},"nodeType":"YulIf","src":"13523:56:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13632:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13670:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"13664:5:27"},"nodeType":"YulFunctionCall","src":"13664:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"13638:25:27"},"nodeType":"YulFunctionCall","src":"13638:38:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"13678:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"13588:43:27"},"nodeType":"YulFunctionCall","src":"13588:97:27"},"nodeType":"YulExpressionStatement","src":"13588:97:27"},{"nodeType":"YulVariableDeclaration","src":"13694:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"13711:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"13698:9:27","type":""}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"13758:741:27","statements":[{"nodeType":"YulVariableDeclaration","src":"13772:35:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"13791:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13803:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13799:3:27"},"nodeType":"YulFunctionCall","src":"13799:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13787:3:27"},"nodeType":"YulFunctionCall","src":"13787:20:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"13776:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13820:47:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13863:3:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"13833:29:27"},"nodeType":"YulFunctionCall","src":"13833:34:27"},"variables":[{"name":"src_1","nodeType":"YulTypedName","src":"13824:5:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13880:49:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"13924:4:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"13894:29:27"},"nodeType":"YulFunctionCall","src":"13894:35:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"13884:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13942:18:27","value":{"name":"srcOffset","nodeType":"YulIdentifier","src":"13951:9:27"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13946:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"14030:194:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14055:6:27"},{"arguments":[{"arguments":[{"name":"src_1","nodeType":"YulIdentifier","src":"14073:5:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14080:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14069:3:27"},"nodeType":"YulFunctionCall","src":"14069:21:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"14063:5:27"},"nodeType":"YulFunctionCall","src":"14063:28:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14048:6:27"},"nodeType":"YulFunctionCall","src":"14048:44:27"},"nodeType":"YulExpressionStatement","src":"14048:44:27"},{"nodeType":"YulVariableDeclaration","src":"14109:11:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14119:1:27","type":"","value":"1"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14113:2:27","type":""}]},{"nodeType":"YulAssignment","src":"14137:25:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14151:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"14159:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14147:3:27"},"nodeType":"YulFunctionCall","src":"14147:15:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14137:6:27"}]},{"nodeType":"YulAssignment","src":"14179:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"14196:9:27"},{"name":"_1","nodeType":"YulIdentifier","src":"14207:2:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14192:3:27"},"nodeType":"YulFunctionCall","src":"14192:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"14179:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13984:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"13987:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13981:2:27"},"nodeType":"YulFunctionCall","src":"13981:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13996:21:27","statements":[{"nodeType":"YulAssignment","src":"13998:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"14007:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"14010:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14003:3:27"},"nodeType":"YulFunctionCall","src":"14003:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13998:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"13977:3:27","statements":[]},"src":"13973:251:27"},{"body":{"nodeType":"YulBlock","src":"14272:168:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14290:45:27","value":{"arguments":[{"arguments":[{"name":"src_1","nodeType":"YulIdentifier","src":"14317:5:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14324:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14313:3:27"},"nodeType":"YulFunctionCall","src":"14313:21:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"14307:5:27"},"nodeType":"YulFunctionCall","src":"14307:28:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"14294:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"14359:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"14371:9:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14398:1:27","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"14401:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14394:3:27"},"nodeType":"YulFunctionCall","src":"14394:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"14410:3:27","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14390:3:27"},"nodeType":"YulFunctionCall","src":"14390:24:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14420:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14416:3:27"},"nodeType":"YulFunctionCall","src":"14416:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"14386:3:27"},"nodeType":"YulFunctionCall","src":"14386:37:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"14382:3:27"},"nodeType":"YulFunctionCall","src":"14382:42:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14367:3:27"},"nodeType":"YulFunctionCall","src":"14367:58:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14352:6:27"},"nodeType":"YulFunctionCall","src":"14352:74:27"},"nodeType":"YulExpressionStatement","src":"14352:74:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"14243:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"14252:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14240:2:27"},"nodeType":"YulFunctionCall","src":"14240:19:27"},"nodeType":"YulIf","src":"14237:203:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14460:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14474:1:27","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"14477:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14470:3:27"},"nodeType":"YulFunctionCall","src":"14470:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"14486:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14466:3:27"},"nodeType":"YulFunctionCall","src":"14466:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14453:6:27"},"nodeType":"YulFunctionCall","src":"14453:36:27"},"nodeType":"YulExpressionStatement","src":"14453:36:27"}]},"nodeType":"YulCase","src":"13751:748:27","value":{"kind":"number","nodeType":"YulLiteral","src":"13756:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"14516:234:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14530:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14543:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14534:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"14579:67:27","statements":[{"nodeType":"YulAssignment","src":"14597:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"14616:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"14621:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14612:3:27"},"nodeType":"YulFunctionCall","src":"14612:19:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"14606:5:27"},"nodeType":"YulFunctionCall","src":"14606:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"14597:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"14560:6:27"},"nodeType":"YulIf","src":"14557:89:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"14666:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14725:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"14732:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"14672:52:27"},"nodeType":"YulFunctionCall","src":"14672:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"14659:6:27"},"nodeType":"YulFunctionCall","src":"14659:81:27"},"nodeType":"YulExpressionStatement","src":"14659:81:27"}]},"nodeType":"YulCase","src":"14508:242:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"13731:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13739:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13728:2:27"},"nodeType":"YulFunctionCall","src":"13728:14:27"},"nodeType":"YulSwitch","src":"13721:1029:27"}]},"name":"copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"13403:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"13409:3:27","type":""}],"src":"13321:1435:27"},{"body":{"nodeType":"YulBlock","src":"14793:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14810:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14817:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"14822:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14813:3:27"},"nodeType":"YulFunctionCall","src":"14813:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14803:6:27"},"nodeType":"YulFunctionCall","src":"14803:31:27"},"nodeType":"YulExpressionStatement","src":"14803:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14850:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14853:4:27","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14843:6:27"},"nodeType":"YulFunctionCall","src":"14843:15:27"},"nodeType":"YulExpressionStatement","src":"14843:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14874:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14877:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14867:6:27"},"nodeType":"YulFunctionCall","src":"14867:15:27"},"nodeType":"YulExpressionStatement","src":"14867:15:27"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"14761:127:27"},{"body":{"nodeType":"YulBlock","src":"15067:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15084:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15095:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15077:6:27"},"nodeType":"YulFunctionCall","src":"15077:21:27"},"nodeType":"YulExpressionStatement","src":"15077:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15118:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15129:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15114:3:27"},"nodeType":"YulFunctionCall","src":"15114:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"15134:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15107:6:27"},"nodeType":"YulFunctionCall","src":"15107:30:27"},"nodeType":"YulExpressionStatement","src":"15107:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15157:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15168:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15153:3:27"},"nodeType":"YulFunctionCall","src":"15153:18:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15173:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15146:6:27"},"nodeType":"YulFunctionCall","src":"15146:52:27"},"nodeType":"YulExpressionStatement","src":"15146:52:27"},{"nodeType":"YulAssignment","src":"15207:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15219:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15230:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15215:3:27"},"nodeType":"YulFunctionCall","src":"15215:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15207:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15044:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15058:4:27","type":""}],"src":"14893:346:27"},{"body":{"nodeType":"YulBlock","src":"15340:1256:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15350:24:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15370:3:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15364:5:27"},"nodeType":"YulFunctionCall","src":"15364:10:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"15354:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"15417:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15419:16:27"},"nodeType":"YulFunctionCall","src":"15419:18:27"},"nodeType":"YulExpressionStatement","src":"15419:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15389:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15397:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15386:2:27"},"nodeType":"YulFunctionCall","src":"15386:30:27"},"nodeType":"YulIf","src":"15383:56:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15492:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15530:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"15524:5:27"},"nodeType":"YulFunctionCall","src":"15524:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"15498:25:27"},"nodeType":"YulFunctionCall","src":"15498:38:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"15538:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"15448:43:27"},"nodeType":"YulFunctionCall","src":"15448:97:27"},"nodeType":"YulExpressionStatement","src":"15448:97:27"},{"nodeType":"YulVariableDeclaration","src":"15554:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15571:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"15558:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15581:23:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15600:4:27","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"15585:11:27","type":""}]},{"nodeType":"YulAssignment","src":"15613:24:27","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15626:11:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"15613:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"15683:656:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15697:35:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15716:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15728:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15724:3:27"},"nodeType":"YulFunctionCall","src":"15724:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15712:3:27"},"nodeType":"YulFunctionCall","src":"15712:20:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"15701:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15745:49:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"15789:4:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"15759:29:27"},"nodeType":"YulFunctionCall","src":"15759:35:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"15749:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15807:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15816:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15811:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"15894:172:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15919:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"15937:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"15942:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15933:3:27"},"nodeType":"YulFunctionCall","src":"15933:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15927:5:27"},"nodeType":"YulFunctionCall","src":"15927:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"15912:6:27"},"nodeType":"YulFunctionCall","src":"15912:42:27"},"nodeType":"YulExpressionStatement","src":"15912:42:27"},{"nodeType":"YulAssignment","src":"15971:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15985:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15993:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15981:3:27"},"nodeType":"YulFunctionCall","src":"15981:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"15971:6:27"}]},{"nodeType":"YulAssignment","src":"16012:40:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16029:9:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"16040:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16025:3:27"},"nodeType":"YulFunctionCall","src":"16025:27:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"16012:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15841:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"15844:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15838:2:27"},"nodeType":"YulFunctionCall","src":"15838:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15853:28:27","statements":[{"nodeType":"YulAssignment","src":"15855:24:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15864:1:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"15867:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15860:3:27"},"nodeType":"YulFunctionCall","src":"15860:19:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15855:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"15834:3:27","statements":[]},"src":"15830:236:27"},{"body":{"nodeType":"YulBlock","src":"16114:166:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16132:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16159:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16164:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16155:3:27"},"nodeType":"YulFunctionCall","src":"16155:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16149:5:27"},"nodeType":"YulFunctionCall","src":"16149:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"16136:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"16199:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"16211:9:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16238:1:27","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"16241:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16234:3:27"},"nodeType":"YulFunctionCall","src":"16234:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"16250:3:27","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16230:3:27"},"nodeType":"YulFunctionCall","src":"16230:24:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16260:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16256:3:27"},"nodeType":"YulFunctionCall","src":"16256:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16226:3:27"},"nodeType":"YulFunctionCall","src":"16226:37:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"16222:3:27"},"nodeType":"YulFunctionCall","src":"16222:42:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16207:3:27"},"nodeType":"YulFunctionCall","src":"16207:58:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16192:6:27"},"nodeType":"YulFunctionCall","src":"16192:74:27"},"nodeType":"YulExpressionStatement","src":"16192:74:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"16085:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"16094:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16082:2:27"},"nodeType":"YulFunctionCall","src":"16082:19:27"},"nodeType":"YulIf","src":"16079:201:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16300:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16314:1:27","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"16317:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16310:3:27"},"nodeType":"YulFunctionCall","src":"16310:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"16326:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16306:3:27"},"nodeType":"YulFunctionCall","src":"16306:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16293:6:27"},"nodeType":"YulFunctionCall","src":"16293:36:27"},"nodeType":"YulExpressionStatement","src":"16293:36:27"}]},"nodeType":"YulCase","src":"15676:663:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15681:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"16356:234:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16370:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"16383:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"16374:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"16419:67:27","statements":[{"nodeType":"YulAssignment","src":"16437:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16456:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"16461:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16452:3:27"},"nodeType":"YulFunctionCall","src":"16452:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"16446:5:27"},"nodeType":"YulFunctionCall","src":"16446:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16437:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"16400:6:27"},"nodeType":"YulIf","src":"16397:89:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"16506:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16565:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"16572:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"16512:52:27"},"nodeType":"YulFunctionCall","src":"16512:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"16499:6:27"},"nodeType":"YulFunctionCall","src":"16499:81:27"},"nodeType":"YulExpressionStatement","src":"16499:81:27"}]},"nodeType":"YulCase","src":"16348:242:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"15656:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15664:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15653:2:27"},"nodeType":"YulFunctionCall","src":"15653:14:27"},"nodeType":"YulSwitch","src":"15646:944:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"15325:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"15331:3:27","type":""}],"src":"15244:1352:27"},{"body":{"nodeType":"YulBlock","src":"16758:227:27","statements":[{"nodeType":"YulAssignment","src":"16768:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16780:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16791:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16776:3:27"},"nodeType":"YulFunctionCall","src":"16776:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16768:4:27"}]},{"nodeType":"YulVariableDeclaration","src":"16803:29:27","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16821:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16826:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16817:3:27"},"nodeType":"YulFunctionCall","src":"16817:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"16830:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16813:3:27"},"nodeType":"YulFunctionCall","src":"16813:19:27"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16807:2:27","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16848:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16863:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"16871:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16859:3:27"},"nodeType":"YulFunctionCall","src":"16859:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16841:6:27"},"nodeType":"YulFunctionCall","src":"16841:34:27"},"nodeType":"YulExpressionStatement","src":"16841:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16895:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16906:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16891:3:27"},"nodeType":"YulFunctionCall","src":"16891:18:27"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16915:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"16923:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16911:3:27"},"nodeType":"YulFunctionCall","src":"16911:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16884:6:27"},"nodeType":"YulFunctionCall","src":"16884:43:27"},"nodeType":"YulExpressionStatement","src":"16884:43:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16947:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16958:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16943:3:27"},"nodeType":"YulFunctionCall","src":"16943:18:27"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16967:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"16975:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16963:3:27"},"nodeType":"YulFunctionCall","src":"16963:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16936:6:27"},"nodeType":"YulFunctionCall","src":"16936:43:27"},"nodeType":"YulExpressionStatement","src":"16936:43:27"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16711:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16722:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16730:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16738:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16749:4:27","type":""}],"src":"16601:384:27"},{"body":{"nodeType":"YulBlock","src":"17177:309:27","statements":[{"nodeType":"YulVariableDeclaration","src":"17187:27:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17207:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17201:5:27"},"nodeType":"YulFunctionCall","src":"17201:13:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17191:6:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17262:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17270:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17258:3:27"},"nodeType":"YulFunctionCall","src":"17258:17:27"},{"name":"pos","nodeType":"YulIdentifier","src":"17277:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"17282:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17223:34:27"},"nodeType":"YulFunctionCall","src":"17223:66:27"},"nodeType":"YulExpressionStatement","src":"17223:66:27"},{"nodeType":"YulVariableDeclaration","src":"17298:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17315:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"17320:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17311:3:27"},"nodeType":"YulFunctionCall","src":"17311:16:27"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"17302:5:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17336:29:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17358:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17352:5:27"},"nodeType":"YulFunctionCall","src":"17352:13:27"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"17340:8:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17413:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17421:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17409:3:27"},"nodeType":"YulFunctionCall","src":"17409:17:27"},{"name":"end_1","nodeType":"YulIdentifier","src":"17428:5:27"},{"name":"length_1","nodeType":"YulIdentifier","src":"17435:8:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17374:34:27"},"nodeType":"YulFunctionCall","src":"17374:70:27"},"nodeType":"YulExpressionStatement","src":"17374:70:27"},{"nodeType":"YulAssignment","src":"17453:27:27","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"17464:5:27"},{"name":"length_1","nodeType":"YulIdentifier","src":"17471:8:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17460:3:27"},"nodeType":"YulFunctionCall","src":"17460:20:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17453:3:27"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17145:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17150:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17158:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17169:3:27","type":""}],"src":"16990:496:27"},{"body":{"nodeType":"YulBlock","src":"17665:168:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17682:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17693:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17675:6:27"},"nodeType":"YulFunctionCall","src":"17675:21:27"},"nodeType":"YulExpressionStatement","src":"17675:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17716:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17727:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17712:3:27"},"nodeType":"YulFunctionCall","src":"17712:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"17732:2:27","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17705:6:27"},"nodeType":"YulFunctionCall","src":"17705:30:27"},"nodeType":"YulExpressionStatement","src":"17705:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17755:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17766:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17751:3:27"},"nodeType":"YulFunctionCall","src":"17751:18:27"},{"hexValue":"496e76616c69642072657175657374206964","kind":"string","nodeType":"YulLiteral","src":"17771:20:27","type":"","value":"Invalid request id"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17744:6:27"},"nodeType":"YulFunctionCall","src":"17744:48:27"},"nodeType":"YulExpressionStatement","src":"17744:48:27"},{"nodeType":"YulAssignment","src":"17801:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17813:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17824:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17809:3:27"},"nodeType":"YulFunctionCall","src":"17809:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17801:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0f5343873485c5c5ba9c972f367671af3745dc5cce720ddb197036ef7342b2b0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17642:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17656:4:27","type":""}],"src":"17491:342:27"},{"body":{"nodeType":"YulBlock","src":"17932:1256:27","statements":[{"nodeType":"YulVariableDeclaration","src":"17942:24:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"17962:3:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17956:5:27"},"nodeType":"YulFunctionCall","src":"17956:10:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"17946:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"18009:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"18011:16:27"},"nodeType":"YulFunctionCall","src":"18011:18:27"},"nodeType":"YulExpressionStatement","src":"18011:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"17981:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"17989:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17978:2:27"},"nodeType":"YulFunctionCall","src":"17978:30:27"},"nodeType":"YulIf","src":"17975:56:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18084:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18122:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"18116:5:27"},"nodeType":"YulFunctionCall","src":"18116:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"18090:25:27"},"nodeType":"YulFunctionCall","src":"18090:38:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"18130:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"18040:43:27"},"nodeType":"YulFunctionCall","src":"18040:97:27"},"nodeType":"YulExpressionStatement","src":"18040:97:27"},{"nodeType":"YulVariableDeclaration","src":"18146:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18163:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"18150:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18173:23:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18192:4:27","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"18177:11:27","type":""}]},{"nodeType":"YulAssignment","src":"18205:24:27","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18218:11:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18205:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"18275:656:27","statements":[{"nodeType":"YulVariableDeclaration","src":"18289:35:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"18308:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18320:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18316:3:27"},"nodeType":"YulFunctionCall","src":"18316:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18304:3:27"},"nodeType":"YulFunctionCall","src":"18304:20:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"18293:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18337:49:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18381:4:27"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"18351:29:27"},"nodeType":"YulFunctionCall","src":"18351:35:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"18341:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18399:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18408:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"18403:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"18486:172:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18511:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18529:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18534:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18525:3:27"},"nodeType":"YulFunctionCall","src":"18525:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18519:5:27"},"nodeType":"YulFunctionCall","src":"18519:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18504:6:27"},"nodeType":"YulFunctionCall","src":"18504:42:27"},"nodeType":"YulExpressionStatement","src":"18504:42:27"},{"nodeType":"YulAssignment","src":"18563:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18577:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18585:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18573:3:27"},"nodeType":"YulFunctionCall","src":"18573:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18563:6:27"}]},{"nodeType":"YulAssignment","src":"18604:40:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18621:9:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18632:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18617:3:27"},"nodeType":"YulFunctionCall","src":"18617:27:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"18604:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18433:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"18436:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18430:2:27"},"nodeType":"YulFunctionCall","src":"18430:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"18445:28:27","statements":[{"nodeType":"YulAssignment","src":"18447:24:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"18456:1:27"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"18459:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18452:3:27"},"nodeType":"YulFunctionCall","src":"18452:19:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"18447:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"18426:3:27","statements":[]},"src":"18422:236:27"},{"body":{"nodeType":"YulBlock","src":"18706:166:27","statements":[{"nodeType":"YulVariableDeclaration","src":"18724:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"18751:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"18756:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18747:3:27"},"nodeType":"YulFunctionCall","src":"18747:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18741:5:27"},"nodeType":"YulFunctionCall","src":"18741:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"18728:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"18791:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"18803:9:27"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18830:1:27","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"18833:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18826:3:27"},"nodeType":"YulFunctionCall","src":"18826:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"18842:3:27","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18822:3:27"},"nodeType":"YulFunctionCall","src":"18822:24:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18852:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18848:3:27"},"nodeType":"YulFunctionCall","src":"18848:6:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"18818:3:27"},"nodeType":"YulFunctionCall","src":"18818:37:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"18814:3:27"},"nodeType":"YulFunctionCall","src":"18814:42:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18799:3:27"},"nodeType":"YulFunctionCall","src":"18799:58:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18784:6:27"},"nodeType":"YulFunctionCall","src":"18784:74:27"},"nodeType":"YulExpressionStatement","src":"18784:74:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"18677:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"18686:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"18674:2:27"},"nodeType":"YulFunctionCall","src":"18674:19:27"},"nodeType":"YulIf","src":"18671:201:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"18892:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18906:1:27","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"18909:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18902:3:27"},"nodeType":"YulFunctionCall","src":"18902:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"18918:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18898:3:27"},"nodeType":"YulFunctionCall","src":"18898:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"18885:6:27"},"nodeType":"YulFunctionCall","src":"18885:36:27"},"nodeType":"YulExpressionStatement","src":"18885:36:27"}]},"nodeType":"YulCase","src":"18268:663:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18273:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"18948:234:27","statements":[{"nodeType":"YulVariableDeclaration","src":"18962:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18975:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"18966:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"19011:67:27","statements":[{"nodeType":"YulAssignment","src":"19029:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"19048:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"19053:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19044:3:27"},"nodeType":"YulFunctionCall","src":"19044:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19038:5:27"},"nodeType":"YulFunctionCall","src":"19038:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"19029:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"18992:6:27"},"nodeType":"YulIf","src":"18989:89:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"19098:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19157:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"19164:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"19104:52:27"},"nodeType":"YulFunctionCall","src":"19104:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"19091:6:27"},"nodeType":"YulFunctionCall","src":"19091:81:27"},"nodeType":"YulExpressionStatement","src":"19091:81:27"}]},"nodeType":"YulCase","src":"18940:242:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"18248:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18256:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"18245:2:27"},"nodeType":"YulFunctionCall","src":"18245:14:27"},"nodeType":"YulSwitch","src":"18238:944:27"}]},"name":"copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"17917:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"17923:3:27","type":""}],"src":"17838:1350:27"},{"body":{"nodeType":"YulBlock","src":"19225:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19242:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19249:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19254:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19245:3:27"},"nodeType":"YulFunctionCall","src":"19245:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19235:6:27"},"nodeType":"YulFunctionCall","src":"19235:31:27"},"nodeType":"YulExpressionStatement","src":"19235:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19282:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19285:4:27","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19275:6:27"},"nodeType":"YulFunctionCall","src":"19275:15:27"},"nodeType":"YulExpressionStatement","src":"19275:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19306:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19309:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19299:6:27"},"nodeType":"YulFunctionCall","src":"19299:15:27"},"nodeType":"YulExpressionStatement","src":"19299:15:27"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"19193:127:27"},{"body":{"nodeType":"YulBlock","src":"19363:171:27","statements":[{"body":{"nodeType":"YulBlock","src":"19394:111:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19415:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19422:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19427:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19418:3:27"},"nodeType":"YulFunctionCall","src":"19418:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19408:6:27"},"nodeType":"YulFunctionCall","src":"19408:31:27"},"nodeType":"YulExpressionStatement","src":"19408:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19459:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19462:4:27","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19452:6:27"},"nodeType":"YulFunctionCall","src":"19452:15:27"},"nodeType":"YulExpressionStatement","src":"19452:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19487:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19490:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19480:6:27"},"nodeType":"YulFunctionCall","src":"19480:15:27"},"nodeType":"YulExpressionStatement","src":"19480:15:27"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"19383:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19376:6:27"},"nodeType":"YulFunctionCall","src":"19376:9:27"},"nodeType":"YulIf","src":"19373:132:27"},{"nodeType":"YulAssignment","src":"19514:14:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"19523:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"19526:1:27"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"19519:3:27"},"nodeType":"YulFunctionCall","src":"19519:9:27"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"19514:1:27"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"19348:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"19351:1:27","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"19357:1:27","type":""}],"src":"19325:209:27"},{"body":{"nodeType":"YulBlock","src":"19728:325:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19745:9:27"},{"name":"value0","nodeType":"YulIdentifier","src":"19756:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19738:6:27"},"nodeType":"YulFunctionCall","src":"19738:25:27"},"nodeType":"YulExpressionStatement","src":"19738:25:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19783:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19794:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19779:3:27"},"nodeType":"YulFunctionCall","src":"19779:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"19799:2:27","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19772:6:27"},"nodeType":"YulFunctionCall","src":"19772:30:27"},"nodeType":"YulExpressionStatement","src":"19772:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19822:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19833:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19818:3:27"},"nodeType":"YulFunctionCall","src":"19818:18:27"},{"name":"value2","nodeType":"YulIdentifier","src":"19838:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19811:6:27"},"nodeType":"YulFunctionCall","src":"19811:34:27"},"nodeType":"YulExpressionStatement","src":"19811:34:27"},{"body":{"nodeType":"YulBlock","src":"19889:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19898:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19901:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19891:6:27"},"nodeType":"YulFunctionCall","src":"19891:12:27"},"nodeType":"YulExpressionStatement","src":"19891:12:27"}]},"condition":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19860:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19876:3:27","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"19881:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19872:3:27"},"nodeType":"YulFunctionCall","src":"19872:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"19885:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19868:3:27"},"nodeType":"YulFunctionCall","src":"19868:19:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"19857:2:27"},"nodeType":"YulFunctionCall","src":"19857:31:27"},"nodeType":"YulIf","src":"19854:51:27"},{"nodeType":"YulVariableDeclaration","src":"19914:28:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19932:1:27","type":"","value":"5"},{"name":"value2","nodeType":"YulIdentifier","src":"19935:6:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19928:3:27"},"nodeType":"YulFunctionCall","src":"19928:14:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"19918:6:27","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19968:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19979:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19964:3:27"},"nodeType":"YulFunctionCall","src":"19964:18:27"},{"name":"value1","nodeType":"YulIdentifier","src":"19984:6:27"},{"name":"length","nodeType":"YulIdentifier","src":"19992:6:27"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"19951:12:27"},"nodeType":"YulFunctionCall","src":"19951:48:27"},"nodeType":"YulExpressionStatement","src":"19951:48:27"},{"nodeType":"YulAssignment","src":"20008:39:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20024:9:27"},{"name":"length","nodeType":"YulIdentifier","src":"20035:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20020:3:27"},"nodeType":"YulFunctionCall","src":"20020:22:27"},{"kind":"number","nodeType":"YulLiteral","src":"20044:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20016:3:27"},"nodeType":"YulFunctionCall","src":"20016:31:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20008:4:27"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19681:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19692:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19700:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19708:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19719:4:27","type":""}],"src":"19539:514:27"},{"body":{"nodeType":"YulBlock","src":"20232:172:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20249:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20260:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20242:6:27"},"nodeType":"YulFunctionCall","src":"20242:21:27"},"nodeType":"YulExpressionStatement","src":"20242:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20283:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20294:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20279:3:27"},"nodeType":"YulFunctionCall","src":"20279:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"20299:2:27","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20272:6:27"},"nodeType":"YulFunctionCall","src":"20272:30:27"},"nodeType":"YulExpressionStatement","src":"20272:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20322:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20333:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20318:3:27"},"nodeType":"YulFunctionCall","src":"20318:18:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"20338:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20311:6:27"},"nodeType":"YulFunctionCall","src":"20311:52:27"},"nodeType":"YulExpressionStatement","src":"20311:52:27"},{"nodeType":"YulAssignment","src":"20372:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20384:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20395:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20380:3:27"},"nodeType":"YulFunctionCall","src":"20380:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20372:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20209:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20223:4:27","type":""}],"src":"20058:346:27"},{"body":{"nodeType":"YulBlock","src":"20568:99:27","statements":[{"nodeType":"YulAssignment","src":"20578:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20590:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20601:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20586:3:27"},"nodeType":"YulFunctionCall","src":"20586:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20578:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20620:9:27"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20651:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20645:5:27"},"nodeType":"YulFunctionCall","src":"20645:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20638:6:27"},"nodeType":"YulFunctionCall","src":"20638:21:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"20631:6:27"},"nodeType":"YulFunctionCall","src":"20631:29:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20613:6:27"},"nodeType":"YulFunctionCall","src":"20613:48:27"},"nodeType":"YulExpressionStatement","src":"20613:48:27"}]},"name":"abi_encode_tuple_t_struct$_ExtraArgsV1_$2564_memory_ptr__to_t_struct$_ExtraArgsV1_$2564_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20537:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20548:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20559:4:27","type":""}],"src":"20409:258:27"},{"body":{"nodeType":"YulBlock","src":"20875:286:27","statements":[{"nodeType":"YulVariableDeclaration","src":"20885:29:27","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20903:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"20908:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"20899:3:27"},"nodeType":"YulFunctionCall","src":"20899:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"20912:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20895:3:27"},"nodeType":"YulFunctionCall","src":"20895:19:27"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"20889:2:27","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20945:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"20953:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20941:3:27"},"nodeType":"YulFunctionCall","src":"20941:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20923:6:27"},"nodeType":"YulFunctionCall","src":"20923:34:27"},"nodeType":"YulExpressionStatement","src":"20923:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20977:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20988:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20973:3:27"},"nodeType":"YulFunctionCall","src":"20973:18:27"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20997:6:27"},{"name":"_1","nodeType":"YulIdentifier","src":"21005:2:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20993:3:27"},"nodeType":"YulFunctionCall","src":"20993:15:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20966:6:27"},"nodeType":"YulFunctionCall","src":"20966:43:27"},"nodeType":"YulExpressionStatement","src":"20966:43:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21029:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21040:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21025:3:27"},"nodeType":"YulFunctionCall","src":"21025:18:27"},{"name":"value2","nodeType":"YulIdentifier","src":"21045:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21018:6:27"},"nodeType":"YulFunctionCall","src":"21018:34:27"},"nodeType":"YulExpressionStatement","src":"21018:34:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21072:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21083:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21068:3:27"},"nodeType":"YulFunctionCall","src":"21068:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"21088:3:27","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21061:6:27"},"nodeType":"YulFunctionCall","src":"21061:31:27"},"nodeType":"YulExpressionStatement","src":"21061:31:27"},{"nodeType":"YulAssignment","src":"21101:54:27","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"21127:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21139:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21150:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21135:3:27"},"nodeType":"YulFunctionCall","src":"21135:19:27"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"21109:17:27"},"nodeType":"YulFunctionCall","src":"21109:46:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21101:4:27"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20820:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20831:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20839:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20847:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20855:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20866:4:27","type":""}],"src":"20672:489:27"},{"body":{"nodeType":"YulBlock","src":"21246:169:27","statements":[{"body":{"nodeType":"YulBlock","src":"21292:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21301:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21304:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21294:6:27"},"nodeType":"YulFunctionCall","src":"21294:12:27"},"nodeType":"YulExpressionStatement","src":"21294:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"21267:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"21276:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21263:3:27"},"nodeType":"YulFunctionCall","src":"21263:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"21288:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"21259:3:27"},"nodeType":"YulFunctionCall","src":"21259:32:27"},"nodeType":"YulIf","src":"21256:52:27"},{"nodeType":"YulVariableDeclaration","src":"21317:29:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21336:9:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21330:5:27"},"nodeType":"YulFunctionCall","src":"21330:16:27"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"21321:5:27","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21379:5:27"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"21355:23:27"},"nodeType":"YulFunctionCall","src":"21355:30:27"},"nodeType":"YulExpressionStatement","src":"21355:30:27"},{"nodeType":"YulAssignment","src":"21394:15:27","value":{"name":"value","nodeType":"YulIdentifier","src":"21404:5:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"21394:6:27"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21212:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"21223:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"21235:6:27","type":""}],"src":"21166:249:27"},{"body":{"nodeType":"YulBlock","src":"21594:173:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21611:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21622:2:27","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21604:6:27"},"nodeType":"YulFunctionCall","src":"21604:21:27"},"nodeType":"YulExpressionStatement","src":"21604:21:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21645:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21656:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21641:3:27"},"nodeType":"YulFunctionCall","src":"21641:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"21661:2:27","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21634:6:27"},"nodeType":"YulFunctionCall","src":"21634:30:27"},"nodeType":"YulExpressionStatement","src":"21634:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21684:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21695:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21680:3:27"},"nodeType":"YulFunctionCall","src":"21680:18:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"21700:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21673:6:27"},"nodeType":"YulFunctionCall","src":"21673:53:27"},"nodeType":"YulExpressionStatement","src":"21673:53:27"},{"nodeType":"YulAssignment","src":"21735:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21747:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"21758:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21743:3:27"},"nodeType":"YulFunctionCall","src":"21743:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21735:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21571:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21585:4:27","type":""}],"src":"21420:347:27"},{"body":{"nodeType":"YulBlock","src":"21804:95:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21821:1:27","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21828:3:27","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"21833:10:27","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21824:3:27"},"nodeType":"YulFunctionCall","src":"21824:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21814:6:27"},"nodeType":"YulFunctionCall","src":"21814:31:27"},"nodeType":"YulExpressionStatement","src":"21814:31:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21861:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21864:4:27","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21854:6:27"},"nodeType":"YulFunctionCall","src":"21854:15:27"},"nodeType":"YulExpressionStatement","src":"21854:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21885:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21888:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21878:6:27"},"nodeType":"YulFunctionCall","src":"21878:15:27"},"nodeType":"YulExpressionStatement","src":"21878:15:27"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"21772:127:27"},{"body":{"nodeType":"YulBlock","src":"22129:329:27","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22146:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22161:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"22169:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22157:3:27"},"nodeType":"YulFunctionCall","src":"22157:31:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22139:6:27"},"nodeType":"YulFunctionCall","src":"22139:50:27"},"nodeType":"YulExpressionStatement","src":"22139:50:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22209:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22220:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22205:3:27"},"nodeType":"YulFunctionCall","src":"22205:18:27"},{"kind":"number","nodeType":"YulLiteral","src":"22225:3:27","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22198:6:27"},"nodeType":"YulFunctionCall","src":"22198:31:27"},"nodeType":"YulExpressionStatement","src":"22198:31:27"},{"nodeType":"YulAssignment","src":"22238:54:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22264:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22276:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22287:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22272:3:27"},"nodeType":"YulFunctionCall","src":"22272:19:27"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"22246:17:27"},"nodeType":"YulFunctionCall","src":"22246:46:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22238:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22312:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22323:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22308:3:27"},"nodeType":"YulFunctionCall","src":"22308:18:27"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22332:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"22340:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22328:3:27"},"nodeType":"YulFunctionCall","src":"22328:19:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22301:6:27"},"nodeType":"YulFunctionCall","src":"22301:47:27"},"nodeType":"YulExpressionStatement","src":"22301:47:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22368:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22379:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22364:3:27"},"nodeType":"YulFunctionCall","src":"22364:18:27"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"22388:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"22396:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22384:3:27"},"nodeType":"YulFunctionCall","src":"22384:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22357:6:27"},"nodeType":"YulFunctionCall","src":"22357:51:27"},"nodeType":"YulExpressionStatement","src":"22357:51:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22428:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22439:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22424:3:27"},"nodeType":"YulFunctionCall","src":"22424:19:27"},{"name":"value4","nodeType":"YulIdentifier","src":"22445:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22417:6:27"},"nodeType":"YulFunctionCall","src":"22417:35:27"},"nodeType":"YulExpressionStatement","src":"22417:35:27"}]},"name":"abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__to_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22066:9:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"22077:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22085:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22093:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22101:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22109:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22120:4:27","type":""}],"src":"21904:554:27"},{"body":{"nodeType":"YulBlock","src":"22544:103:27","statements":[{"body":{"nodeType":"YulBlock","src":"22590:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22599:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"22602:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"22592:6:27"},"nodeType":"YulFunctionCall","src":"22592:12:27"},"nodeType":"YulExpressionStatement","src":"22592:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22565:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"22574:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22561:3:27"},"nodeType":"YulFunctionCall","src":"22561:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"22586:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22557:3:27"},"nodeType":"YulFunctionCall","src":"22557:32:27"},"nodeType":"YulIf","src":"22554:52:27"},{"nodeType":"YulAssignment","src":"22615:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22631:9:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22625:5:27"},"nodeType":"YulFunctionCall","src":"22625:16:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"22615:6:27"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22510:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22521:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22533:6:27","type":""}],"src":"22463:184:27"},{"body":{"nodeType":"YulBlock","src":"22781:145:27","statements":[{"nodeType":"YulAssignment","src":"22791:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22803:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22814:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22799:3:27"},"nodeType":"YulFunctionCall","src":"22799:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22791:4:27"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22833:9:27"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22848:6:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22864:3:27","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"22869:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"22860:3:27"},"nodeType":"YulFunctionCall","src":"22860:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"22873:1:27","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22856:3:27"},"nodeType":"YulFunctionCall","src":"22856:19:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22844:3:27"},"nodeType":"YulFunctionCall","src":"22844:32:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22826:6:27"},"nodeType":"YulFunctionCall","src":"22826:51:27"},"nodeType":"YulExpressionStatement","src":"22826:51:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22897:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22908:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22893:3:27"},"nodeType":"YulFunctionCall","src":"22893:18:27"},{"name":"value1","nodeType":"YulIdentifier","src":"22913:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22886:6:27"},"nodeType":"YulFunctionCall","src":"22886:34:27"},"nodeType":"YulExpressionStatement","src":"22886:34:27"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22742:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22753:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22761:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22772:4:27","type":""}],"src":"22652:274:27"},{"body":{"nodeType":"YulBlock","src":"22979:77:27","statements":[{"nodeType":"YulAssignment","src":"22989:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23000:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"23003:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22996:3:27"},"nodeType":"YulFunctionCall","src":"22996:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22989:3:27"}]},{"body":{"nodeType":"YulBlock","src":"23028:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23030:16:27"},"nodeType":"YulFunctionCall","src":"23030:18:27"},"nodeType":"YulExpressionStatement","src":"23030:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23020:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"23023:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23017:2:27"},"nodeType":"YulFunctionCall","src":"23017:10:27"},"nodeType":"YulIf","src":"23014:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"22962:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"22965:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"22971:3:27","type":""}],"src":"22931:125:27"},{"body":{"nodeType":"YulBlock","src":"23113:116:27","statements":[{"nodeType":"YulAssignment","src":"23123:20:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23138:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"23141:1:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23134:3:27"},"nodeType":"YulFunctionCall","src":"23134:9:27"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"23123:7:27"}]},{"body":{"nodeType":"YulBlock","src":"23201:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23203:16:27"},"nodeType":"YulFunctionCall","src":"23203:18:27"},"nodeType":"YulExpressionStatement","src":"23203:18:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"23172:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23165:6:27"},"nodeType":"YulFunctionCall","src":"23165:9:27"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"23179:1:27"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"23186:7:27"},{"name":"x","nodeType":"YulIdentifier","src":"23195:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23182:3:27"},"nodeType":"YulFunctionCall","src":"23182:15:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"23176:2:27"},"nodeType":"YulFunctionCall","src":"23176:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"23162:2:27"},"nodeType":"YulFunctionCall","src":"23162:37:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23155:6:27"},"nodeType":"YulFunctionCall","src":"23155:45:27"},"nodeType":"YulIf","src":"23152:71:27"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"23092:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"23095:1:27","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"23101:7:27","type":""}],"src":"23061:168:27"},{"body":{"nodeType":"YulBlock","src":"23298:358:27","statements":[{"nodeType":"YulVariableDeclaration","src":"23308:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23323:1:27","type":"","value":"1"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"23312:7:27","type":""}]},{"nodeType":"YulAssignment","src":"23333:16:27","value":{"name":"power_1","nodeType":"YulIdentifier","src":"23342:7:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"23333:5:27"}]},{"nodeType":"YulAssignment","src":"23358:13:27","value":{"name":"_base","nodeType":"YulIdentifier","src":"23366:5:27"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"23358:4:27"}]},{"body":{"nodeType":"YulBlock","src":"23422:228:27","statements":[{"body":{"nodeType":"YulBlock","src":"23467:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"23469:16:27"},"nodeType":"YulFunctionCall","src":"23469:18:27"},"nodeType":"YulExpressionStatement","src":"23469:18:27"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"23442:4:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23456:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23452:3:27"},"nodeType":"YulFunctionCall","src":"23452:6:27"},{"name":"base","nodeType":"YulIdentifier","src":"23460:4:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23448:3:27"},"nodeType":"YulFunctionCall","src":"23448:17:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23439:2:27"},"nodeType":"YulFunctionCall","src":"23439:27:27"},"nodeType":"YulIf","src":"23436:53:27"},{"body":{"nodeType":"YulBlock","src":"23528:29:27","statements":[{"nodeType":"YulAssignment","src":"23530:25:27","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"23543:5:27"},{"name":"base","nodeType":"YulIdentifier","src":"23550:4:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23539:3:27"},"nodeType":"YulFunctionCall","src":"23539:16:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"23530:5:27"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"23509:8:27"},{"name":"power_1","nodeType":"YulIdentifier","src":"23519:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23505:3:27"},"nodeType":"YulFunctionCall","src":"23505:22:27"},"nodeType":"YulIf","src":"23502:55:27"},{"nodeType":"YulAssignment","src":"23570:23:27","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"23582:4:27"},{"name":"base","nodeType":"YulIdentifier","src":"23588:4:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"23578:3:27"},"nodeType":"YulFunctionCall","src":"23578:15:27"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"23570:4:27"}]},{"nodeType":"YulAssignment","src":"23606:34:27","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"23622:7:27"},{"name":"exponent","nodeType":"YulIdentifier","src":"23631:8:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"23618:3:27"},"nodeType":"YulFunctionCall","src":"23618:22:27"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"23606:8:27"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"23391:8:27"},{"name":"power_1","nodeType":"YulIdentifier","src":"23401:7:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"23388:2:27"},"nodeType":"YulFunctionCall","src":"23388:21:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23410:3:27","statements":[]},"pre":{"nodeType":"YulBlock","src":"23384:3:27","statements":[]},"src":"23380:270:27"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_base","nodeType":"YulTypedName","src":"23262:5:27","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"23269:8:27","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"23282:5:27","type":""},{"name":"base","nodeType":"YulTypedName","src":"23289:4:27","type":""}],"src":"23234:422:27"},{"body":{"nodeType":"YulBlock","src":"23720:747:27","statements":[{"body":{"nodeType":"YulBlock","src":"23758:52:27","statements":[{"nodeType":"YulAssignment","src":"23772:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23781:1:27","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"23772:5:27"}]},{"nodeType":"YulLeave","src":"23795:5:27"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"23740:8:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23733:6:27"},"nodeType":"YulFunctionCall","src":"23733:16:27"},"nodeType":"YulIf","src":"23730:80:27"},{"body":{"nodeType":"YulBlock","src":"23843:52:27","statements":[{"nodeType":"YulAssignment","src":"23857:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23866:1:27","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"23857:5:27"}]},{"nodeType":"YulLeave","src":"23880:5:27"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"23829:4:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23822:6:27"},"nodeType":"YulFunctionCall","src":"23822:12:27"},"nodeType":"YulIf","src":"23819:76:27"},{"cases":[{"body":{"nodeType":"YulBlock","src":"23931:52:27","statements":[{"nodeType":"YulAssignment","src":"23945:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23954:1:27","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"23945:5:27"}]},{"nodeType":"YulLeave","src":"23968:5:27"}]},"nodeType":"YulCase","src":"23924:59:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23929:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"23999:123:27","statements":[{"body":{"nodeType":"YulBlock","src":"24034:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24036:16:27"},"nodeType":"YulFunctionCall","src":"24036:18:27"},"nodeType":"YulExpressionStatement","src":"24036:18:27"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"24019:8:27"},{"kind":"number","nodeType":"YulLiteral","src":"24029:3:27","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24016:2:27"},"nodeType":"YulFunctionCall","src":"24016:17:27"},"nodeType":"YulIf","src":"24013:43:27"},{"nodeType":"YulAssignment","src":"24069:25:27","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"24082:8:27"},{"kind":"number","nodeType":"YulLiteral","src":"24092:1:27","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24078:3:27"},"nodeType":"YulFunctionCall","src":"24078:16:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"24069:5:27"}]},{"nodeType":"YulLeave","src":"24107:5:27"}]},"nodeType":"YulCase","src":"23992:130:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23997:1:27","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"23911:4:27"},"nodeType":"YulSwitch","src":"23904:218:27"},{"body":{"nodeType":"YulBlock","src":"24220:70:27","statements":[{"nodeType":"YulAssignment","src":"24234:28:27","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"24247:4:27"},{"name":"exponent","nodeType":"YulIdentifier","src":"24253:8:27"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"24243:3:27"},"nodeType":"YulFunctionCall","src":"24243:19:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"24234:5:27"}]},{"nodeType":"YulLeave","src":"24275:5:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"24144:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"24150:2:27","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24141:2:27"},"nodeType":"YulFunctionCall","src":"24141:12:27"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"24158:8:27"},{"kind":"number","nodeType":"YulLiteral","src":"24168:2:27","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24155:2:27"},"nodeType":"YulFunctionCall","src":"24155:16:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24137:3:27"},"nodeType":"YulFunctionCall","src":"24137:35:27"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"24181:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"24187:3:27","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24178:2:27"},"nodeType":"YulFunctionCall","src":"24178:13:27"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"24196:8:27"},{"kind":"number","nodeType":"YulLiteral","src":"24206:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"24193:2:27"},"nodeType":"YulFunctionCall","src":"24193:16:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24174:3:27"},"nodeType":"YulFunctionCall","src":"24174:36:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24134:2:27"},"nodeType":"YulFunctionCall","src":"24134:77:27"},"nodeType":"YulIf","src":"24131:159:27"},{"nodeType":"YulVariableDeclaration","src":"24299:57:27","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"24341:4:27"},{"name":"exponent","nodeType":"YulIdentifier","src":"24347:8:27"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"24322:18:27"},"nodeType":"YulFunctionCall","src":"24322:34:27"},"variables":[{"name":"power_1","nodeType":"YulTypedName","src":"24303:7:27","type":""},{"name":"base_1","nodeType":"YulTypedName","src":"24312:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"24401:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24403:16:27"},"nodeType":"YulFunctionCall","src":"24403:18:27"},"nodeType":"YulExpressionStatement","src":"24403:18:27"}]},"condition":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"24371:7:27"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24388:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24384:3:27"},"nodeType":"YulFunctionCall","src":"24384:6:27"},{"name":"base_1","nodeType":"YulIdentifier","src":"24392:6:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"24380:3:27"},"nodeType":"YulFunctionCall","src":"24380:19:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24368:2:27"},"nodeType":"YulFunctionCall","src":"24368:32:27"},"nodeType":"YulIf","src":"24365:58:27"},{"nodeType":"YulAssignment","src":"24432:29:27","value":{"arguments":[{"name":"power_1","nodeType":"YulIdentifier","src":"24445:7:27"},{"name":"base_1","nodeType":"YulIdentifier","src":"24454:6:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"24441:3:27"},"nodeType":"YulFunctionCall","src":"24441:20:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"24432:5:27"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"23691:4:27","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"23697:8:27","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"23710:5:27","type":""}],"src":"23661:806:27"},{"body":{"nodeType":"YulBlock","src":"24542:61:27","statements":[{"nodeType":"YulAssignment","src":"24552:45:27","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"24582:4:27"},{"name":"exponent","nodeType":"YulIdentifier","src":"24588:8:27"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"24561:20:27"},"nodeType":"YulFunctionCall","src":"24561:36:27"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"24552:5:27"}]}]},"name":"checked_exp_t_uint256_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"24513:4:27","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"24519:8:27","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"24532:5:27","type":""}],"src":"24472:131:27"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_bool_t_uint256_t_address__to_t_bool_t_bool_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffff))\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_contract$_IVRFCoordinatorV2Plus_$2448__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_bool__to_t_uint256_t_address_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_e55600974a468a5baf1f1454a24481ec68f787ee02cd9f1d97c35ce2a8d2093d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Contract is paused\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_struct$_RandomWordsRequest_$2577_memory_ptr__to_t_struct$_RandomWordsRequest_$2577_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), mload(value0))\n        mstore(add(headStart, 64), mload(add(value0, 32)))\n        mstore(add(headStart, 96), and(mload(add(value0, 64)), 0xffff))\n        let memberValue0 := mload(add(value0, 96))\n        let _1 := 0xffffffff\n        mstore(add(headStart, 128), and(memberValue0, _1))\n        mstore(add(headStart, 160), and(mload(add(value0, 128)), _1))\n        let memberValue0_1 := mload(add(value0, 160))\n        mstore(add(headStart, 0xc0), 0xc0)\n        tail := abi_encode_string(memberValue0_1, add(headStart, 224))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256_t_uint32__to_t_uint256_t_uint32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_dd00b67a545791a54dd99d9c09eb42099756ea4ee2bd47188784c22234589367__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Index out of bounds\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_storage_ptr_to_t_string_storage(slot, src)\n    {\n        if eq(slot, src) { leave }\n        let newLen := extract_byte_array_length(sload(src))\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let src_1 := array_dataslot_string_storage(src)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, sload(add(src_1, srcOffset)))\n                let _1 := 1\n                dstPtr := add(dstPtr, _1)\n                srcOffset := add(srcOffset, _1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := sload(add(src_1, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := sload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Must be proposed owner\")\n        tail := add(headStart, 96)\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_0f5343873485c5c5ba9c972f367671af3745dc5cce720ddb197036ef7342b2b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Invalid request id\")\n        tail := add(headStart, 96)\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), value2)\n        if gt(value2, sub(shl(251, 1), 1)) { revert(0, 0) }\n        let length := shl(5, value2)\n        calldatacopy(add(headStart, 96), value1, length)\n        tail := add(add(headStart, length), 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Only callable by owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_struct$_ExtraArgsV1_$2564_memory_ptr__to_t_struct$_ExtraArgsV1_$2564_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(mload(value0))))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Cannot transfer to self\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__to_t_uint64_t_bytes_memory_ptr_t_uint16_t_uint32_t_bytes32__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n        mstore(add(headStart, 32), 160)\n        tail := abi_encode_string(value1, add(headStart, 160))\n        mstore(add(headStart, 64), and(value2, 0xffff))\n        mstore(add(headStart, 96), and(value3, 0xffffffff))\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n}","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"17":[{"length":32,"start":2077},{"length":32,"start":7695}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106102d65760003560e01c8063813ce42d11610182578063a969a403116100e9578063cfd30a6e116100a2578063ed647d211161007c578063ed647d2114610666578063f2fde38b1461066f578063f887ea4014610682578063ff712d021461069557600080fd5b8063cfd30a6e14610637578063e1e163791461064a578063e985e9c51461065357600080fd5b8063a969a403146105dd578063ab6eef52146105e5578063b187bd26146105ed578063b88d4fde14610601578063c87b56dd14610614578063cf2a1a0e1461062757600080fd5b80639443dec11161013b5780639443dec11461057857806395d89b411461058b57806398bdf6f5146105935780639eccacf61461059c578063a22cb465146105af578063a3e56fa8146105c257600080fd5b8063813ce42d146105295780638456cb591461053c578063849e0312146105445780638a0ec9d21461054c5780638da5cb5b146105545780638ea981171461056557600080fd5b8063425c9fa211610241578063598bc486116101fa5780636f2f418e116101d45780636f2f418e146104f257806370a082311461050557806379ba5097146105185780637d058d4f1461052057600080fd5b8063598bc486146104b65780636250fb2b146104d75780636352211e146104df57600080fd5b8063425c9fa2146103e557806342842e0e146103f857806348e9687a1461040b5780635151804a1461041e57806353cd456f146104345780635846d6821461044757600080fd5b806323b872dd1161029357806323b872dd1461037e578063265d1fa3146103915780632af605231461039957806335d46d5c146103b05780633b7ed734146103b85780633f4ba83a146103dd57600080fd5b806301ffc9a7146102db57806306fdde0314610303578063081812fc14610318578063095ea7b3146103435780630ca76175146103585780631fe543e31461036b575b600080fd5b6102ee6102e93660046126f8565b6106f6565b60405190151581526020015b60405180910390f35b61030b610748565b6040516102fa9190612765565b61032b610326366004612778565b6107da565b6040516001600160a01b0390911681526020016102fa565b6103566103513660046127ad565b610803565b005b610356610366366004612879565b610812565b6103566103793660046128e5565b610896565b61035661038c366004612963565b6108eb565b61030b610976565b6103a260175481565b6040519081526020016102fa565b61030b610a04565b601b546103c89063ffffffff1681565b60405163ffffffff90911681526020016102fa565b610356610a11565b6103a26103f3366004612778565b610a28565b610356610406366004612963565b610a49565b61035661041936600461299f565b610a64565b6018546103c89062010000900463ffffffff1681565b610356610442366004612778565b610cdb565b61048b610455366004612778565b60166020526000908152604090208054600182015460029092015460ff808316936101009093041691906001600160a01b031684565b6040805194151585529215156020850152918301526001600160a01b031660608201526080016102fa565b6018546104c49061ffff1681565b60405161ffff90911681526020016102fa565b61030b610db0565b61032b6104ed366004612778565b610dbd565b61030b610500366004612778565b610dc8565b6103a261051336600461299f565b610de1565b610356610e29565b6103a2601a5481565b6103566105373660046129ba565b610ed7565b610356610f50565b61030b610f6d565b61030b610f7a565b6006546001600160a01b031661032b565b61035661057336600461299f565b610f87565b610356610586366004612a00565b611079565b61030b6110bd565b6103a260095481565b60085461032b906001600160a01b031681565b6103566105bd366004612a34565b6110cc565b601b5461032b9064010000000090046001600160a01b031681565b61030b6110d7565b61030b6110e4565b6008546102ee90600160a01b900460ff1681565b61035661060f366004612a70565b6110f1565b61030b610622366004612778565b611108565b6014546103c89063ffffffff1681565b61030b610645366004612778565b61117d565b6103a260115481565b6102ee610661366004612ad7565b6111a8565b6103a260155481565b61035661067d36600461299f565b6111d6565b600f5461032b906001600160a01b031681565b6106d16106a3366004612778565b600e60205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016102fa565b60006001600160e01b031982166380ac58cd60e01b148061072757506001600160e01b03198216635b5e139f60e01b145b8061074257506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461075790612b0a565b80601f016020809104026020016040519081016040528092919081815260200182805461078390612b0a565b80156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b5050505050905090565b60006107e5826111ea565b506000828152600460205260409020546001600160a01b0316610742565b61080e828233611223565b5050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085b5760405163c6829f8360e01b815260040160405180910390fd5b610866838383611230565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6008546001600160a01b031633146108db5760085460405163073e64fd60e21b81523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b6108e6838383611317565b505050565b6001600160a01b03821661091557604051633250574960e11b8152600060048201526024016108d2565b6000610922838333611542565b9050836001600160a01b0316816001600160a01b031614610970576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016108d2565b50505050565b6012805461098390612b0a565b80601f01602080910402602001604051908101604052809291908181526020018280546109af90612b0a565b80156109fc5780601f106109d1576101008083540402835291602001916109fc565b820191906000526020600020905b8154815290600101906020018083116109df57829003601f168201915b505050505081565b601e805461098390612b0a565b610a1961163b565b6008805460ff60a01b19169055565b60198181548110610a3857600080fd5b600091825260209091200154905081565b6108e6838383604051806020016040528060008152506110f1565b600854600160a01b900460ff1615610ab35760405162461bcd60e51b815260206004820152601260248201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b60448201526064016108d2565b60098054906000610ac383612b5a565b90915550506008546040805160c081018252601754815260155460208083019190915260185461ffff811683850152601b5463ffffffff90811660608501526201000090910416608083015282519081019092526000808352926001600160a01b031691639b1c385e919060a0820190610b3c90611690565b8152506040518263ffffffff1660e01b8152600401610b5b9190612b73565b6020604051808303816000875af1158015610b7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9e9190612bd0565b6040805160a0810182526000808252600160208084018281526009548587019081526001600160a01b038a81166060880190815288518781528086018a52608089019081528a8852601686529890962087518154945161ffff1990951690151561ff001916176101009415159490940293909317835590519382019390935592516002840180546001600160a01b03191691909316179091559251805194955091939092610c539260038501929101906125d8565b5050601980546001810182556000919091527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950182905550601a819055601854604080518381526201000090920463ffffffff1660208301527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a15050565b610ce361163b565b600a548110610d2a5760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016108d2565b600a8054610d3a90600190612be9565b81548110610d4a57610d4a612bfc565b90600052602060002001600a8281548110610d6757610d67612bfc565b906000526020600020019081610d7d9190612c60565b50600a805480610d8f57610d8f612d3c565b600190038181906000526020600020016000610dab9190612623565b905550565b6013805461098390612b0a565b6000610742826111ea565b600c602052600090815260409020805461098390612b0a565b60006001600160a01b038216610e0d576040516322718ad960e21b8152600060048201526024016108d2565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610e7c5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016108d2565b600680546001600160a01b0319808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b610edf61163b565b600a548210610f265760405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016108d2565b80600a8381548110610f3a57610f3a612bfc565b9060005260206000200190816108e69190612d52565b610f5861163b565b6008805460ff60a01b1916600160a01b179055565b600b805461098390612b0a565b601f805461098390612b0a565b6006546001600160a01b03163314801590610fad57506008546001600160a01b03163314155b15610ffe5733610fc56006546001600160a01b031690565b60085460405163061db9c160e01b81526001600160a01b03938416600482015291831660248301529190911660448201526064016108d2565b6001600160a01b0381166110255760405163d92e233d60e01b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b61108161163b565b600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80161080e8282612d52565b60606001805461075790612b0a565b61080e338383611701565b601c805461098390612b0a565b601d805461098390612b0a565b6110fc8484846108eb565b610970848484846117a0565b6060611113826111ea565b50600061112b60408051602081019091526000815290565b9050600081511161114b5760405180602001604052806000815250611176565b80611155846118c9565b604051602001611166929190612e09565b6040516020818303038152906040525b9392505050565b600a818154811061118d57600080fd5b90600052602060002001600091509050805461098390612b0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6111de61163b565b6111e78161195b565b50565b6000818152600260205260408120546001600160a01b03168061074257604051637e27328960e01b8152600481018490526024016108d2565b6108e68383836001611a05565b6000838152600e60205260409020600190810154600160a01b900460ff161515146112925760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd081a5960721b60448201526064016108d2565b601361129e8282612d52565b5060126112ab8382612d52565b50600b6112b88382612d52565b506000838152600e6020908152604080832060018101805460ff60a01b19169055548352600c90915290206112ee600b82612c60565b506000838152600e60205260409020600181015490546108e6916001600160a01b031690611b0b565b600083815260166020526040902061133360038201848461265d565b50805460ff19166001178155600a546000908484838161135557611355612bfc565b905060200201356113669190612e38565b90506000600a828154811061137d5761137d612bfc565b90600052602060002001805461139290612b0a565b80601f01602080910402602001604051908101604052809291908181526020018280546113be90612b0a565b801561140b5780601f106113e05761010080835404028352916020019161140b565b820191906000526020600020905b8154815290600101906020018083116113ee57829003601f168201915b505050505090506114536040805160e0810190915280600081526020016000815260200160008152602001606081526020016060815260200160608152602001606081525090565b61145d8183611b25565b61148c61146982611b32565b600d546014546010546001600160401b039092169163ffffffff90911690611e0a565b601181905560408051606081018252600180880154825260028801546001600160a01b0390811660208085019182528486018481526000978852600e90915295859020935184555192909101805494511515600160a01b026001600160a81b0319909516929091169190911792909217909155517ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d9061153190899089908990612e5a565b60405180910390a150505050505050565b6000828152600260205260408120546001600160a01b039081169083161561156f5761156f818486611edc565b6001600160a01b038116156115ad5761158c600085600080611a05565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b038516156115dc576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b0316331461168e5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016108d2565b565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa826040516024016116c991511515815260200190565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915292915050565b6001600160a01b03821661173357604051630b61174360e31b81526001600160a01b03831660048201526024016108d2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561097057604051630a85bd0160e11b81526001600160a01b0384169063150b7a02906117e2903390889087908790600401612e9b565b6020604051808303816000875af192505050801561181d575060408051601f3d908101601f1916820190925261181a91810190612ed8565b60015b611886573d80801561184b576040519150601f19603f3d011682016040523d82523d6000602084013e611850565b606091505b50805160000361187e57604051633250574960e11b81526001600160a01b03851660048201526024016108d2565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146118c257604051633250574960e11b81526001600160a01b03851660048201526024016108d2565b5050505050565b606060006118d683611f40565b60010190506000816001600160401b038111156118f5576118f56127d7565b6040519080825280601f01601f19166020018201604052801561191f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461192957509392505050565b336001600160a01b038216036119b35760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016108d2565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b8080611a1957506001600160a01b03821615155b15611adb576000611a29846111ea565b90506001600160a01b03831615801590611a555750826001600160a01b0316816001600160a01b031614155b8015611a685750611a6681846111a8565b155b15611a915760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016108d2565b8115611ad95783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b61080e828260405180602001604052806000815250612018565b61080e826000808461202f565b60606000611b416101006120ad565b9050611b7a6040518060400160405280600c81526020016b31b7b232a637b1b0ba34b7b760a11b815250826120ce90919063ffffffff16565b8251611b98906002811115611b9157611b91612ef5565b82906120e7565b6040805180820190915260088152676c616e677561676560c01b6020820152611bc29082906120ce565b6040830151611bd9908015611b9157611b91612ef5565b604080518082019091526006815265736f7572636560d01b6020820152611c019082906120ce565b6060830151611c119082906120ce565b60a08301515115611ca5576040805180820190915260048152636172677360e01b6020820152611c429082906120ce565b611c4b81612120565b60005b8360a0015151811015611c9b57611c8b8460a001518281518110611c7457611c74612bfc565b6020026020010151836120ce90919063ffffffff16565b611c9481612b5a565b9050611c4e565b50611ca581612144565b60808301515115611d6957600083602001516002811115611cc857611cc8612ef5565b03611ce65760405163a80d31f760e01b815260040160405180910390fd5b60408051808201909152600f81526e39b2b1b932ba39a637b1b0ba34b7b760891b6020820152611d179082906120ce565b611d3083602001516002811115611b9157611b91612ef5565b6040805180820190915260078152667365637265747360c81b6020820152611d599082906120ce565b6080830151611d69908290612162565b60c08301515115611e025760408051808201909152600981526862797465734172677360b81b6020820152611d9f9082906120ce565b611da881612120565b60005b8360c0015151811015611df857611de88460c001518281518110611dd157611dd1612bfc565b60200260200101518361216290919063ffffffff16565b611df181612b5a565b9050611dab565b50611e0281612144565b515192915050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663461d27628688600188886040518663ffffffff1660e01b8152600401611e62959493929190612f0b565b6020604051808303816000875af1158015611e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea59190612bd0565b60405190915081907f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db890600090a295945050505050565b611ee783838361216f565b6108e6576001600160a01b038316611f1557604051637e27328960e01b8152600481018290526024016108d2565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016108d2565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611f7f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611fab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611fc957662386f26fc10000830492506010015b6305f5e1008310611fe1576305f5e100830492506008015b6127108310611ff557612710830492506004015b60648310612007576064830492506002015b600a83106107425760010192915050565b61202283836121d5565b6108e660008484846117a0565b8051600003612051576040516322ce3edd60e01b815260040160405180910390fd5b8383600281111561206457612064612ef5565b9081600281111561207757612077612ef5565b9052506040840182801561208d5761208d612ef5565b9081801561209d5761209d612ef5565b9052506060909301929092525050565b6120b5612698565b80516120c1908361223a565b5060006020820152919050565b6120db82600383516122b1565b81516108e690826123ca565b81516120f49060c26123eb565b5061080e828260405160200161210c91815260200190565b604051602081830303815290604052612162565b61212b816004612454565b60018160200181815161213e9190612f54565b90525050565b61214f816007612454565b60018160200181815161213e9190612be9565b6120db82600283516122b1565b60006001600160a01b038316158015906121cd5750826001600160a01b0316846001600160a01b031614806121a957506121a984846111a8565b806121cd57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b0382166121ff57604051633250574960e11b8152600060048201526024016108d2565b600061220d83836000611542565b90506001600160a01b038116156108e6576040516339e3563760e11b8152600060048201526024016108d2565b60408051808201909152606081526000602082015261225a602083612e38565b156122825761226a602083612e38565b612275906020612be9565b61227f9083612f54565b91505b6020808401839052604051808552600081529081840101818110156122a657600080fd5b604052509192915050565b6017816001600160401b0316116122d75782516109709060e0600585901b1683176123eb565b60ff816001600160401b0316116123175782516122ff906018611fe0600586901b16176123eb565b508251610970906001600160401b038316600161246b565b61ffff816001600160401b031611612358578251612340906019611fe0600586901b16176123eb565b508251610970906001600160401b038316600261246b565b63ffffffff816001600160401b03161161239b57825161238390601a611fe0600586901b16176123eb565b508251610970906001600160401b038316600461246b565b82516123b290601b611fe0600586901b16176123eb565b508251610970906001600160401b038316600861246b565b604080518082019091526060815260006020820152611176838384516124f0565b6040805180820190915260608152600060208201528251516000612410826001612f54565b905084602001518210612431576124318561242c836002612f67565b6125c1565b845160208382010185815350805182111561244a578181525b5093949350505050565b81516108e690601f611fe0600585901b16176123eb565b604080518082019091526060815260006020820152835151600061248f8285612f54565b905085602001518111156124ac576124ac8661242c836002612f67565b600060016124bc86610100613062565b6124c69190612be9565b905086518281018783198251161781525080518311156124e4578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561251357600080fd5b83515160006125228483612f54565b9050856020015181111561253f5761253f8661242c836002612f67565b855180518382016020019160009180851115612559578482525b505050602086015b602086106125995780518252612578602083612f54565b9150612585602082612f54565b9050612592602087612be9565b9550612561565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516125cd838361223a565b5061097083826123ca565b828054828255906000526020600020908101928215612613579160200282015b828111156126135782518255916020019190600101906125f8565b5061261f9291506126cd565b5090565b50805461262f90612b0a565b6000825580601f1061263f575050565b601f0160209004906000526020600020908101906111e791906126cd565b828054828255906000526020600020908101928215612613579160200282015b8281111561261357823582559160200191906001019061267d565b60405180604001604052806126c0604051806040016040528060608152602001600081525090565b8152602001600081525090565b5b8082111561261f57600081556001016126ce565b6001600160e01b0319811681146111e757600080fd5b60006020828403121561270a57600080fd5b8135611176816126e2565b60005b83811015612730578181015183820152602001612718565b50506000910152565b60008151808452612751816020860160208601612715565b601f01601f19169290920160200192915050565b6020815260006111766020830184612739565b60006020828403121561278a57600080fd5b5035919050565b80356001600160a01b03811681146127a857600080fd5b919050565b600080604083850312156127c057600080fd5b6127c983612791565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126127fe57600080fd5b81356001600160401b0380821115612818576128186127d7565b604051601f8301601f19908116603f01168101908282118183101715612840576128406127d7565b8160405283815286602085880101111561285957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561288e57600080fd5b8335925060208401356001600160401b03808211156128ac57600080fd5b6128b8878388016127ed565b935060408601359150808211156128ce57600080fd5b506128db868287016127ed565b9150509250925092565b6000806000604084860312156128fa57600080fd5b8335925060208401356001600160401b038082111561291857600080fd5b818601915086601f83011261292c57600080fd5b81358181111561293b57600080fd5b8760208260051b850101111561295057600080fd5b6020830194508093505050509250925092565b60008060006060848603121561297857600080fd5b61298184612791565b925061298f60208501612791565b9150604084013590509250925092565b6000602082840312156129b157600080fd5b61117682612791565b600080604083850312156129cd57600080fd5b8235915060208301356001600160401b038111156129ea57600080fd5b6129f6858286016127ed565b9150509250929050565b600060208284031215612a1257600080fd5b81356001600160401b03811115612a2857600080fd5b6121cd848285016127ed565b60008060408385031215612a4757600080fd5b612a5083612791565b915060208301358015158114612a6557600080fd5b809150509250929050565b60008060008060808587031215612a8657600080fd5b612a8f85612791565b9350612a9d60208601612791565b92506040850135915060608501356001600160401b03811115612abf57600080fd5b612acb878288016127ed565b91505092959194509250565b60008060408385031215612aea57600080fd5b612af383612791565b9150612b0160208401612791565b90509250929050565b600181811c90821680612b1e57607f821691505b602082108103612b3e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201612b6c57612b6c612b44565b5060010190565b60208152815160208201526020820151604082015261ffff60408301511660608201526000606083015163ffffffff80821660808501528060808601511660a0850152505060a083015160c0808401526121cd60e0840182612739565b600060208284031215612be257600080fd5b5051919050565b8181038181111561074257610742612b44565b634e487b7160e01b600052603260045260246000fd5b601f8211156108e657600081815260208120601f850160051c81016020861015612c395750805b601f850160051c820191505b81811015612c5857828155600101612c45565b505050505050565b818103612c6b575050565b612c758254612b0a565b6001600160401b03811115612c8c57612c8c6127d7565b612ca081612c9a8454612b0a565b84612c12565b6000601f821160018114612cd45760008315612cbc5750848201545b600019600385901b1c1916600184901b1784556118c2565b600085815260209020601f19841690600086815260209020845b83811015612d0e5782860154825560019586019590910190602001612cee565b5085831015612d2c5781850154600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fd5b81516001600160401b03811115612d6b57612d6b6127d7565b612d7981612c9a8454612b0a565b602080601f831160018114612dae5760008415612d965750858301515b600019600386901b1c1916600185901b178555612c58565b600085815260208120601f198616915b82811015612ddd57888601518255948401946001909101908401612dbe565b5085821015612d2c57939096015160001960f8600387901b161c19169092555050600190811b01905550565b60008351612e1b818460208801612715565b835190830190612e2f818360208801612715565b01949350505050565b600082612e5557634e487b7160e01b600052601260045260246000fd5b500690565b838152604060208201819052810182905260006001600160fb1b03831115612e8157600080fd5b8260051b8085606085013791909101606001949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ece90830184612739565b9695505050505050565b600060208284031215612eea57600080fd5b8151611176816126e2565b634e487b7160e01b600052602160045260246000fd5b6001600160401b038616815260a060208201526000612f2d60a0830187612739565b61ffff9590951660408301525063ffffffff92909216606083015260809091015292915050565b8082018082111561074257610742612b44565b808202811582820484141761074257610742612b44565b600181815b80851115612fb9578160001904821115612f9f57612f9f612b44565b80851615612fac57918102915b93841c9390800290612f83565b509250929050565b600082612fd057506001610742565b81612fdd57506000610742565b8160018114612ff35760028114612ffd57613019565b6001915050610742565b60ff84111561300e5761300e612b44565b50506001821b610742565b5060208310610133831016604e8410600b841016171561303c575081810a610742565b6130468383612f7e565b806000190482111561305a5761305a612b44565b029392505050565b60006111768383612fc156fea26469706673582212203d703086aa32693f1671be4d2ebcfbcb7033312761ae6da294f756defbade6f964736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2D6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x813CE42D GT PUSH2 0x182 JUMPI DUP1 PUSH4 0xA969A403 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xCFD30A6E GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xED647D21 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xED647D21 EQ PUSH2 0x666 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x66F JUMPI DUP1 PUSH4 0xF887EA40 EQ PUSH2 0x682 JUMPI DUP1 PUSH4 0xFF712D02 EQ PUSH2 0x695 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCFD30A6E EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0xE1E16379 EQ PUSH2 0x64A JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA969A403 EQ PUSH2 0x5DD JUMPI DUP1 PUSH4 0xAB6EEF52 EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xB187BD26 EQ PUSH2 0x5ED JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x601 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x614 JUMPI DUP1 PUSH4 0xCF2A1A0E EQ PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9443DEC1 GT PUSH2 0x13B JUMPI DUP1 PUSH4 0x9443DEC1 EQ PUSH2 0x578 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x58B JUMPI DUP1 PUSH4 0x98BDF6F5 EQ PUSH2 0x593 JUMPI DUP1 PUSH4 0x9ECCACF6 EQ PUSH2 0x59C JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x5AF JUMPI DUP1 PUSH4 0xA3E56FA8 EQ PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x813CE42D EQ PUSH2 0x529 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x53C JUMPI DUP1 PUSH4 0x849E0312 EQ PUSH2 0x544 JUMPI DUP1 PUSH4 0x8A0EC9D2 EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x554 JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x425C9FA2 GT PUSH2 0x241 JUMPI DUP1 PUSH4 0x598BC486 GT PUSH2 0x1FA JUMPI DUP1 PUSH4 0x6F2F418E GT PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6F2F418E EQ PUSH2 0x4F2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x7D058D4F EQ PUSH2 0x520 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x598BC486 EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0x6250FB2B EQ PUSH2 0x4D7 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x425C9FA2 EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x3F8 JUMPI DUP1 PUSH4 0x48E9687A EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0x5151804A EQ PUSH2 0x41E JUMPI DUP1 PUSH4 0x53CD456F EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x5846D682 EQ PUSH2 0x447 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x293 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x37E JUMPI DUP1 PUSH4 0x265D1FA3 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x2AF60523 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x35D46D5C EQ PUSH2 0x3B0 JUMPI DUP1 PUSH4 0x3B7ED734 EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2DB JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xCA76175 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x36B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2EE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x26F8 JUMP JUMPDEST PUSH2 0x6F6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30B PUSH2 0x748 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x2765 JUMP JUMPDEST PUSH2 0x32B PUSH2 0x326 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x7DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 CALLDATASIZE PUSH1 0x4 PUSH2 0x27AD JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x356 PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x2879 JUMP JUMPDEST PUSH2 0x812 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x28E5 JUMP JUMPDEST PUSH2 0x896 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x2963 JUMP JUMPDEST PUSH2 0x8EB JUMP JUMPDEST PUSH2 0x30B PUSH2 0x976 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x30B PUSH2 0xA04 JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x3C8 SWAP1 PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xA28 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x406 CALLDATASIZE PUSH1 0x4 PUSH2 0x2963 JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x419 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xA64 JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x3C8 SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x442 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xCDB JUMP JUMPDEST PUSH2 0x48B PUSH2 0x455 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF DUP1 DUP4 AND SWAP4 PUSH2 0x100 SWAP1 SWAP4 DIV AND SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x18 SLOAD PUSH2 0x4C4 SWAP1 PUSH2 0xFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH2 0x30B PUSH2 0xDB0 JUMP JUMPDEST PUSH2 0x32B PUSH2 0x4ED CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x30B PUSH2 0x500 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0xDC8 JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x513 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xDE1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0xE29 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x537 CALLDATASIZE PUSH1 0x4 PUSH2 0x29BA JUMP JUMPDEST PUSH2 0xED7 JUMP JUMPDEST PUSH2 0x356 PUSH2 0xF50 JUMP JUMPDEST PUSH2 0x30B PUSH2 0xF6D JUMP JUMPDEST PUSH2 0x30B PUSH2 0xF7A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x356 PUSH2 0x573 CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0xF87 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x586 CALLDATASIZE PUSH1 0x4 PUSH2 0x2A00 JUMP JUMPDEST PUSH2 0x1079 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10BD JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x5BD CALLDATASIZE PUSH1 0x4 PUSH2 0x2A34 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x1B SLOAD PUSH2 0x32B SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10D7 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x10E4 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2EE SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x60F CALLDATASIZE PUSH1 0x4 PUSH2 0x2A70 JUMP JUMPDEST PUSH2 0x10F1 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH2 0x3C8 SWAP1 PUSH4 0xFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x30B PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH2 0x117D JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2EE PUSH2 0x661 CALLDATASIZE PUSH1 0x4 PUSH2 0x2AD7 JUMP JUMPDEST PUSH2 0x11A8 JUMP JUMPDEST PUSH2 0x3A2 PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x67D CALLDATASIZE PUSH1 0x4 PUSH2 0x299F JUMP JUMPDEST PUSH2 0x11D6 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x6D1 PUSH2 0x6A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x2778 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x727 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x742 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x757 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x783 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E5 DUP3 PUSH2 0x11EA JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x742 JUMP JUMPDEST PUSH2 0x80E DUP3 DUP3 CALLER PUSH2 0x1223 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH4 0xC6829F83 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x866 DUP4 DUP4 DUP4 PUSH2 0x1230 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 SWAP1 PUSH32 0x85E1543BF2F84FE80C6BADBCE3648C8539AD1DF4D2B3D822938CA0538BE727E6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x8DB JUMPI PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH2 0x1317 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x915 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x922 DUP4 DUP4 CALLER PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x12 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9AF SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9FC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9D1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9FC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9DF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x1E DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0xA19 PUSH2 0x163B JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x19 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xA38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x10F1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xAB3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x10DBDB9D1C9858DD081A5CC81C185D5CD959 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD SWAP1 PUSH1 0x0 PUSH2 0xAC3 DUP4 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x8 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x17 SLOAD DUP2 MSTORE PUSH1 0x15 SLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x18 SLOAD PUSH2 0xFFFF DUP2 AND DUP4 DUP6 ADD MSTORE PUSH1 0x1B SLOAD PUSH4 0xFFFFFFFF SWAP1 DUP2 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH3 0x10000 SWAP1 SWAP2 DIV AND PUSH1 0x80 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x9B1C385E SWAP2 SWAP1 PUSH1 0xA0 DUP3 ADD SWAP1 PUSH2 0xB3C SWAP1 PUSH2 0x1690 JUMP JUMPDEST DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB5B SWAP2 SWAP1 PUSH2 0x2B73 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9E SWAP2 SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP1 DUP5 ADD DUP3 DUP2 MSTORE PUSH1 0x9 SLOAD DUP6 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND PUSH1 0x60 DUP9 ADD SWAP1 DUP2 MSTORE DUP9 MLOAD DUP8 DUP2 MSTORE DUP1 DUP7 ADD DUP11 MSTORE PUSH1 0x80 DUP10 ADD SWAP1 DUP2 MSTORE DUP11 DUP9 MSTORE PUSH1 0x16 DUP7 MSTORE SWAP9 SWAP1 SWAP7 KECCAK256 DUP8 MLOAD DUP2 SLOAD SWAP5 MLOAD PUSH2 0xFFFF NOT SWAP1 SWAP6 AND SWAP1 ISZERO ISZERO PUSH2 0xFF00 NOT AND OR PUSH2 0x100 SWAP5 ISZERO ISZERO SWAP5 SWAP1 SWAP5 MUL SWAP4 SWAP1 SWAP4 OR DUP4 SSTORE SWAP1 MLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE SWAP3 MLOAD DUP1 MLOAD SWAP5 SWAP6 POP SWAP2 SWAP4 SWAP1 SWAP3 PUSH2 0xC53 SWAP3 PUSH1 0x3 DUP6 ADD SWAP3 SWAP2 ADD SWAP1 PUSH2 0x25D8 JUMP JUMPDEST POP POP PUSH1 0x19 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x944998273E477B495144FB8794C914197F3CCB46BE2900F4698FD0EF743C9695 ADD DUP3 SWAP1 SSTORE POP PUSH1 0x1A DUP2 SWAP1 SSTORE PUSH1 0x18 SLOAD PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH3 0x10000 SWAP1 SWAP3 DIV PUSH4 0xFFFFFFFF AND PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0xCC58B13AD3EAB50626C6A6300B1D139CD6EBB1688A7CCED9461C2F7E762665EE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0xCE3 PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 LT PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E646578206F7574206F6620626F756E6473 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH2 0xD3A SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xD4A JUMPI PUSH2 0xD4A PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xD67 JUMPI PUSH2 0xD67 PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x2C60 JUMP JUMPDEST POP PUSH1 0xA DUP1 SLOAD DUP1 PUSH2 0xD8F JUMPI PUSH2 0xD8F PUSH2 0x2D3C JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0xDAB SWAP2 SWAP1 PUSH2 0x2623 JUMP JUMPDEST SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x13 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x742 DUP3 PUSH2 0x11EA JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE0D JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x26BAB9BA10313290383937B837B9B2B21037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP3 AND CALLER SWAP1 DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x7 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST PUSH2 0xEDF PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA SLOAD DUP3 LT PUSH2 0xF26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E646578206F7574206F6620626F756E6473 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP1 PUSH1 0xA DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 PUSH2 0x8E6 SWAP2 SWAP1 PUSH2 0x2D52 JUMP JUMPDEST PUSH2 0xF58 PUSH2 0x163B JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1F DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xFAD JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO JUMPDEST ISZERO PUSH2 0xFFE JUMPI CALLER PUSH2 0xFC5 PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x61DB9C1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xD1A6A14209A385A964D036E404CB5CFB71F4000CDB03C9366292430787261BE6 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x1081 PUSH2 0x163B JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC65A7BB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2A8 ADD PUSH2 0x80E DUP3 DUP3 PUSH2 0x2D52 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x757 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x80E CALLER DUP4 DUP4 PUSH2 0x1701 JUMP JUMPDEST PUSH1 0x1C DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1D DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH2 0x10FC DUP5 DUP5 DUP5 PUSH2 0x8EB JUMP JUMPDEST PUSH2 0x970 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17A0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1113 DUP3 PUSH2 0x11EA JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x112B PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x114B JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1176 JUMP JUMPDEST DUP1 PUSH2 0x1155 DUP5 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1166 SWAP3 SWAP2 SWAP1 PUSH2 0x2E09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x118D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH2 0x983 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x11DE PUSH2 0x163B JUMP JUMPDEST PUSH2 0x11E7 DUP2 PUSH2 0x195B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH2 0x8E6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO EQ PUSH2 0x1292 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x125B9D985B1A59081C995C5D595CDD081A59 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x13 PUSH2 0x129E DUP3 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0x12 PUSH2 0x12AB DUP4 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0xB PUSH2 0x12B8 DUP4 DUP3 PUSH2 0x2D52 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND SWAP1 SSTORE SLOAD DUP4 MSTORE PUSH1 0xC SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH2 0x12EE PUSH1 0xB DUP3 PUSH2 0x2C60 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 SLOAD PUSH2 0x8E6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x1B0B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x16 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1333 PUSH1 0x3 DUP3 ADD DUP5 DUP5 PUSH2 0x265D JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR DUP2 SSTORE PUSH1 0xA SLOAD PUSH1 0x0 SWAP1 DUP5 DUP5 DUP4 DUP2 PUSH2 0x1355 JUMPI PUSH2 0x1355 PUSH2 0x2BFC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x1366 SWAP2 SWAP1 PUSH2 0x2E38 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xA DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x137D JUMPI PUSH2 0x137D PUSH2 0x2BFC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x1392 SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13BE SWAP1 PUSH2 0x2B0A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x140B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13E0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x140B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13EE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x1453 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x145D DUP2 DUP4 PUSH2 0x1B25 JUMP JUMPDEST PUSH2 0x148C PUSH2 0x1469 DUP3 PUSH2 0x1B32 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x14 SLOAD PUSH1 0x10 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH2 0x1E0A JUMP JUMPDEST PUSH1 0x11 DUP2 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SLOAD DUP3 MSTORE PUSH1 0x2 DUP9 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP5 DUP7 ADD DUP5 DUP2 MSTORE PUSH1 0x0 SWAP8 DUP9 MSTORE PUSH1 0xE SWAP1 SWAP2 MSTORE SWAP6 DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE MLOAD SWAP3 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP5 MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP6 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD PUSH32 0xFE2E2D779DBA245964D4E3EF9B994BE63856FD568BF7D3CA9E224755CB1BD54D SWAP1 PUSH2 0x1531 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH2 0x2E5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x156F JUMPI PUSH2 0x156F DUP2 DUP5 DUP7 PUSH2 0x1EDC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x15AD JUMPI PUSH2 0x158C PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1A05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x15DC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x168E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x27B7363C9031B0B63630B1363290313C9037BBB732B9 PUSH1 0x51 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH32 0x92FD13387C7FE7BEFBC38D303D6468778FB9731BC4583F17D92989C6FCFDEAAA DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x16C9 SWAP2 MLOAD ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1733 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x17E2 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x2E9B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x181D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x181A SWAP2 DUP2 ADD SWAP1 PUSH2 0x2ED8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1886 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x184B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x187E JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x18C2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18D6 DUP4 PUSH2 0x1F40 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x18F5 JUMPI PUSH2 0x18F5 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x191F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1929 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x19B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD SWAP2 SWAP3 AND SWAP1 PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1A19 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1ADB JUMPI PUSH1 0x0 PUSH2 0x1A29 DUP5 PUSH2 0x11EA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1A55 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1A68 JUMPI POP PUSH2 0x1A66 DUP2 DUP5 PUSH2 0x11A8 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A91 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1AD9 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x80E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x2018 JUMP JUMPDEST PUSH2 0x80E DUP3 PUSH1 0x0 DUP1 DUP5 PUSH2 0x202F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1B41 PUSH2 0x100 PUSH2 0x20AD JUMP JUMPDEST SWAP1 POP PUSH2 0x1B7A PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x31B7B232A637B1B0BA34B7B7 PUSH1 0xA1 SHL DUP2 MSTORE POP DUP3 PUSH2 0x20CE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 MLOAD PUSH2 0x1B98 SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x20E7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x6C616E6775616765 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1BC2 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x1BD9 SWAP1 DUP1 ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0x736F75726365 PUSH1 0xD0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C01 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x1C11 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1CA5 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x61726773 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1C42 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1C4B DUP2 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1C9B JUMPI PUSH2 0x1C8B DUP5 PUSH1 0xA0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C74 JUMPI PUSH2 0x1C74 PUSH2 0x2BFC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x20CE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1C94 DUP2 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1C4E JUMP JUMPDEST POP PUSH2 0x1CA5 DUP2 PUSH2 0x2144 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1D69 JUMPI PUSH1 0x0 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1CC8 JUMPI PUSH2 0x1CC8 PUSH2 0x2EF5 JUMP JUMPDEST SUB PUSH2 0x1CE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA80D31F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xF DUP2 MSTORE PUSH15 0x39B2B1B932BA39A637B1B0BA34B7B7 PUSH1 0x89 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D17 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1D30 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1B91 JUMPI PUSH2 0x1B91 PUSH2 0x2EF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x7 DUP2 MSTORE PUSH7 0x73656372657473 PUSH1 0xC8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D59 SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MLOAD PUSH2 0x1D69 SWAP1 DUP3 SWAP1 PUSH2 0x2162 JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MLOAD MLOAD ISZERO PUSH2 0x1E02 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH9 0x627974657341726773 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1D9F SWAP1 DUP3 SWAP1 PUSH2 0x20CE JUMP JUMPDEST PUSH2 0x1DA8 DUP2 PUSH2 0x2120 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 PUSH1 0xC0 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1DF8 JUMPI PUSH2 0x1DE8 DUP5 PUSH1 0xC0 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DD1 JUMPI PUSH2 0x1DD1 PUSH2 0x2BFC JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 PUSH2 0x2162 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1DF1 DUP2 PUSH2 0x2B5A JUMP JUMPDEST SWAP1 POP PUSH2 0x1DAB JUMP JUMPDEST POP PUSH2 0x1E02 DUP2 PUSH2 0x2144 JUMP JUMPDEST MLOAD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x461D2762 DUP7 DUP9 PUSH1 0x1 DUP9 DUP9 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E62 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F0B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1E81 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1EA5 SWAP2 SWAP1 PUSH2 0x2BD0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP DUP2 SWAP1 PUSH32 0x1131472297A800FEE664D1D89CFA8F7676FF07189ECC53F80BBB5F4969099DB8 SWAP1 PUSH1 0x0 SWAP1 LOG2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1EE7 DUP4 DUP4 DUP4 PUSH2 0x216F JUMP JUMPDEST PUSH2 0x8E6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1F15 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1F7F JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FAB JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1FC9 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1FE1 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1FF5 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2007 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x742 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2022 DUP4 DUP4 PUSH2 0x21D5 JUMP JUMPDEST PUSH2 0x8E6 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x17A0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x2051 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22CE3EDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2064 JUMPI PUSH2 0x2064 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x2077 JUMPI PUSH2 0x2077 PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x40 DUP5 ADD DUP3 DUP1 ISZERO PUSH2 0x208D JUMPI PUSH2 0x208D PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 DUP2 DUP1 ISZERO PUSH2 0x209D JUMPI PUSH2 0x209D PUSH2 0x2EF5 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x60 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x20B5 PUSH2 0x2698 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x20C1 SWAP1 DUP4 PUSH2 0x223A JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x20DB DUP3 PUSH1 0x3 DUP4 MLOAD PUSH2 0x22B1 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x8E6 SWAP1 DUP3 PUSH2 0x23CA JUMP JUMPDEST DUP2 MLOAD PUSH2 0x20F4 SWAP1 PUSH1 0xC2 PUSH2 0x23EB JUMP JUMPDEST POP PUSH2 0x80E DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x210C SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x2162 JUMP JUMPDEST PUSH2 0x212B DUP2 PUSH1 0x4 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x213E SWAP2 SWAP1 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 MSTORE POP POP JUMP JUMPDEST PUSH2 0x214F DUP2 PUSH1 0x7 PUSH2 0x2454 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 ADD DUP2 DUP2 MLOAD PUSH2 0x213E SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0x20DB DUP3 PUSH1 0x2 DUP4 MLOAD PUSH2 0x22B1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x21CD JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x21A9 JUMPI POP PUSH2 0x21A9 DUP5 DUP5 PUSH2 0x11A8 JUMP JUMPDEST DUP1 PUSH2 0x21CD JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x21FF JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220D DUP4 DUP4 PUSH1 0x0 PUSH2 0x1542 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x225A PUSH1 0x20 DUP4 PUSH2 0x2E38 JUMP JUMPDEST ISZERO PUSH2 0x2282 JUMPI PUSH2 0x226A PUSH1 0x20 DUP4 PUSH2 0x2E38 JUMP JUMPDEST PUSH2 0x2275 SWAP1 PUSH1 0x20 PUSH2 0x2BE9 JUMP JUMPDEST PUSH2 0x227F SWAP1 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 DUP2 DUP5 ADD ADD DUP2 DUP2 LT ISZERO PUSH2 0x22A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x17 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x22D7 JUMPI DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0xE0 PUSH1 0x5 DUP6 SWAP1 SHL AND DUP4 OR PUSH2 0x23EB JUMP JUMPDEST PUSH1 0xFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2317 JUMPI DUP3 MLOAD PUSH2 0x22FF SWAP1 PUSH1 0x18 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x1 PUSH2 0x246B JUMP JUMPDEST PUSH2 0xFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x2358 JUMPI DUP3 MLOAD PUSH2 0x2340 SWAP1 PUSH1 0x19 PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x2 PUSH2 0x246B JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND GT PUSH2 0x239B JUMPI DUP3 MLOAD PUSH2 0x2383 SWAP1 PUSH1 0x1A PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x4 PUSH2 0x246B JUMP JUMPDEST DUP3 MLOAD PUSH2 0x23B2 SWAP1 PUSH1 0x1B PUSH2 0x1FE0 PUSH1 0x5 DUP7 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x970 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 AND PUSH1 0x8 PUSH2 0x246B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1176 DUP4 DUP4 DUP5 MLOAD PUSH2 0x24F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD MLOAD PUSH1 0x0 PUSH2 0x2410 DUP3 PUSH1 0x1 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 LT PUSH2 0x2431 JUMPI PUSH2 0x2431 DUP6 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST PUSH2 0x25C1 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x20 DUP4 DUP3 ADD ADD DUP6 DUP2 MSTORE8 POP DUP1 MLOAD DUP3 GT ISZERO PUSH2 0x244A JUMPI DUP2 DUP2 MSTORE JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x8E6 SWAP1 PUSH1 0x1F PUSH2 0x1FE0 PUSH1 0x5 DUP6 SWAP1 SHL AND OR PUSH2 0x23EB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x248F DUP3 DUP6 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x24AC JUMPI PUSH2 0x24AC DUP7 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x24BC DUP7 PUSH2 0x100 PUSH2 0x3062 JUMP JUMPDEST PUSH2 0x24C6 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST SWAP1 POP DUP7 MLOAD DUP3 DUP2 ADD DUP8 DUP4 NOT DUP3 MLOAD AND OR DUP2 MSTORE POP DUP1 MLOAD DUP4 GT ISZERO PUSH2 0x24E4 JUMPI DUP3 DUP2 MSTORE JUMPDEST POP SWAP6 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP3 MLOAD DUP3 GT ISZERO PUSH2 0x2513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD MLOAD PUSH1 0x0 PUSH2 0x2522 DUP5 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP DUP6 PUSH1 0x20 ADD MLOAD DUP2 GT ISZERO PUSH2 0x253F JUMPI PUSH2 0x253F DUP7 PUSH2 0x242C DUP4 PUSH1 0x2 PUSH2 0x2F67 JUMP JUMPDEST DUP6 MLOAD DUP1 MLOAD DUP4 DUP3 ADD PUSH1 0x20 ADD SWAP2 PUSH1 0x0 SWAP2 DUP1 DUP6 GT ISZERO PUSH2 0x2559 JUMPI DUP5 DUP3 MSTORE JUMPDEST POP POP POP PUSH1 0x20 DUP7 ADD JUMPDEST PUSH1 0x20 DUP7 LT PUSH2 0x2599 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH2 0x2578 PUSH1 0x20 DUP4 PUSH2 0x2F54 JUMP JUMPDEST SWAP2 POP PUSH2 0x2585 PUSH1 0x20 DUP3 PUSH2 0x2F54 JUMP JUMPDEST SWAP1 POP PUSH2 0x2592 PUSH1 0x20 DUP8 PUSH2 0x2BE9 JUMP JUMPDEST SWAP6 POP PUSH2 0x2561 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x0 NOT PUSH1 0x20 DUP9 SWAP1 SUB PUSH2 0x100 EXP ADD SWAP1 DUP2 AND SWAP1 NOT SWAP2 SWAP1 SWAP2 AND OR SWAP1 MSTORE POP DUP5 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH2 0x25CD DUP4 DUP4 PUSH2 0x223A JUMP JUMPDEST POP PUSH2 0x970 DUP4 DUP3 PUSH2 0x23CA JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2613 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2613 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x25F8 JUMP JUMPDEST POP PUSH2 0x261F SWAP3 SWAP2 POP PUSH2 0x26CD JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x262F SWAP1 PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x263F JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x11E7 SWAP2 SWAP1 PUSH2 0x26CD JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x2613 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2613 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x267D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x26C0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x261F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x26CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x11E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x270A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1176 DUP2 PUSH2 0x26E2 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2730 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2718 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2751 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2715 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1176 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x278A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x27A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27C9 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x27FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2818 JUMPI PUSH2 0x2818 PUSH2 0x27D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2840 JUMPI PUSH2 0x2840 PUSH2 0x27D7 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x2859 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x288E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x28AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28B8 DUP8 DUP4 DUP9 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x28CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28DB DUP7 DUP3 DUP8 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x28FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x2918 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x292C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x293B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2978 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2981 DUP5 PUSH2 0x2791 JUMP JUMPDEST SWAP3 POP PUSH2 0x298F PUSH1 0x20 DUP6 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1176 DUP3 PUSH2 0x2791 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x29CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x29EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29F6 DUP6 DUP3 DUP7 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2A28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x21CD DUP5 DUP3 DUP6 ADD PUSH2 0x27ED JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A50 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x2A65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2A86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A8F DUP6 PUSH2 0x2791 JUMP JUMPDEST SWAP4 POP PUSH2 0x2A9D PUSH1 0x20 DUP7 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2ABF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2ACB DUP8 DUP3 DUP9 ADD PUSH2 0x27ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2AF3 DUP4 PUSH2 0x2791 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B01 PUSH1 0x20 DUP5 ADD PUSH2 0x2791 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2B1E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2B3E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x2B6C JUMPI PUSH2 0x2B6C PUSH2 0x2B44 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xFFFF PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP4 ADD MLOAD PUSH4 0xFFFFFFFF DUP1 DUP3 AND PUSH1 0x80 DUP6 ADD MSTORE DUP1 PUSH1 0x80 DUP7 ADD MLOAD AND PUSH1 0xA0 DUP6 ADD MSTORE POP POP PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xC0 DUP1 DUP5 ADD MSTORE PUSH2 0x21CD PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x2739 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x8E6 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x2C39 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2C58 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2C45 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB PUSH2 0x2C6B JUMPI POP POP JUMP JUMPDEST PUSH2 0x2C75 DUP3 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2C8C JUMPI PUSH2 0x2C8C PUSH2 0x27D7 JUMP JUMPDEST PUSH2 0x2CA0 DUP2 PUSH2 0x2C9A DUP5 SLOAD PUSH2 0x2B0A JUMP JUMPDEST DUP5 PUSH2 0x2C12 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2CD4 JUMPI PUSH1 0x0 DUP4 ISZERO PUSH2 0x2CBC JUMPI POP DUP5 DUP3 ADD SLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x18C2 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x1F NOT DUP5 AND SWAP1 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP5 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D0E JUMPI DUP3 DUP7 ADD SLOAD DUP3 SSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x2CEE JUMP JUMPDEST POP DUP6 DUP4 LT ISZERO PUSH2 0x2D2C JUMPI DUP2 DUP6 ADD SLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2D6B JUMPI PUSH2 0x2D6B PUSH2 0x27D7 JUMP JUMPDEST PUSH2 0x2D79 DUP2 PUSH2 0x2C9A DUP5 SLOAD PUSH2 0x2B0A JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2DAE JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2D96 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2C58 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2DDD JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2DBE JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2D2C JUMPI SWAP4 SWAP1 SWAP7 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 PUSH1 0x3 DUP8 SWAP1 SHL AND SHR NOT AND SWAP1 SWAP3 SSTORE POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2E1B DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2715 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2E2F DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2715 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2E55 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x2E81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 PUSH1 0x60 DUP6 ADD CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2ECE SWAP1 DUP4 ADD DUP5 PUSH2 0x2739 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2EEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1176 DUP2 PUSH2 0x26E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP7 AND DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2F2D PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x2739 JUMP JUMPDEST PUSH2 0xFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x742 JUMPI PUSH2 0x742 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2FB9 JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x2F9F JUMPI PUSH2 0x2F9F PUSH2 0x2B44 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2FAC JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x2F83 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x2FD0 JUMPI POP PUSH1 0x1 PUSH2 0x742 JUMP JUMPDEST DUP2 PUSH2 0x2FDD JUMPI POP PUSH1 0x0 PUSH2 0x742 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x2FF3 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2FFD JUMPI PUSH2 0x3019 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x742 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x300E JUMPI PUSH2 0x300E PUSH2 0x2B44 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x742 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x303C JUMPI POP DUP2 DUP2 EXP PUSH2 0x742 JUMP JUMPDEST PUSH2 0x3046 DUP4 DUP4 PUSH2 0x2F7E JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x305A JUMPI PUSH2 0x305A PUSH2 0x2B44 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1176 DUP4 DUP4 PUSH2 0x2FC1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE PUSH17 0x3086AA32693F1671BE4D2EBCFBCB703331 0x27 PUSH2 0xAE6D LOG2 SWAP5 0xF7 JUMP 0xDE 0xFB 0xAD 0xE6 0xF9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"629:10798:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:16;;;;;;:::i;:::-;;:::i;:::-;;;565:14:27;;558:22;540:41;;528:2;513:18;1561:300:16;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;3497:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:27;;;1679:51;;1667:2;1652:18;3497:154:16;1533:203:27;3323:113:16;;;;;;:::i;:::-;;:::i;:::-;;2078:286:0;;;;;;:::i;:::-;;:::i;7489:280:10:-;;;;;;:::i;:::-;;:::i;4143:578:16:-;;;;;;:::i;:::-;;:::i;2109:41:26:-;;;:::i;2739:114::-;;;;;;;;;5035:25:27;;;5023:2;5008:18;2739:114:26;4889:177:27;4573:440:26;;;:::i;3071:42::-;;;;;;;;;;;;5245:10:27;5233:23;;;5215:42;;5203:2;5188:18;3071:42:26;5071:192:27;10454:71:26;;;:::i;2998:30::-;;;;;;:::i;:::-;;:::i;4787:132:16:-;;;;;;:::i;:::-;;:::i;6089:1262:26:-;;;;;;:::i;:::-;;:::i;2963:29::-;;;;;;;;;;;;10814:294;;;;;;:::i;:::-;;:::i;2589:72::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2589:72:26;;;;;;;5885:14:27;;5878:22;5860:41;;5944:14;;5937:22;5932:2;5917:18;;5910:50;5976:18;;;5969:34;-1:-1:-1;;;;;6039:32:27;6034:2;6019:18;;6012:60;5847:3;5832:19;2589:72:26;5641:437:27;2916:41:26;;;;;;;;;;;;6257:6:27;6245:19;;;6227:38;;6215:2;6200:18;2916:41:26;6083:188:27;2156:38:26;;;:::i;2185:118:16:-;;;;;;:::i;:::-;;:::i;1284:50:26:-;;;;;;:::i;:::-;;:::i;1920:208:16:-;;;;;;:::i;:::-;;:::i;1026:316:6:-;;;:::i;3034:31:26:-;;;;;;11186:239;;;;;;:::i;:::-;;:::i;10328:68::-;;;:::i;1231:46::-;;;:::i;5019:399::-;;;:::i;1382:81:6:-;1451:7;;-1:-1:-1;;;;;1451:7:6;1382:81;;7831:276:10;;;;;;:::i;:::-;;:::i;10614:122:26:-;;;;;;:::i;:::-;;:::i;2518:93:16:-;;;:::i;1152:29:26:-;;;;;;6077:45:10;;;;;-1:-1:-1;;;;;6077:45:10;;;3718:144:16;;;;;;:::i;:::-;;:::i;3226:74:26:-;;;;;;;;-1:-1:-1;;;;;3226:74:26;;;3650:424;;;:::i;4080:487::-;;;:::i;1125:20::-;;;;;-1:-1:-1;;;1125:20:26;;;;;;4985:208:16;;;;;;:::i;:::-;;:::i;2677:255::-;;;;;;:::i;:::-;;:::i;2200:39:26:-;;;;;;;;;1188:36;;;;;;:::i;:::-;;:::i;2059:44::-;;;;;;3928:153:16;;;;;;:::i;:::-;;:::i;2357:120:26:-;;;;;;847:98:6;;;;;;:::i;:::-;;:::i;1771:66:26:-;;;;;-1:-1:-1;;;;;1771:66:26;;;1611:90;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1611:90:26;;;-1:-1:-1;;;1611:90:26;;;;;;;;;;8774:25:27;;;-1:-1:-1;;;;;8835:32:27;;;8830:2;8815:18;;8808:60;8911:14;8904:22;8884:18;;;8877:50;8762:2;8747:18;1611:90:26;8578:355:27;1561:300:16;1663:4;-1:-1:-1;;;;;;1698:40:16;;-1:-1:-1;;;1698:40:16;;:104;;-1:-1:-1;;;;;;;1754:48:16;;-1:-1:-1;;;1754:48:16;1698:104;:156;;;-1:-1:-1;;;;;;;;;;861:40:22;;;1818:36:16;1679:175;1561:300;-1:-1:-1;;1561:300:16:o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;-1:-1:-1;6008:7:16;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6034:24:16;3623:21;5938:127;3323:113;3394:35;3403:2;3407:7;735:10:20;3394:8:16;:35::i;:::-;3323:113;;:::o;2078:286:0:-;2199:10;-1:-1:-1;;;;;2221:8:0;2199:31;;2195:81;;2247:22;;-1:-1:-1;;;2247:22:0;;;;;;;;;;;2195:81;2281:40;2296:9;2307:8;2317:3;2281:14;:40::i;:::-;2332:27;;2349:9;;2332:27;;;;;2078:286;;;:::o;7489:280:10:-;7612:16;;-1:-1:-1;;;;;7612:16:10;7590:10;:39;7586:131;;7692:16;;7646:64;;-1:-1:-1;;;7646:64:10;;7672:10;7646:64;;;9535:34:27;-1:-1:-1;;;;;7692:16:10;;;9585:18:27;;;9578:43;9470:18;;7646:64:10;;;;;;;;7586:131;7722:42;7741:9;7752:11;;7722:18;:42::i;:::-;7489:280;;;:::o;4143:578:16:-;-1:-1:-1;;;;;4237:16:16;;4233:87;;4276:33;;-1:-1:-1;;;4276:33:16;;4306:1;4276:33;;;1679:51:27;1652:18;;4276:33:16;1533:203:27;4233:87:16;4538:21;4562:34;4570:2;4574:7;735:10:20;4562:7:16;:34::i;:::-;4538:58;;4627:4;-1:-1:-1;;;;;4610:21:16;:13;-1:-1:-1;;;;;4610:21:16;;4606:109;;4654:50;;-1:-1:-1;;;4654:50:16;;-1:-1:-1;;;;;9890:15:27;;;4654:50:16;;;9872:34:27;9922:18;;;9915:34;;;9985:15;;9965:18;;;9958:43;9807:18;;4654:50:16;9632:375:27;4606:109:16;4223:498;4143:578;;;:::o;2109:41:26:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4573:440::-;;;;;;;:::i;10454:71::-;2075:20:6;:18;:20::i;:::-;10502:8:26::1;:16:::0;;-1:-1:-1;;;;10502:16:26::1;::::0;;10454:71::o;2998:30::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2998:30:26;:::o;4787:132:16:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;6089:1262:26:-;6167:8;;-1:-1:-1;;;6167:8:26;;;;6166:9;6158:40;;;;-1:-1:-1;;;6158:40:26;;10214:2:27;6158:40:26;;;10196:21:27;10253:2;10233:18;;;10226:30;-1:-1:-1;;;10272:18:27;;;10265:48;10330:18;;6158:40:26;10012:342:27;6158:40:26;6293:14;:16;;;:14;:16;;;:::i;:::-;;;;-1:-1:-1;;6405:16:26;;6454:446;;;;;;;;6516:22;;6454:446;;6563:17;;6454:446;;;;;;;;6620:23;;;;;6454:446;;;;6679:19;;;;;;6454:446;;;;6726:11;;;;;6454:446;;;;6816:51;;;;;;;;6385:17;6816:51;;;6385:17;-1:-1:-1;;;;;6405:16:26;;:35;;6454:446;;;;;6766:119;;:28;:119::i;:::-;6454:446;;;6405:505;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7017:200;;;;;;;;-1:-1:-1;7017:200:26;;;;;;;;;;;7126:14;;7017:200;;;;;;-1:-1:-1;;;;;7017:200:26;;;;;;;;;7061:16;;;;;;;;;;7017:200;;;;;;6975:39;;;:28;:39;;;;;;:242;;;;;;-1:-1:-1;;6975:242:26;;;;;;-1:-1:-1;;6975:242:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6975:242:26;;;;;;;;;;;;;6385:525;;-1:-1:-1;7017:200:26;;6975:39;;:242;;;;;;;;;;:::i;:::-;-1:-1:-1;;7227:13:26;:29;;;;;;;-1:-1:-1;7227:29:26;;;;;;;;;-1:-1:-1;7266:16:26;:28;;;7332:11;;7309:35;;;11765:25:27;;;7332:11:26;;;;;;11821:2:27;11806:18;;11799:51;7309:35:26;;11738:18:27;7309:35:26;;;;;;;6148:1203;6089:1262;:::o;10814:294::-;2075:20:6;:18;:20::i;:::-;10899::26::1;:27:::0;10891:35;::::1;10883:67;;;::::0;-1:-1:-1;;;10883:67:26;;12063:2:27;10883:67:26::1;::::0;::::1;12045:21:27::0;12102:2;12082:18;;;12075:30;-1:-1:-1;;;12121:18:27;;;12114:49;12180:18;;10883:67:26::1;11861:343:27::0;10883:67:26::1;10990:20;11024:27:::0;;:31:::1;::::0;11054:1:::1;::::0;11024:31:::1;:::i;:::-;10990:75;;;;;;;;:::i;:::-;;;;;;;;10960:20;10981:5;10960:27;;;;;;;;:::i;:::-;;;;;;;;:105;;;;;;:::i;:::-;;11075:20;:26;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;10814:294:::0;:::o;2156:38::-;;;;;;;:::i;2185:118:16:-;2248:7;2274:22;2288:7;2274:13;:22::i;1284:50:26:-;;;;;;;;;;;;;;;;:::i;1920:208:16:-;1983:7;-1:-1:-1;;;;;2006:19:16;;2002:87;;2048:30;;-1:-1:-1;;;2048:30:16;;2075:1;2048:30;;;1679:51:27;1652:18;;2048:30:16;1533:203:27;2002:87:16;-1:-1:-1;;;;;;2105:16:16;;;;;:9;:16;;;;;;;1920:208::o;1026:316:6:-;1150:14;;-1:-1:-1;;;;;1150:14:6;1136:10;:28;1128:63;;;;-1:-1:-1;;;1128:63:6;;15095:2:27;1128:63:6;;;15077:21:27;15134:2;15114:18;;;15107:30;-1:-1:-1;;;15153:18:27;;;15146:52;15215:18;;1128:63:6;14893:346:27;1128:63:6;1217:7;;;-1:-1:-1;;;;;;1230:20:6;;;1240:10;1230:20;;;;;;1256:14;:27;;;;;;;1295:42;;-1:-1:-1;;;;;1217:7:6;;;;1240:10;1217:7;;1295:42;;1198:16;;1295:42;1071:271;1026:316::o;11186:239:26:-;2075:20:6;:18;:20::i;:::-;11318::26::1;:27:::0;11310:35;::::1;11302:67;;;::::0;-1:-1:-1;;;11302:67:26;;12063:2:27;11302:67:26::1;::::0;::::1;12045:21:27::0;12102:2;12082:18;;;12075:30;-1:-1:-1;;;12121:18:27;;;12114:49;12180:18;;11302:67:26::1;11861:343:27::0;11302:67:26::1;11409:9;11379:20;11400:5;11379:27;;;;;;;;:::i;:::-;;;;;;;;:39;;;;;;:::i;10328:68::-:0;2075:20:6;:18;:20::i;:::-;10374:8:26::1;:15:::0;;-1:-1:-1;;;;10374:15:26::1;-1:-1:-1::0;;;10374:15:26::1;::::0;;10328:68::o;1231:46::-;;;;;;;:::i;5019:399::-;;;;;;;:::i;7831:276:10:-;1451:7:6;;-1:-1:-1;;;;;1451:7:6;8155:10:10;:21;;;;:64;;-1:-1:-1;8202:16:10;;-1:-1:-1;;;;;8202:16:10;8180:10;:39;;8155:64;8151:162;;;8259:10;8271:7;1451::6;;-1:-1:-1;;;;;1451:7:6;;1382:81;8271:7:10;8288:16;;8236:70;;-1:-1:-1;;;8236:70:10;;-1:-1:-1;;;;;16859:15:27;;;8236:70:10;;;16841:34:27;16911:15;;;16891:18;;;16884:43;8288:16:10;;;;16943:18:27;;;16936:43;16776:18;;8236:70:10;16601:384:27;8151:162:10;-1:-1:-1;;;;;7931:29:10;::::1;7927:70;;7977:13;;-1:-1:-1::0;;;7977:13:10::1;;;;;;;;;;;7927:70;8002:16;:57:::0;;-1:-1:-1;;;;;;8002:57:10::1;-1:-1:-1::0;;;;;8002:57:10;::::1;::::0;;::::1;::::0;;;8071:31:::1;::::0;1679:51:27;;;8071:31:10::1;::::0;1667:2:27;1652:18;8071:31:10::1;;;;;;;7831:276:::0;:::o;10614:122:26:-;2075:20:6;:18;:20::i;:::-;10693::26::1;:36:::0;;::::1;::::0;::::1;::::0;;-1:-1:-1;10693:36:26;;;;;::::1;;10719:9:::0;10693:36;::::1;:::i;2518:93:16:-:0;2565:13;2597:7;2590:14;;;;;:::i;3718:144::-;3803:52;735:10:20;3836:8:16;3846;3803:18;:52::i;3650:424:26:-;;;;;;;:::i;4080:487::-;;;;;;;:::i;4985:208:16:-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;2677:255::-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;3250:9;;;;;;;;;-1:-1:-1;3250:9:16;;;3174:92;2823:10;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;2677:255;-1:-1:-1;;;2677:255:16:o;1188:36:26:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3928:153:16:-;-1:-1:-1;;;;;4039:25:16;;;4016:4;4039:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;3928:153::o;847:98:6:-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;16138:241:16:-;16201:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:16;;16263:88;;16309:31;;-1:-1:-1;;;16309:31:16;;;;;5035:25:27;;;5008:18;;16309:31:16;4889:177:27;14418:120:16;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;9230:1022:26:-;9393:45;;;;:34;:45;;;;;:55;;;;;-1:-1:-1;;;9393:55:26;;;;:63;;;9372:128;;;;-1:-1:-1;;;9372:128:26;;17693:2:27;9372:128:26;;;17675:21:27;17732:2;17712:18;;;17705:30;-1:-1:-1;;;17751:18:27;;;17744:48;17809:18;;9372:128:26;17491:342:27;9372:128:26;9559:25;:31;9587:3;9559:25;:31;:::i;:::-;-1:-1:-1;9600:28:26;:39;9631:8;9600:28;:39;:::i;:::-;-1:-1:-1;9696:32:26;:51;9738:8;9696:32;:51;:::i;:::-;-1:-1:-1;9865:5:26;9807:45;;;:34;:45;;;;;;;;:55;;;:63;;-1:-1:-1;;;;9807:63:26;;;9957:53;9927:93;;:16;:93;;;;;:128;10023:32;9927:93;:128;:::i;:::-;-1:-1:-1;10112:45:26;;;;:34;:45;;;;;:56;;;;10182:53;;10089:156;;-1:-1:-1;;;;;10112:56:26;;10089:9;:156::i;7554:1495::-;7724:32;7759:61;;;:28;:61;;;;;7830:33;:19;;;7852:11;;7830:33;:::i;:::-;-1:-1:-1;7873:24:26;;-1:-1:-1;;7873:24:26;7893:4;7873:24;;;8009:20;:27;7873:17;;7992:11;;7873:17;7992:14;;;;;:::i;:::-;;;;;;;:44;;;;:::i;:::-;7969:67;;8109:29;8141:20;8162:12;8141:34;;;;;;;;:::i;:::-;;;;;;;;8109:66;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8306:35;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8306:35:26;8351:57;:3;8392:15;8351:40;:57::i;:::-;8496:138;8522:16;:3;:14;:16::i;:::-;8552:23;;8589:16;;8619:5;;-1:-1:-1;;;;;8552:23:26;;;;8589:16;;;;;8496:12;:138::i;:::-;8464:29;:170;;;8801:143;;;;;;;;8845:15;;;;;8801:143;;8886:18;;;;-1:-1:-1;;;;;8886:18:26;;;8801:143;;;;;;;;;;;;;-1:-1:-1;8711:87:26;;;:34;:87;;;;;;;:233;;;;;;;;;;;;;;;-1:-1:-1;;;8711:233:26;-1:-1:-1;;;;;;8711:233:26;;;;;;;;;;;;;;;;;;9002:40;;;;;9019:9;;9030:11;;;;9002:40;:::i;:::-;;;;;;;;7673:1376;;;;7554:1495;;;:::o;8838:795:16:-;8924:7;5799:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5799:16:16;;;;9035:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;-1:-1:-1;;;;;9161:18:16;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;-1:-1:-1;;;;;9368:15:16;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9368:20:16;;;9157:256;-1:-1:-1;;;;;9427:16:16;;;9423:107;;-1:-1:-1;;;;;9487:13:16;;;;;;:9;:13;;;;;:18;;9504:1;9487:18;;;9423:107;9540:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9540:21:16;-1:-1:-1;;;;;9540:21:16;;;;;;;;;9577:27;;9540:16;;9577:27;;;;;;;9622:4;8838:795;-1:-1:-1;;;;8838:795:16:o;1809:162:6:-;1932:7;;-1:-1:-1;;;;;1932:7:6;1918:10;:21;1910:56;;;;-1:-1:-1;;;1910:56:6;;20260:2:27;1910:56:6;;;20242:21:27;20299:2;20279:18;;;20272:30;-1:-1:-1;;;20318:18:27;;;20311:52;20380:18;;1910:56:6;20058:346:27;1910:56:6;1809:162::o;475:163:14:-;550:16;211:28;623:9;581:52;;;;;;20645:13:27;20638:21;20631:29;20613:48;;20601:2;20586:18;;20409:258;581:52:14;;;;-1:-1:-1;;581:52:14;;;;;;;;;;;;;;-1:-1:-1;;;;;581:52:14;-1:-1:-1;;;;;;581:52:14;;;;;;;;;;;475:163;-1:-1:-1;;475:163:14:o;15591:312:16:-;-1:-1:-1;;;;;15698:22:16;;15694:91;;15743:31;;-1:-1:-1;;;15743:31:16;;-1:-1:-1;;;;;1697:32:27;;15743:31:16;;;1679:51:27;1652:18;;15743:31:16;1533:203:27;15694:91:16;-1:-1:-1;;;;;15794:25:16;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;15794:46:16;;;;;;;;;;15855:41;;540::27;;;15855::16;;513:18:27;15855:41:16;;;;;;;15591:312;;;:::o;16918:782::-;-1:-1:-1;;;;;17034:14:16;;;:18;17030:664;;17072:71;;-1:-1:-1;;;17072:71:16;;-1:-1:-1;;;;;17072:36:16;;;;;:71;;735:10:20;;17123:4:16;;17129:7;;17138:4;;17072:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17072:71:16;;;;;;;;-1:-1:-1;;17072:71:16;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17381:6;:13;17398:1;17381:18;17377:293;;17430:25;;-1:-1:-1;;;17430:25:16;;-1:-1:-1;;;;;1697:32:27;;17430:25:16;;;1679:51:27;1652:18;;17430:25:16;1533:203:27;17377:293:16;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;-1:-1:-1;;;;;;17190:51:16;;-1:-1:-1;;;17190:51:16;17186:130;;17272:25;;-1:-1:-1;;;17272:25:16;;-1:-1:-1;;;;;1697:32:27;;17272:25:16;;;1679:51:27;1652:18;;17272:25:16;1533:203:27;17186:130:16;17144:186;16918:782;;;;:::o;637:698:21:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;-1:-1:-1;;;;;817:18:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:21;-1:-1:-1;794:41:21;-1:-1:-1;955:28:21;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:21;-1:-1:-1;;;1175:2:21;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:21;1010:282;1256:21;-1:-1:-1;1312:6:21;637:698;-1:-1:-1;;;637:698:21:o;1536:239:6:-;1655:10;-1:-1:-1;;;;;1649:16:6;;;1641:52;;;;-1:-1:-1;;;1641:52:6;;21622:2:27;1641:52:6;;;21604:21:27;21661:2;21641:18;;;21634:30;21700:25;21680:18;;;21673:53;21743:18;;1641:52:6;21420:347:27;1641:52:6;1700:14;:19;;-1:-1:-1;;;;;;1700:19:6;-1:-1:-1;;;;;1700:19:6;;;;;;;;;1758:7;;1731:39;;1700:19;;1758:7;;1731:39;;-1:-1:-1;;1731:39:6;1536:239;:::o;14720:662:16:-;14880:9;:31;;;-1:-1:-1;;;;;;14893:18:16;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;-1:-1:-1;;;;;;15093:18:16;;;;;;:35;;;15124:4;-1:-1:-1;;;;;15115:13:16;:5;-1:-1:-1;;;;;15115:13:16;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15189:27;;-1:-1:-1;;;15189:27:16;;-1:-1:-1;;;;;1697:32:27;;15189:27:16;;;1679:51:27;1652:18;;15189:27:16;1533:203:27;15089:142:16;15249:9;15245:81;;;15303:7;15299:2;-1:-1:-1;;;;;15283:28:16;15292:5;-1:-1:-1;;;;;15283:28:16;;;;;;;;;;;15245:81;14913:423;14876:460;-1:-1:-1;;15346:24:16;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15346:29:16;-1:-1:-1;;;;;15346:29:16;;;;;;;;;;14720:662::o;10633:100::-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;4323:207:3:-;4442:83;4460:4;4466:15;4483:23;4508:16;4442:17;:83::i;2158:1270::-;2222:12;2242:29;2274:32;375:3;2274:11;:32::i;:::-;2242:64;;2313:34;;;;;;;;;;;;;;-1:-1:-1;;;2313:34:3;;;:6;:18;;:34;;;;:::i;:::-;2381:17;;2353:47;;2373:26;;;;;;;;:::i;:::-;2353:6;;:19;:47::i;:::-;2407:30;;;;;;;;;;;;-1:-1:-1;;;2407:30:3;;;;;;:6;;:18;:30::i;:::-;2471:13;;;;2443:43;;2463:22;;;;;;:::i;2443:43::-;2493:28;;;;;;;;;;;;-1:-1:-1;;;2493:28:3;;;;;;:6;;:18;:28::i;:::-;2546:11;;;;2527:31;;:6;;:18;:31::i;:::-;2569:9;;;;:16;:20;2565:227;;2599:26;;;;;;;;;;;;-1:-1:-1;;;2599:26:3;;;;;;:6;;:18;:26::i;:::-;2633:19;:6;:17;:19::i;:::-;2665:9;2660:98;2684:4;:9;;;:16;2680:1;:20;2660:98;;;2717:32;2736:4;:9;;;2746:1;2736:12;;;;;;;;:::i;:::-;;;;;;;2717:6;:18;;:32;;;;:::i;:::-;2702:3;;;:::i;:::-;;;2660:98;;;;2765:20;:6;:18;:20::i;:::-;2802:30;;;;:37;:41;2798:346;;2881:15;2857:4;:20;;;:39;;;;;;;;:::i;:::-;;2853:88;;2915:17;;-1:-1:-1;;;2915:17:3;;;;;;;;;;;2853:88;2948:37;;;;;;;;;;;;-1:-1:-1;;;2948:37:3;;;;;;:6;;:18;:37::i;:::-;2993:50;3021:4;:20;;;3013:29;;;;;;;;:::i;2993:50::-;3051:29;;;;;;;;;;;;-1:-1:-1;;;3051:29:3;;;;;;:6;;:18;:29::i;:::-;3106:30;;;;3088:49;;:6;;:17;:49::i;:::-;3154:14;;;;:21;:25;3150:246;;3189:31;;;;;;;;;;;;-1:-1:-1;;;3189:31:3;;;;;;:6;;:18;:31::i;:::-;3228:19;:6;:17;:19::i;:::-;3260:9;3255:107;3279:4;:14;;;:21;3275:1;:25;3255:107;;;3317:36;3335:4;:14;;;3350:1;3335:17;;;;;;;;:::i;:::-;;;;;;;3317:6;:17;;:36;;;;:::i;:::-;3302:3;;;:::i;:::-;;;3255:107;;;;3369:20;:6;:18;:20::i;:::-;3409:10;:14;;2158:1270;-1:-1:-1;;2158:1270:3:o;1158:379:0:-;1300:7;1315:17;1335:8;-1:-1:-1;;;;;1335:20:0;;1363:14;1385:4;322:1:3;1442:16:0;1466:5;1335:142;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1488:22;;1315:162;;-1:-1:-1;1315:162:0;;1488:22;;;;;1523:9;1158:379;-1:-1:-1;;;;;1158:379:0:o;7082:368:16:-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;-1:-1:-1;;;;;7252:19:16;;7248:186;;7298:31;;-1:-1:-1;;;7298:31:16;;;;;5035:25:27;;;5008:18;;7298:31:16;4889:177:27;7248:186:16;7375:44;;-1:-1:-1;;;7375:44:16;;-1:-1:-1;;;;;22844:32:27;;7375:44:16;;;22826:51:27;22893:18;;;22886:34;;;22799:18;;7375:44:16;22652:274:27;12214:916:24;12267:7;;-1:-1:-1;;;12342:17:24;;12338:103;;-1:-1:-1;;;12379:17:24;;;-1:-1:-1;12424:2:24;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:24;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:24;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:24;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:24;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:24;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:24:o;10954:182:16:-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;3777:307:3:-;3943:6;3937:20;3961:1;3937:25;3933:51;;3971:13;;-1:-1:-1;;;3971:13:3;;;;;;;;;;;3933:51;3991:4;4011:12;3991:32;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;4029:13:3;;;4045:8;4029:24;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;-1:-1:-1;4059:11:3;;;;:20;;;;-1:-1:-1;;3777:307:3:o;1490:173:9:-;1546:22;;:::i;:::-;1592:8;;1580:31;;1602:8;1580:11;:31::i;:::-;-1:-1:-1;1634:1:9;1621:10;;;:14;:4;1490:173;-1:-1:-1;1490:173:9:o;3021:204::-;3110:70;3128:3;998:1;3165:5;3159:19;3110:17;:70::i;:::-;3190:7;;:28;;3211:5;3190:14;:28::i;1832:202::-;1916:7;;:67;;1942:39;1916:19;:67::i;:::-;;1993:34;2004:3;2020:5;2009:17;;;;;;5035:25:27;;5023:2;5008:18;;4889:177;2009:17:9;;;;;;;;;;;;;1993:10;:34::i;3607:146::-;3674:48;3700:3;1047:1;3674:25;:48::i;:::-;3745:1;3732:3;:9;;:14;;;;;;;:::i;:::-;;;-1:-1:-1;;3607:146:9:o;4211:154::-;4279:55;4305:3;1197:1;4279:25;:55::i;:::-;4357:1;4344:3;:9;;:14;;;;;;;:::i;2828:187::-;2915:62;2933:3;948:1;2963:5;:12;2915:17;:62::i;6376:272:16:-;6479:4;-1:-1:-1;;;;;6514:21:16;;;;;;:127;;;6561:7;-1:-1:-1;;;;;6552:16:16;:5;-1:-1:-1;;;;;6552:16:16;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:88;;;-1:-1:-1;6008:7:16;6034:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6608:32:16;;;6034:24;;6608:32;6552:88;6495:146;6376:272;-1:-1:-1;;;;6376:272:16:o;9955:327::-;-1:-1:-1;;;;;10022:16:16;;10018:87;;10061:33;;-1:-1:-1;;;10061:33:16;;10091:1;10061:33;;;1679:51:27;1652:18;;10061:33:16;1533:203:27;10018:87:16;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;-1:-1:-1;;;;;;10184:27:16;;;10180:96;;10234:31;;-1:-1:-1;;;10234:31:16;;10262:1;10234:31;;;1679:51:27;1652:18;;10234:31:16;1533:203:27;1020:555:8;-1:-1:-1;;;;;;;;;;;;;;;;;1119:13:8;1130:2;1119:8;:13;:::i;:::-;:18;1115:81;;1171:13;1182:2;1171:8;:13;:::i;:::-;1165:20;;:2;:20;:::i;:::-;1153:32;;;;:::i;:::-;;;1115:81;1251:12;;;;:23;;;1324:4;1318:11;1342:16;;;-1:-1:-1;1371:14:8;;1318:11;1417:18;;;1409:27;1452:12;;;1449:60;;;1493:1;1490;1483:12;1449:60;1529:4;1522:17;-1:-1:-1;1565:3:8;;1020:555;-1:-1:-1;;1020:555:8:o;6156:759:9:-;6299:2;6290:5;-1:-1:-1;;;;;6290:11:9;;6286:623;;6317:7;;:48;;6343:20;6353:1;6344:10;;;6343:20;;;6317:19;:48::i;6286:623::-;6395:4;6386:5;-1:-1:-1;;;;;6386:13:9;;6382:527;;6415:7;;:45;;6456:2;6442:10;6451:1;6442:10;;;;6441:17;6415:19;:45::i;:::-;-1:-1:-1;6474:7:9;;:27;;-1:-1:-1;;;;;6474:27:9;;6499:1;6474:17;:27::i;6382:527::-;6531:6;6522:5;-1:-1:-1;;;;;6522:15:9;;6518:391;;6553:7;;:45;;6594:2;6580:10;6589:1;6580:10;;;;6579:17;6553:19;:45::i;:::-;-1:-1:-1;6612:7:9;;:27;;-1:-1:-1;;;;;6612:27:9;;6637:1;6612:17;:27::i;6518:391::-;6669:10;6660:5;-1:-1:-1;;;;;6660:19:9;;6656:253;;6695:7;;:45;;6736:2;6722:10;6731:1;6722:10;;;;6721:17;6695:19;:45::i;:::-;-1:-1:-1;6754:7:9;;:27;;-1:-1:-1;;;;;6754:27:9;;6779:1;6754:17;:27::i;6656:253::-;6812:7;;:45;;6853:2;6839:10;6848:1;6839:10;;;;6838:17;6812:19;:45::i;:::-;-1:-1:-1;6871:7:9;;:27;;-1:-1:-1;;;;;6871:27:9;;6896:1;6871:17;:27::i;4539:146:8:-;-1:-1:-1;;;;;;;;;;;;;;;;;4648:30:8;4655:3;4660:4;4666;:11;4648:6;:30::i;4948:699::-;-1:-1:-1;;;;;;;;;;;;;;;;;5058:7:8;;:14;5047:8;5100:7;5058:14;5106:1;5100:7;:::i;:::-;5082:25;;5128:3;:12;;;5121:3;:19;5117:77;;5156:27;5163:3;5168:14;:10;5181:1;5168:14;:::i;:::-;5156:6;:27::i;:::-;5296:3;5290:10;5417:2;5411:3;5403:6;5399:16;5395:25;5447:4;5441;5433:19;;5543:6;5537:13;5525:10;5522:29;5519:91;;;5585:10;5577:6;5570:26;5519:91;-1:-1:-1;5637:3:8;;4948:699;-1:-1:-1;;;;4948:699:8:o;6921:166:9:-;7035:7;;:45;;7076:2;7062:10;7071:1;7062:10;;;;7061:17;7035:19;:45::i;8083:795:8:-;-1:-1:-1;;;;;;;;;;;;;;;;;8200:7:8;;:14;8189:8;8243:9;8200:14;8243:3;:9;:::i;:::-;8224:28;;8280:3;:12;;;8266:11;:26;8262:85;;;8308:28;8315:3;8320:15;:11;8334:1;8320:15;:::i;8308:28::-;8357:9;8384:1;8370:10;8377:3;8370;:10;:::i;:::-;8369:16;;;;:::i;:::-;8357:28;;8487:3;8481:10;8606:11;8598:6;8594:24;8676:4;8668;8664:9;8657:4;8651:11;8647:27;8644:37;8638:4;8631:51;;8774:6;8768:13;8755:11;8752:30;8749:93;;;8816:11;8808:6;8801:27;8749:93;-1:-1:-1;8868:3:8;;8083:795;-1:-1:-1;;;;;;8083:795:8:o;2844:1427::-;-1:-1:-1;;;;;;;;;;;;;;;;;2970:4:8;:11;2963:3;:18;;2955:27;;;;;;3004:7;;:14;2993:8;3047:9;3053:3;3004:14;3047:9;:::i;:::-;3028:28;;3084:3;:12;;;3070:11;:26;3066:85;;;3112:28;3119:3;3124:15;:11;3138:1;3124:15;:::i;3112:28::-;3284:10;;3367:13;;3480:25;;;3496:2;3480:25;;3161:9;;3579:23;;;3576:86;;;3636:11;3628:6;3621:27;3576:86;-1:-1:-1;;;3692:2:8;3682:13;;3765:165;3779:2;3772:3;:9;3765:165;;3848:10;;3835:24;;3886:10;3894:2;3842:4;3886:10;:::i;:::-;;-1:-1:-1;3910:9:8;3917:2;3910:9;;:::i;:::-;;-1:-1:-1;3783:9:8;3790:2;3783:9;;:::i;:::-;;;3765:165;;;4091:10;4150:11;;-1:-1:-1;;4017:2:8;:8;;;4009:3;:17;4008:23;4146:22;;;4103:9;;4087:26;;;;4198:21;4185:35;;-1:-1:-1;4261:3:8;;-1:-1:-1;;2844:1427:8;;;;;:::o;2004:167::-;2099:7;;2116:19;2099:3;2126:8;2116:4;:19::i;:::-;;2145;2152:3;2157:6;2145;:19::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;14:131:27;-1:-1:-1;;;;;;88:32:27;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:27;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:27;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:27:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:27;;1348:180;-1:-1:-1;1348:180:27:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:27;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:27:o;2178:127::-;2239:10;2234:3;2230:20;2227:1;2220:31;2270:4;2267:1;2260:15;2294:4;2291:1;2284:15;2310:718;2352:5;2405:3;2398:4;2390:6;2386:17;2382:27;2372:55;;2423:1;2420;2413:12;2372:55;2459:6;2446:20;-1:-1:-1;;;;;2522:2:27;2518;2515:10;2512:36;;;2528:18;;:::i;:::-;2603:2;2597:9;2571:2;2657:13;;-1:-1:-1;;2653:22:27;;;2677:2;2649:31;2645:40;2633:53;;;2701:18;;;2721:22;;;2698:46;2695:72;;;2747:18;;:::i;:::-;2787:10;2783:2;2776:22;2822:2;2814:6;2807:18;2868:3;2861:4;2856:2;2848:6;2844:15;2840:26;2837:35;2834:55;;;2885:1;2882;2875:12;2834:55;2949:2;2942:4;2934:6;2930:17;2923:4;2915:6;2911:17;2898:54;2996:1;2989:4;2984:2;2976:6;2972:15;2968:26;2961:37;3016:6;3007:15;;;;;;2310:718;;;;:::o;3033:607::-;3128:6;3136;3144;3197:2;3185:9;3176:7;3172:23;3168:32;3165:52;;;3213:1;3210;3203:12;3165:52;3249:9;3236:23;3226:33;;3310:2;3299:9;3295:18;3282:32;-1:-1:-1;;;;;3374:2:27;3366:6;3363:14;3360:34;;;3390:1;3387;3380:12;3360:34;3413:49;3454:7;3445:6;3434:9;3430:22;3413:49;:::i;:::-;3403:59;;3515:2;3504:9;3500:18;3487:32;3471:48;;3544:2;3534:8;3531:16;3528:36;;;3560:1;3557;3550:12;3528:36;;3583:51;3626:7;3615:8;3604:9;3600:24;3583:51;:::i;:::-;3573:61;;;3033:607;;;;;:::o;3645:683::-;3740:6;3748;3756;3809:2;3797:9;3788:7;3784:23;3780:32;3777:52;;;3825:1;3822;3815:12;3777:52;3861:9;3848:23;3838:33;;3922:2;3911:9;3907:18;3894:32;-1:-1:-1;;;;;3986:2:27;3978:6;3975:14;3972:34;;;4002:1;3999;3992:12;3972:34;4040:6;4029:9;4025:22;4015:32;;4085:7;4078:4;4074:2;4070:13;4066:27;4056:55;;4107:1;4104;4097:12;4056:55;4147:2;4134:16;4173:2;4165:6;4162:14;4159:34;;;4189:1;4186;4179:12;4159:34;4242:7;4237:2;4227:6;4224:1;4220:14;4216:2;4212:23;4208:32;4205:45;4202:65;;;4263:1;4260;4253:12;4202:65;4294:2;4290;4286:11;4276:21;;4316:6;4306:16;;;;;3645:683;;;;;:::o;4333:328::-;4410:6;4418;4426;4479:2;4467:9;4458:7;4454:23;4450:32;4447:52;;;4495:1;4492;4485:12;4447:52;4518:29;4537:9;4518:29;:::i;:::-;4508:39;;4566:38;4600:2;4589:9;4585:18;4566:38;:::i;:::-;4556:48;;4651:2;4640:9;4636:18;4623:32;4613:42;;4333:328;;;;;:::o;5450:186::-;5509:6;5562:2;5550:9;5541:7;5537:23;5533:32;5530:52;;;5578:1;5575;5568:12;5530:52;5601:29;5620:9;5601:29;:::i;6276:389::-;6354:6;6362;6415:2;6403:9;6394:7;6390:23;6386:32;6383:52;;;6431:1;6428;6421:12;6383:52;6467:9;6454:23;6444:33;;6528:2;6517:9;6513:18;6500:32;-1:-1:-1;;;;;6547:6:27;6544:30;6541:50;;;6587:1;6584;6577:12;6541:50;6610:49;6651:7;6642:6;6631:9;6627:22;6610:49;:::i;:::-;6600:59;;;6276:389;;;;;:::o;6670:321::-;6739:6;6792:2;6780:9;6771:7;6767:23;6763:32;6760:52;;;6808:1;6805;6798:12;6760:52;6848:9;6835:23;-1:-1:-1;;;;;6873:6:27;6870:30;6867:50;;;6913:1;6910;6903:12;6867:50;6936:49;6977:7;6968:6;6957:9;6953:22;6936:49;:::i;7234:347::-;7299:6;7307;7360:2;7348:9;7339:7;7335:23;7331:32;7328:52;;;7376:1;7373;7366:12;7328:52;7399:29;7418:9;7399:29;:::i;:::-;7389:39;;7478:2;7467:9;7463:18;7450:32;7525:5;7518:13;7511:21;7504:5;7501:32;7491:60;;7547:1;7544;7537:12;7491:60;7570:5;7560:15;;;7234:347;;;;;:::o;7586:537::-;7681:6;7689;7697;7705;7758:3;7746:9;7737:7;7733:23;7729:33;7726:53;;;7775:1;7772;7765:12;7726:53;7798:29;7817:9;7798:29;:::i;:::-;7788:39;;7846:38;7880:2;7869:9;7865:18;7846:38;:::i;:::-;7836:48;;7931:2;7920:9;7916:18;7903:32;7893:42;;7986:2;7975:9;7971:18;7958:32;-1:-1:-1;;;;;8005:6:27;8002:30;7999:50;;;8045:1;8042;8035:12;7999:50;8068:49;8109:7;8100:6;8089:9;8085:22;8068:49;:::i;:::-;8058:59;;;7586:537;;;;;;;:::o;8128:260::-;8196:6;8204;8257:2;8245:9;8236:7;8232:23;8228:32;8225:52;;;8273:1;8270;8263:12;8225:52;8296:29;8315:9;8296:29;:::i;:::-;8286:39;;8344:38;8378:2;8367:9;8363:18;8344:38;:::i;:::-;8334:48;;8128:260;;;;;:::o;8938:380::-;9017:1;9013:12;;;;9060;;;9081:61;;9135:4;9127:6;9123:17;9113:27;;9081:61;9188:2;9180:6;9177:14;9157:18;9154:38;9151:161;;9234:10;9229:3;9225:20;9222:1;9215:31;9269:4;9266:1;9259:15;9297:4;9294:1;9287:15;9151:161;;8938:380;;;:::o;10359:127::-;10420:10;10415:3;10411:20;10408:1;10401:31;10451:4;10448:1;10441:15;10475:4;10472:1;10465:15;10491:135;10530:3;10551:17;;;10548:43;;10571:18;;:::i;:::-;-1:-1:-1;10618:1:27;10607:13;;10491:135::o;10631:768::-;10832:2;10821:9;10814:21;10877:6;10871:13;10866:2;10855:9;10851:18;10844:41;10939:2;10931:6;10927:15;10921:22;10916:2;10905:9;10901:18;10894:50;11008:6;11002:2;10994:6;10990:15;10984:22;10980:35;10975:2;10964:9;10960:18;10953:63;10795:4;11063:2;11055:6;11051:15;11045:22;11086:10;11151:2;11137:12;11133:21;11127:3;11116:9;11112:19;11105:50;11221:2;11214:3;11206:6;11202:16;11196:23;11192:32;11186:3;11175:9;11171:19;11164:61;;;11274:3;11266:6;11262:16;11256:23;11317:4;11310;11299:9;11295:20;11288:34;11339:54;11388:3;11377:9;11373:19;11357:14;11339:54;:::i;11404:184::-;11474:6;11527:2;11515:9;11506:7;11502:23;11498:32;11495:52;;;11543:1;11540;11533:12;11495:52;-1:-1:-1;11566:16:27;;11404:184;-1:-1:-1;11404:184:27:o;12209:128::-;12276:9;;;12297:11;;;12294:37;;;12311:18;;:::i;12342:127::-;12403:10;12398:3;12394:20;12391:1;12384:31;12434:4;12431:1;12424:15;12458:4;12455:1;12448:15;12600:545;12702:2;12697:3;12694:11;12691:448;;;12738:1;12763:5;12759:2;12752:17;12808:4;12804:2;12794:19;12878:2;12866:10;12862:19;12859:1;12855:27;12849:4;12845:38;12914:4;12902:10;12899:20;12896:47;;;-1:-1:-1;12937:4:27;12896:47;12992:2;12987:3;12983:12;12980:1;12976:20;12970:4;12966:31;12956:41;;13047:82;13065:2;13058:5;13055:13;13047:82;;;13110:17;;;13091:1;13080:13;13047:82;;;13051:3;;;12600:545;;;:::o;13321:1435::-;13440:3;13434:4;13431:13;13428:26;;13447:5;;13321:1435::o;13428:26::-;13477:37;13509:3;13503:10;13477:37;:::i;:::-;-1:-1:-1;;;;;13529:6:27;13526:30;13523:56;;;13559:18;;:::i;:::-;13588:97;13678:6;13638:38;13670:4;13664:11;13638:38;:::i;:::-;13632:4;13588:97;:::i;:::-;13711:1;13739:2;13731:6;13728:14;13756:1;13751:748;;;;14543:1;14560:6;14557:89;;;-1:-1:-1;14612:19:27;;;14606:26;14557:89;-1:-1:-1;;13278:1:27;13274:11;;;13270:24;13266:29;13256:40;13302:1;13298:11;;;13253:57;14659:81;;13721:1029;;13751:748;12547:1;12540:14;;;12584:4;12571:18;;-1:-1:-1;;13787:20:27;;;12547:1;12540:14;;;12584:4;12571:18;;13951:9;13973:251;13987:7;13984:1;13981:14;13973:251;;;14069:21;;;14063:28;14048:44;;14119:1;14192:18;;;;14147:15;;;;14010:4;14003:12;13973:251;;;13977:3;14252:6;14243:7;14240:19;14237:203;;;14313:21;;;14307:28;-1:-1:-1;;14398:1:27;14394:14;;;14410:3;14390:24;14386:37;14382:42;14367:58;14352:74;;14237:203;-1:-1:-1;;;;;14486:1:27;14470:14;;;14466:22;14453:36;;-1:-1:-1;13321:1435:27:o;14761:127::-;14822:10;14817:3;14813:20;14810:1;14803:31;14853:4;14850:1;14843:15;14877:4;14874:1;14867:15;15244:1352;15370:3;15364:10;-1:-1:-1;;;;;15389:6:27;15386:30;15383:56;;;15419:18;;:::i;:::-;15448:97;15538:6;15498:38;15530:4;15524:11;15498:38;:::i;15448:97::-;15600:4;;15664:2;15653:14;;15681:1;15676:663;;;;16383:1;16400:6;16397:89;;;-1:-1:-1;16452:19:27;;;16446:26;16397:89;-1:-1:-1;;13278:1:27;13274:11;;;13270:24;13266:29;13256:40;13302:1;13298:11;;;13253:57;16499:81;;15646:944;;15676:663;12547:1;12540:14;;;12584:4;12571:18;;-1:-1:-1;;15712:20:27;;;15830:236;15844:7;15841:1;15838:14;15830:236;;;15933:19;;;15927:26;15912:42;;16025:27;;;;15993:1;15981:14;;;;15860:19;;15830:236;;;15834:3;16094:6;16085:7;16082:19;16079:201;;;16155:19;;;;16149:26;-1:-1:-1;;16250:3:27;16238:1;16234:14;;;16230:24;16226:37;16222:42;16207:58;16192:74;;;-1:-1:-1;;16326:1:27;16310:14;;;16306:22;16293:36;;-1:-1:-1;15244:1352:27:o;16990:496::-;17169:3;17207:6;17201:13;17223:66;17282:6;17277:3;17270:4;17262:6;17258:17;17223:66;:::i;:::-;17352:13;;17311:16;;;;17374:70;17352:13;17311:16;17421:4;17409:17;;17374:70;:::i;:::-;17460:20;;16990:496;-1:-1:-1;;;;16990:496:27:o;19325:209::-;19357:1;19383;19373:132;;19427:10;19422:3;19418:20;19415:1;19408:31;19462:4;19459:1;19452:15;19490:4;19487:1;19480:15;19373:132;-1:-1:-1;19519:9:27;;19325:209::o;19539:514::-;19738:25;;;19799:2;19794;19779:18;;19772:30;;;19818:18;;19811:34;;;-1:-1:-1;;;;;;19857:31:27;;19854:51;;;19901:1;19898;19891:12;19854:51;19935:6;19932:1;19928:14;19992:6;19984;19979:2;19968:9;19964:18;19951:48;20020:22;;;;20044:2;20016:31;;19539:514;-1:-1:-1;;;;19539:514:27:o;20672:489::-;-1:-1:-1;;;;;20941:15:27;;;20923:34;;20993:15;;20988:2;20973:18;;20966:43;21040:2;21025:18;;21018:34;;;21088:3;21083:2;21068:18;;21061:31;;;20866:4;;21109:46;;21135:19;;21127:6;21109:46;:::i;:::-;21101:54;20672:489;-1:-1:-1;;;;;;20672:489:27:o;21166:249::-;21235:6;21288:2;21276:9;21267:7;21263:23;21259:32;21256:52;;;21304:1;21301;21294:12;21256:52;21336:9;21330:16;21355:30;21379:5;21355:30;:::i;21772:127::-;21833:10;21828:3;21824:20;21821:1;21814:31;21864:4;21861:1;21854:15;21888:4;21885:1;21878:15;21904:554;-1:-1:-1;;;;;22161:6:27;22157:31;22146:9;22139:50;22225:3;22220:2;22209:9;22205:18;22198:31;22120:4;22246:46;22287:3;22276:9;22272:19;22264:6;22246:46;:::i;:::-;22340:6;22328:19;;;;22323:2;22308:18;;22301:47;-1:-1:-1;22396:10:27;22384:23;;;;22379:2;22364:18;;22357:51;22439:3;22424:19;;;22417:35;22238:54;21904:554;-1:-1:-1;;21904:554:27:o;22931:125::-;22996:9;;;23017:10;;;23014:36;;;23030:18;;:::i;23061:168::-;23134:9;;;23165;;23182:15;;;23176:22;;23162:37;23152:71;;23203:18;;:::i;23234:422::-;23323:1;23366:5;23323:1;23380:270;23401:7;23391:8;23388:21;23380:270;;;23460:4;23456:1;23452:6;23448:17;23442:4;23439:27;23436:53;;;23469:18;;:::i;:::-;23519:7;23509:8;23505:22;23502:55;;;23539:16;;;;23502:55;23618:22;;;;23578:15;;;;23380:270;;;23384:3;23234:422;;;;;:::o;23661:806::-;23710:5;23740:8;23730:80;;-1:-1:-1;23781:1:27;23795:5;;23730:80;23829:4;23819:76;;-1:-1:-1;23866:1:27;23880:5;;23819:76;23911:4;23929:1;23924:59;;;;23997:1;23992:130;;;;23904:218;;23924:59;23954:1;23945:10;;23968:5;;;23992:130;24029:3;24019:8;24016:17;24013:43;;;24036:18;;:::i;:::-;-1:-1:-1;;24092:1:27;24078:16;;24107:5;;23904:218;;24206:2;24196:8;24193:16;24187:3;24181:4;24178:13;24174:36;24168:2;24158:8;24155:16;24150:2;24144:4;24141:12;24137:35;24134:77;24131:159;;;-1:-1:-1;24243:19:27;;;24275:5;;24131:159;24322:34;24347:8;24341:4;24322:34;:::i;:::-;24392:6;24388:1;24384:6;24380:19;24371:7;24368:32;24365:58;;;24403:18;;:::i;:::-;24441:20;;23661:806;-1:-1:-1;;;23661:806:27:o;24472:131::-;24532:5;24561:36;24588:8;24582:4;24561:36;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"2490400","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"52419","appendApiSource(string)":"infinite","approve(address,uint256)":"31560","arbitrumSepoliaKeyHash()":"2385","balanceOf(address)":"2678","chainlinkFunctionsRequestIdTracker(bytes32)":"4795","chainlinkVRFRequestIdTracker(uint256)":"6955","disneySource()":"infinite","functionCallbackLastError()":"infinite","functionCallbackLastRequestId()":"2384","functionCallbackLastResponse()":"infinite","functionGasLimit()":"2468","gameOfThronesSource()":"infinite","getApproved(uint256)":"infinite","handleOracleFulfillment(bytes32,bytes,bytes)":"infinite","hpSource()":"infinite","isApprovedForAll(address,address)":"infinite","isPaused()":"2405","lastFunctionCallbackStringResult()":"infinite","mintRandomNFTRequest(address)":"infinite","multiverseApiSources(uint256)":"infinite","name()":"infinite","owner()":"2465","ownerOf(uint256)":"infinite","pause()":"26612","pokeSource()":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite","removeApiSource(uint256)":"infinite","router()":"2447","s_vrfCoordinator()":"2448","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26792","setCoordinator(address)":"30112","supportsInterface(bytes4)":"557","symbol()":"infinite","tokenIdCounter()":"2384","tokenIdToNFTData(uint256)":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30524","unpause()":"26688","updateApiSource(uint256,string)":"infinite","vrfCallbackGasLimit()":"2447","vrfCoordinator()":"2503","vrfLastRequestId()":"2428","vrfNumWords()":"2436","vrfRequestConfirmations()":"2381","vrfRequestIds(uint256)":"4621","vrfSubscriptionId()":"2361"},"internal":{"fulfillRandomWords(uint256,uint256[] calldata)":"infinite","fulfillRequest(bytes32,bytes memory,bytes memory)":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","appendApiSource(string)":"9443dec1","approve(address,uint256)":"095ea7b3","arbitrumSepoliaKeyHash()":"2af60523","balanceOf(address)":"70a08231","chainlinkFunctionsRequestIdTracker(bytes32)":"ff712d02","chainlinkVRFRequestIdTracker(uint256)":"5846d682","disneySource()":"35d46d5c","functionCallbackLastError()":"6250fb2b","functionCallbackLastRequestId()":"e1e16379","functionCallbackLastResponse()":"265d1fa3","functionGasLimit()":"cf2a1a0e","gameOfThronesSource()":"a969a403","getApproved(uint256)":"081812fc","handleOracleFulfillment(bytes32,bytes,bytes)":"0ca76175","hpSource()":"8a0ec9d2","isApprovedForAll(address,address)":"e985e9c5","isPaused()":"b187bd26","lastFunctionCallbackStringResult()":"849e0312","mintRandomNFTRequest(address)":"48e9687a","multiverseApiSources(uint256)":"cfd30a6e","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","pause()":"8456cb59","pokeSource()":"ab6eef52","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","removeApiSource(uint256)":"53cd456f","router()":"f887ea40","s_vrfCoordinator()":"9eccacf6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setCoordinator(address)":"8ea98117","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenIdCounter()":"98bdf6f5","tokenIdToNFTData(uint256)":"6f2f418e","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","unpause()":"3f4ba83a","updateApiSource(uint256,string)":"813ce42d","vrfCallbackGasLimit()":"3b7ed734","vrfCoordinator()":"a3e56fa8","vrfLastRequestId()":"7d058d4f","vrfNumWords()":"5151804a","vrfRequestConfirmations()":"598bc486","vrfRequestIds(uint256)":"425c9fa2","vrfSubscriptionId()":"ed647d21"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"apiSource\",\"type\":\"string\"}],\"name\":\"appendApiSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrumSepoliaKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chainlinkFunctionsRequestIdTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkVRFRequestIdTracker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disneySource\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionCallbackLastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionCallbackLastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionCallbackLastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameOfThronesSource\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hpSource\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFunctionCallbackStringResult\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"}],\"name\":\"mintRandomNFTRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multiverseApiSources\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeSource\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeApiSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToNFTData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"apiSource\",\"type\":\"string\"}],\"name\":\"updateApiSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfLastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"UnexpectedRequestID(bytes32)\":[{\"notice\":\"ERRORS \"}]},\"events\":{\"RequestSent(uint256,uint32)\":{\"notice\":\"CHAINLINK VRF EVENTS \"}},\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"appendApiSource(string)\":{\"notice\":\"Add an API source to the multiverseApiSources array\"},\"constructor\":{\"notice\":\"CONSTRUCTOR \"},\"gameOfThronesSource()\":{\"notice\":\"API Sources , hardcoded but can be updated through helpers \"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"isPaused()\":{\"notice\":\"NFT VARIABLES \"},\"mintRandomNFTRequest(address)\":{\"notice\":\"Entry point for the user to mint an NFT, will kick off the VRF request\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"pause()\":{\"notice\":\"Pause the contract\"},\"removeApiSource(uint256)\":{\"notice\":\"Remove an API source at a specific index\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"},\"unpause()\":{\"notice\":\"Unpause the contract\"},\"updateApiSource(uint256,string)\":{\"notice\":\"Update an API source at a specific index\"},\"vrfSubscriptionId()\":{\"notice\":\"CHAINLINK VRF VARIABLES \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnterTheChainlinkNFTMultiverse.sol\":\"EnterTheChainlinkNFTMultiverse\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/EnterTheChainlinkNFTMultiverse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {FunctionsClient} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {FunctionsRequest} from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\ncontract EnterTheChainlinkNFTMultiverse is\\n    ERC721,\\n    FunctionsClient,\\n    VRFConsumerBaseV2Plus\\n{\\n    using FunctionsRequest for FunctionsRequest.Request;\\n\\n    /** STRUCTS */\\n\\n    struct VRFRequestStatus {\\n        bool fulfilled;\\n        bool exists;\\n        uint256 tokenId;\\n        address userWallet;\\n        uint256[] randomWords;\\n    }\\n\\n    struct FunctionsRequestInfo {\\n        uint256 tokenId;\\n        address userWallet;\\n        bool isPending;\\n    }\\n\\n    /** NFT VARIABLES */\\n\\n    bool public isPaused;\\n\\n    uint256 public tokenIdCounter;\\n\\n    string[] public multiverseApiSources;\\n\\n    string public lastFunctionCallbackStringResult;\\n\\n    mapping(uint256 => string) public tokenIdToNFTData;\\n\\n    /** CHAINLINK FUNCTIONS VARIABLES */\\n\\n    // Chainlink Functions subscription id, needed for the FunctionsClient\\n    uint64 functionsSubscriptionId = 67;\\n\\n    // Mapping to track the request id for the Chainlink Functions node along with the user wallet and tokenId\\n    mapping(bytes32 => FunctionsRequestInfo)\\n        public chainlinkFunctionsRequestIdTracker;\\n\\n    // Arbitrum sepolia router, needed for the FunctionsClient\\n    address public router = 0x234a5fb5Bd614a7AA2FfAB244D603abFA0Ac5C5C;\\n\\n    // Arbitrum Sepolia DON id, needed for the FunctionsClient\\n    bytes32 donId =\\n        0x66756e2d617262697472756d2d7365706f6c69612d3100000000000000000000;\\n\\n    // Function config, needed for the FunctionsClient\\n    bytes32 public functionCallbackLastRequestId;\\n    bytes public functionCallbackLastResponse;\\n    bytes public functionCallbackLastError;\\n    uint32 public functionGasLimit = 300000;\\n\\n    /** CHAINLINK VRF VARIABLES */\\n\\n    // Chainlink VRF subscription id, needed for the VRFConsumerBaseV2Plus\\n    uint256 public vrfSubscriptionId =\\n        40196134761291745625553019149610031040241889441326525117128810163757352880767;\\n\\n    // Mapping to track the request id for the Chainlink VRF node along with the tokenId and user wallet\\n    mapping(uint256 => VRFRequestStatus) public chainlinkVRFRequestIdTracker;\\n\\n    // Arbitrum Sepolia key hash, needed for the VRFConsumerBaseV2Plus\\n    bytes32 public arbitrumSepoliaKeyHash =\\n        0x027f94ff1465b3525f9fc03e9ff7d6d2c0953482246dd6ae07570c45d6631414;\\n\\n    // VRF config, needed for the VRFConsumerBaseV2Plus\\n    uint16 public vrfRequestConfirmations = 1;\\n    uint32 public vrfNumWords = 1;\\n    uint256[] public vrfRequestIds;\\n    uint256 public vrfLastRequestId;\\n    uint32 public vrfCallbackGasLimit = 100000;\\n\\n    // The VRF Coordinator address for the Arbitrum Sepolia network, needed for the VRFConsumerBaseV2Plus\\n    address public vrfCoordinator = 0x5CE8D5A2BC84beb22a398CCA51996F7930313D61;\\n\\n    /** CHAINLINK FUNCTIONS EVENTS */\\n\\n    /** CHAINLINK VRF EVENTS */\\n\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    /** ERRORS */\\n\\n    error UnexpectedRequestID(bytes32 requestId);\\n\\n    /** API Sources , hardcoded but can be updated through helpers */\\n\\n    string public gameOfThronesSource =\\n        \\\"const gotURL = `https://thronesapi.com/api/v2/Characters`;const rand = Math.floor(Math.random() * 50);const gotRequest = Functions.makeHttpRequest({url: gotURL,method: `GET`,});const gotResponse = await gotRequest;const gotData = gotResponse.data;const myData = {name: gotData[rand].fullName,image: gotData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\\\";\\n    string public pokeSource =\\n        \\\"const pokiURL = `https://pokeapi.co/api/v2/pokemon`;const rand = Math.floor(Math.random() * 1000);const pokemonCharacter = rand;const pokiRequest = Functions.makeHttpRequest({url: `${pokiURL}/${pokemonCharacter}`,method: `GET`,});const pokiResponse = await pokiRequest;const reqData = pokiResponse.data;const myData = {name: reqData.species.name,image: reqData.sprites.other.home.front_default,};return Functions.encodeString(JSON.stringify(myData));\\\";\\n    string public disneySource =\\n        \\\"const disneyURL = `https://api.disneyapi.dev/character`;const rand = Math.floor(Math.random() * 50);const disneyRequest = Functions.makeHttpRequest({url: disneyURL,method: `GET`,});const disneyResponse = await disneyRequest;const disneyData = disneyResponse.data.data;const myData = {name: disneyData[rand].name,image: disneyData[rand].imageUrl,};return Functions.encodeString(JSON.stringify(myData));\\\";\\n    string public hpSource =\\n        \\\"const hpURL = `https://hp-api.onrender.com/api/characters`;const rand = Math.floor(Math.random() * 20);const hpRequest = Functions.makeHttpRequest({url: hpURL,method: `GET`,});const hpResponse = await hpRequest;const hpData = hpResponse.data;const myData = {name: hpData[rand].name,image: hpData[rand].image,};return Functions.encodeString(JSON.stringify(myData));\\\";\\n\\n    /** CONSTRUCTOR */\\n\\n    // Constructor inherits from the ERC721, FunctionsClient, and VRFConsumerBaseV2Plus contracts\\n    constructor()\\n        ERC721(\\\"ChainlinkMultiverse\\\", \\\"CLM\\\")\\n        FunctionsClient(router)\\n        VRFConsumerBaseV2Plus(vrfCoordinator)\\n    {\\n        // Fill the multiverseApiSources array with the API sources\\n        multiverseApiSources.push(gameOfThronesSource);\\n        multiverseApiSources.push(pokeSource);\\n        multiverseApiSources.push(disneySource);\\n        multiverseApiSources.push(hpSource);\\n    }\\n\\n    /** EXTERNAL */\\n\\n    /**\\n     * @notice Entry point for the user to mint an NFT, will kick off the VRF request\\n     */\\n    function mintRandomNFTRequest(address userWallet) external {\\n        require(!isPaused, \\\"Contract is paused\\\");\\n        // Increment the tokenId, this is the NFT id that will be minted to the user\\n        tokenIdCounter++;\\n        // Make request to the Chainlink node for a random number\\n        uint256 requestId = s_vrfCoordinator.requestRandomWords(\\n            VRFV2PlusClient.RandomWordsRequest({\\n                keyHash: arbitrumSepoliaKeyHash,\\n                subId: vrfSubscriptionId,\\n                requestConfirmations: vrfRequestConfirmations,\\n                callbackGasLimit: vrfCallbackGasLimit,\\n                numWords: vrfNumWords,\\n                extraArgs: VRFV2PlusClient._argsToBytes(\\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\\n                )\\n            })\\n        );\\n        // Store the request id and the request status\\n        chainlinkVRFRequestIdTracker[requestId] = VRFRequestStatus({\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            tokenId: tokenIdCounter,\\n            userWallet: userWallet,\\n            fulfilled: false\\n        });\\n        vrfRequestIds.push(requestId);\\n        vrfLastRequestId = requestId;\\n        emit RequestSent(requestId, vrfNumWords);\\n    }\\n\\n    /** CHAINLINK SERVICES CALLBACK FUNCS */\\n\\n    /**\\n     * @notice Callback function used by VRF Coordinator\\n     * @dev Use the RandomWordsRequest response to select a random api source\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] calldata randomWords\\n    ) internal override {\\n        // Update the VRF request status\\n        VRFRequestStatus storage request = chainlinkVRFRequestIdTracker[\\n            requestId\\n        ];\\n        request.randomWords = randomWords;\\n        request.fulfilled = true;\\n        // Pull the VRF random number from the response array\\n        uint256 randomNumber = randomWords[0] % multiverseApiSources.length;\\n        // Use the random number to select a random api source\\n        string memory randomApiSource = multiverseApiSources[randomNumber];\\n        // Use the random api source to make a request to the Chainlink node\\n        // Build and initialize the request\\n        FunctionsRequest.Request memory req;\\n        req.initializeRequestForInlineJavaScript(randomApiSource);\\n        // Send request to the Chainlink node\\n        functionCallbackLastRequestId = _sendRequest(\\n            req.encodeCBOR(),\\n            functionsSubscriptionId,\\n            functionGasLimit,\\n            donId\\n        );\\n        // Track the request id for the Chainlink Function request\\n        chainlinkFunctionsRequestIdTracker[\\n            functionCallbackLastRequestId\\n        ] = FunctionsRequestInfo({\\n            tokenId: request.tokenId,\\n            userWallet: request.userWallet,\\n            isPending: true\\n        });\\n        // Emit the RequestFulfilled event\\n        emit RequestFulfilled(requestId, randomWords);\\n    }\\n\\n    /**\\n     * @notice Callback function used by Chainlink Functions node\\n     * @dev Use the response to get the metadata for an NFT and execute the mint of that NFT\\n     */\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        bytes memory response,\\n        bytes memory err\\n    ) internal override {\\n        require(\\n            chainlinkFunctionsRequestIdTracker[requestId].isPending == true,\\n            \\\"Invalid request id\\\"\\n        );\\n        // Store the callback response and error\\n        functionCallbackLastError = err;\\n        functionCallbackLastResponse = response;\\n        // Store the last response as a string\\n        lastFunctionCallbackStringResult = string(response);\\n        // Set the request as not pending anymore\\n        chainlinkFunctionsRequestIdTracker[requestId].isPending = false;\\n        // Set the metadata string for the NFT\\n        tokenIdToNFTData[\\n            chainlinkFunctionsRequestIdTracker[requestId].tokenId\\n        ] = lastFunctionCallbackStringResult;\\n        // Mint the NFT\\n        _safeMint(\\n            chainlinkFunctionsRequestIdTracker[requestId].userWallet,\\n            chainlinkFunctionsRequestIdTracker[requestId].tokenId\\n        );\\n    }\\n\\n    /** HELPERS */\\n\\n    /**\\n     * @notice Pause the contract\\n     */\\n    function pause() external onlyOwner {\\n        isPaused = true;\\n    }\\n\\n    /**\\n     * @notice Unpause the contract\\n     */\\n    function unpause() external onlyOwner {\\n        isPaused = false;\\n    }\\n\\n    /**\\n     * @notice Add an API source to the multiverseApiSources array\\n     */\\n    function appendApiSource(string memory apiSource) external onlyOwner {\\n        multiverseApiSources.push(apiSource);\\n    }\\n\\n    /**\\n     * @notice Remove an API source at a specific index\\n     */\\n    function removeApiSource(uint256 index) external onlyOwner {\\n        require(index < multiverseApiSources.length, \\\"Index out of bounds\\\");\\n        multiverseApiSources[index] = multiverseApiSources[\\n            multiverseApiSources.length - 1\\n        ];\\n        multiverseApiSources.pop();\\n    }\\n\\n    /**\\n     * @notice Update an API source at a specific index\\n     */\\n    function updateApiSource(\\n        uint256 index,\\n        string memory apiSource\\n    ) external onlyOwner {\\n        require(index < multiverseApiSources.length, \\\"Index out of bounds\\\");\\n        multiverseApiSources[index] = apiSource;\\n    }\\n}\\n\",\"keccak256\":\"0x99e50014c8db79b8cc7b27c37d930585e00111d304af9f4d9d7df1e53e32c7bc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2763,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":2765,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2769,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":2773,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":2777,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":2783,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":816,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"s_owner","offset":0,"slot":"6","type":"t_address"},{"astId":818,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"s_pendingOwner","offset":0,"slot":"7","type":"t_address"},{"astId":2299,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"s_vrfCoordinator","offset":0,"slot":"8","type":"t_contract(IVRFCoordinatorV2Plus)2448"},{"astId":5428,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"isPaused","offset":20,"slot":"8","type":"t_bool"},{"astId":5430,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"tokenIdCounter","offset":0,"slot":"9","type":"t_uint256"},{"astId":5433,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"multiverseApiSources","offset":0,"slot":"10","type":"t_array(t_string_storage)dyn_storage"},{"astId":5435,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"lastFunctionCallbackStringResult","offset":0,"slot":"11","type":"t_string_storage"},{"astId":5439,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"tokenIdToNFTData","offset":0,"slot":"12","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":5443,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"functionsSubscriptionId","offset":0,"slot":"13","type":"t_uint64"},{"astId":5448,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"chainlinkFunctionsRequestIdTracker","offset":0,"slot":"14","type":"t_mapping(t_bytes32,t_struct(FunctionsRequestInfo)5425_storage)"},{"astId":5451,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"router","offset":0,"slot":"15","type":"t_address"},{"astId":5454,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"donId","offset":0,"slot":"16","type":"t_bytes32"},{"astId":5456,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"functionCallbackLastRequestId","offset":0,"slot":"17","type":"t_bytes32"},{"astId":5458,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"functionCallbackLastResponse","offset":0,"slot":"18","type":"t_bytes_storage"},{"astId":5460,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"functionCallbackLastError","offset":0,"slot":"19","type":"t_bytes_storage"},{"astId":5463,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"functionGasLimit","offset":0,"slot":"20","type":"t_uint32"},{"astId":5467,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfSubscriptionId","offset":0,"slot":"21","type":"t_uint256"},{"astId":5472,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"chainlinkVRFRequestIdTracker","offset":0,"slot":"22","type":"t_mapping(t_uint256,t_struct(VRFRequestStatus)5418_storage)"},{"astId":5475,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"arbitrumSepoliaKeyHash","offset":0,"slot":"23","type":"t_bytes32"},{"astId":5478,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfRequestConfirmations","offset":0,"slot":"24","type":"t_uint16"},{"astId":5481,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfNumWords","offset":2,"slot":"24","type":"t_uint32"},{"astId":5484,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfRequestIds","offset":0,"slot":"25","type":"t_array(t_uint256)dyn_storage"},{"astId":5486,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfLastRequestId","offset":0,"slot":"26","type":"t_uint256"},{"astId":5489,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfCallbackGasLimit","offset":0,"slot":"27","type":"t_uint32"},{"astId":5492,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"vrfCoordinator","offset":4,"slot":"27","type":"t_address"},{"astId":5515,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"gameOfThronesSource","offset":0,"slot":"28","type":"t_string_storage"},{"astId":5518,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"pokeSource","offset":0,"slot":"29","type":"t_string_storage"},{"astId":5521,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"disneySource","offset":0,"slot":"30","type":"t_string_storage"},{"astId":5524,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"hpSource","offset":0,"slot":"31","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(IVRFCoordinatorV2Plus)2448":{"encoding":"inplace","label":"contract IVRFCoordinatorV2Plus","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(FunctionsRequestInfo)5425_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo)","numberOfBytes":"32","value":"t_struct(FunctionsRequestInfo)5425_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_struct(VRFRequestStatus)5418_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus)","numberOfBytes":"32","value":"t_struct(VRFRequestStatus)5418_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FunctionsRequestInfo)5425_storage":{"encoding":"inplace","label":"struct EnterTheChainlinkNFTMultiverse.FunctionsRequestInfo","members":[{"astId":5420,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"tokenId","offset":0,"slot":"0","type":"t_uint256"},{"astId":5422,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"userWallet","offset":0,"slot":"1","type":"t_address"},{"astId":5424,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"isPending","offset":20,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_struct(VRFRequestStatus)5418_storage":{"encoding":"inplace","label":"struct EnterTheChainlinkNFTMultiverse.VRFRequestStatus","members":[{"astId":5408,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"fulfilled","offset":0,"slot":"0","type":"t_bool"},{"astId":5410,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"exists","offset":1,"slot":"0","type":"t_bool"},{"astId":5412,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"tokenId","offset":0,"slot":"1","type":"t_uint256"},{"astId":5414,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"userWallet","offset":0,"slot":"2","type":"t_address"},{"astId":5417,"contract":"contracts/EnterTheChainlinkNFTMultiverse.sol:EnterTheChainlinkNFTMultiverse","label":"randomWords","offset":0,"slot":"3","type":"t_array(t_uint256)dyn_storage"}],"numberOfBytes":"128"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"UnexpectedRequestID(bytes32)":[{"notice":"ERRORS "}]},"events":{"RequestSent(uint256,uint32)":{"notice":"CHAINLINK VRF EVENTS "}},"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"appendApiSource(string)":{"notice":"Add an API source to the multiverseApiSources array"},"constructor":{"notice":"CONSTRUCTOR "},"gameOfThronesSource()":{"notice":"API Sources , hardcoded but can be updated through helpers "},"handleOracleFulfillment(bytes32,bytes,bytes)":{"notice":"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."},"isPaused()":{"notice":"NFT VARIABLES "},"mintRandomNFTRequest(address)":{"notice":"Entry point for the user to mint an NFT, will kick off the VRF request"},"owner()":{"notice":"Get the current owner"},"pause()":{"notice":"Pause the contract"},"removeApiSource(uint256)":{"notice":"Remove an API source at a specific index"},"setCoordinator(address)":{"notice":"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address."},"unpause()":{"notice":"Unpause the contract"},"updateApiSource(uint256,string)":{"notice":"Update an API source at a specific index"},"vrfSubscriptionId()":{"notice":"CHAINLINK VRF VARIABLES "}},"version":1}}}}}}