/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface EnterTheChainlinkMultiverseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "arbitrumSepoliaVRF"
      | "callbackGasLimit"
      | "gasLimit"
      | "handleOracleFulfillment"
      | "keyHash"
      | "lastRequestId"
      | "makeRandomRequest"
      | "multiverseApiSources"
      | "numWords"
      | "owner"
      | "pokesource"
      | "rawFulfillRandomWords"
      | "requestConfirmations"
      | "requestIdPending"
      | "requestIds"
      | "result"
      | "router"
      | "s_lastError"
      | "s_lastRequestId"
      | "s_lastResponse"
      | "s_requests"
      | "s_vrfCoordinator"
      | "sendRequest"
      | "setCoordinator"
      | "subscriptionId"
      | "transferOwnership"
      | "updatePokeSource"
      | "userToRequestResult"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CoordinatorSet"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled(bytes32)"
      | "RequestFulfilled(uint256,uint256[])"
      | "RequestSent(bytes32)"
      | "RequestSent(uint256,uint32)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrumSepoliaVRF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "keyHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeRandomRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiverseApiSources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numWords", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pokesource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdPending",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_lastError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "s_vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoordinator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePokeSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userToRequestResult",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrumSepoliaVRF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeRandomRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiverseApiSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numWords", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pokesource", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePokeSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userToRequestResult",
    data: BytesLike
  ): Result;
}

export namespace CoordinatorSetEvent {
  export type InputTuple = [vrfCoordinator: AddressLike];
  export type OutputTuple = [vrfCoordinator: string];
  export interface OutputObject {
    vrfCoordinator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilled_bytes32_Event {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilled_uint256_uint256_array_Event {
  export type InputTuple = [
    requestId: BigNumberish,
    randomWords: BigNumberish[]
  ];
  export type OutputTuple = [requestId: bigint, randomWords: bigint[]];
  export interface OutputObject {
    requestId: bigint;
    randomWords: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_bytes32_Event {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSent_uint256_uint32_Event {
  export type InputTuple = [requestId: BigNumberish, numWords: BigNumberish];
  export type OutputTuple = [requestId: bigint, numWords: bigint];
  export interface OutputObject {
    requestId: bigint;
    numWords: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnterTheChainlinkMultiverse extends BaseContract {
  connect(runner?: ContractRunner | null): EnterTheChainlinkMultiverse;
  waitForDeployment(): Promise<this>;

  interface: EnterTheChainlinkMultiverseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  arbitrumSepoliaVRF: TypedContractMethod<[], [string], "view">;

  callbackGasLimit: TypedContractMethod<[], [bigint], "view">;

  gasLimit: TypedContractMethod<[], [bigint], "view">;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  keyHash: TypedContractMethod<[], [string], "view">;

  lastRequestId: TypedContractMethod<[], [bigint], "view">;

  makeRandomRequest: TypedContractMethod<[], [bigint], "nonpayable">;

  multiverseApiSources: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  numWords: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pokesource: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestConfirmations: TypedContractMethod<[], [bigint], "view">;

  requestIdPending: TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { userWallet: string; isPending: boolean }],
    "view"
  >;

  requestIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  result: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  s_lastError: TypedContractMethod<[], [string], "view">;

  s_lastRequestId: TypedContractMethod<[], [string], "view">;

  s_lastResponse: TypedContractMethod<[], [string], "view">;

  s_requests: TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;

  s_vrfCoordinator: TypedContractMethod<[], [string], "view">;

  sendRequest: TypedContractMethod<
    [userWallet: AddressLike],
    [string],
    "nonpayable"
  >;

  setCoordinator: TypedContractMethod<
    [_vrfCoordinator: AddressLike],
    [void],
    "nonpayable"
  >;

  subscriptionId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePokeSource: TypedContractMethod<[s: string], [void], "nonpayable">;

  userToRequestResult: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "arbitrumSepoliaVRF"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callbackGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "makeRandomRequest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "multiverseApiSources"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "numWords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pokesource"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestIdPending"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, boolean] & { userWallet: string; isPending: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "requestIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "result"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastError"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastRequestId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastResponse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, boolean] & { fulfilled: boolean; exists: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<[userWallet: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setCoordinator"
  ): TypedContractMethod<[_vrfCoordinator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePokeSource"
  ): TypedContractMethod<[s: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userToRequestResult"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "CoordinatorSet"
  ): TypedContractEvent<
    CoordinatorSetEvent.InputTuple,
    CoordinatorSetEvent.OutputTuple,
    CoordinatorSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled(bytes32)"
  ): TypedContractEvent<
    RequestFulfilled_bytes32_Event.InputTuple,
    RequestFulfilled_bytes32_Event.OutputTuple,
    RequestFulfilled_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled(uint256,uint256[])"
  ): TypedContractEvent<
    RequestFulfilled_uint256_uint256_array_Event.InputTuple,
    RequestFulfilled_uint256_uint256_array_Event.OutputTuple,
    RequestFulfilled_uint256_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "RequestSent(bytes32)"
  ): TypedContractEvent<
    RequestSent_bytes32_Event.InputTuple,
    RequestSent_bytes32_Event.OutputTuple,
    RequestSent_bytes32_Event.OutputObject
  >;
  getEvent(
    key: "RequestSent(uint256,uint32)"
  ): TypedContractEvent<
    RequestSent_uint256_uint32_Event.InputTuple,
    RequestSent_uint256_uint32_Event.OutputTuple,
    RequestSent_uint256_uint32_Event.OutputObject
  >;

  filters: {
    "CoordinatorSet(address)": TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;
    CoordinatorSet: TypedContractEvent<
      CoordinatorSetEvent.InputTuple,
      CoordinatorSetEvent.OutputTuple,
      CoordinatorSetEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilled_bytes32_Event.InputTuple,
      RequestFulfilled_bytes32_Event.OutputTuple,
      RequestFulfilled_bytes32_Event.OutputObject
    >;
    "RequestFulfilled(uint256,uint256[])": TypedContractEvent<
      RequestFulfilled_uint256_uint256_array_Event.InputTuple,
      RequestFulfilled_uint256_uint256_array_Event.OutputTuple,
      RequestFulfilled_uint256_uint256_array_Event.OutputObject
    >;
    "RequestSent(bytes32)": TypedContractEvent<
      RequestSent_bytes32_Event.InputTuple,
      RequestSent_bytes32_Event.OutputTuple,
      RequestSent_bytes32_Event.OutputObject
    >;
    "RequestSent(uint256,uint32)": TypedContractEvent<
      RequestSent_uint256_uint32_Event.InputTuple,
      RequestSent_uint256_uint32_Event.OutputTuple,
      RequestSent_uint256_uint32_Event.OutputObject
    >;
  };
}
